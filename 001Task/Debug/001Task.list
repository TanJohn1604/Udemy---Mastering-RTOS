
001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004450  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080045f0  080045f0  000145f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004660  08004660  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004668  08004668  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f5c  20000070  080046e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012fcc  080046e0  00022fcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e23e  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b0  00000000  00000000  0002e321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  000309d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b82  00000000  00000000  000318d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001802d  00000000  00000000  00032452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010533  00000000  00000000  0004a47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000966de  00000000  00000000  0005a9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004460  00000000  00000000  000f1090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f54f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080045d8 	.word	0x080045d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080045d8 	.word	0x080045d8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fa85 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f845 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f89f 	bl	800062c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	9301      	str	r3, [sp, #4]
 80004f4:	2302      	movs	r3, #2
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <main+0x80>)
 80004fa:	22c8      	movs	r2, #200	; 0xc8
 80004fc:	4918      	ldr	r1, [pc, #96]	; (8000560 <main+0x84>)
 80004fe:	4819      	ldr	r0, [pc, #100]	; (8000564 <main+0x88>)
 8000500:	f001 fe2c 	bl	800215c <xTaskCreate>
 8000504:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d00a      	beq.n	8000522 <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000510:	f383 8811 	msr	BASEPRI, r3
 8000514:	f3bf 8f6f 	isb	sy
 8000518:	f3bf 8f4f 	dsb	sy
 800051c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800051e:	bf00      	nop
 8000520:	e7fe      	b.n	8000520 <main+0x44>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2302      	movs	r3, #2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <main+0x8c>)
 800052c:	22c8      	movs	r2, #200	; 0xc8
 800052e:	490f      	ldr	r1, [pc, #60]	; (800056c <main+0x90>)
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <main+0x94>)
 8000532:	f001 fe13 	bl	800215c <xTaskCreate>
 8000536:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d00a      	beq.n	8000554 <main+0x78>
        __asm volatile
 800053e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000542:	f383 8811 	msr	BASEPRI, r3
 8000546:	f3bf 8f6f 	isb	sy
 800054a:	f3bf 8f4f 	dsb	sy
 800054e:	60fb      	str	r3, [r7, #12]
    }
 8000550:	bf00      	nop
 8000552:	e7fe      	b.n	8000552 <main+0x76>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000554:	f001 ff5e 	bl	8002414 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x7c>
 800055a:	bf00      	nop
 800055c:	080045f0 	.word	0x080045f0
 8000560:	08004608 	.word	0x08004608
 8000564:	08000661 	.word	0x08000661
 8000568:	08004610 	.word	0x08004610
 800056c:	08004628 	.word	0x08004628
 8000570:	08000685 	.word	0x08000685

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fd5c 	bl	8004040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <SystemClock_Config+0xb0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a20      	ldr	r2, [pc, #128]	; (8000624 <SystemClock_Config+0xb0>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <SystemClock_Config+0xb0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <SystemClock_Config+0xb4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <SystemClock_Config+0xb4>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <SystemClock_Config+0xb4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005da:	2300      	movs	r3, #0
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fb28 	bl	8000c38 <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80005ee:	f000 f86d 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005f6:	2301      	movs	r3, #1
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fd8b 	bl	8001128 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000618:	f000 f858 	bl	80006cc <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	; 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_GPIO_Init+0x30>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <MX_GPIO_Init+0x30>)
 800063c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_GPIO_Init+0x30>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800

08000660 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	; 0x70
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
	printf("%s\n",(char*)parameters);
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f003 fc09 	bl	8003e80 <puts>
//		snprintf(msg,100,"%s\n", (char*)parameters);
//		SEGGER_SYSVIEW_PrintfTarget(msg);
		taskYIELD();
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <task1_handler+0x20>)
 8000670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	f3bf 8f4f 	dsb	sy
 800067a:	f3bf 8f6f 	isb	sy
	printf("%s\n",(char*)parameters);
 800067e:	e7f3      	b.n	8000668 <task1_handler+0x8>
 8000680:	e000ed04 	.word	0xe000ed04

08000684 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09c      	sub	sp, #112	; 0x70
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
	printf("%s\n",(char*)parameters);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f003 fbf7 	bl	8003e80 <puts>
//		snprintf(msg,100,"%s\n", (char*)parameters);
//		SEGGER_SYSVIEW_PrintfTarget(msg);
		taskYIELD();
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <task2_handler+0x20>)
 8000694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	f3bf 8f4f 	dsb	sy
 800069e:	f3bf 8f6f 	isb	sy
	printf("%s\n",(char*)parameters);
 80006a2:	e7f3      	b.n	800068c <task2_handler+0x8>
 80006a4:	e000ed04 	.word	0xe000ed04

080006a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d101      	bne.n	80006be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ba:	f000 f9bb 	bl	8000a34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40010000 	.word	0x40010000

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <Error_Handler+0x8>
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <HAL_MspInit+0x4c>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <HAL_MspInit+0x4c>)
 80006e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ec:	6453      	str	r3, [r2, #68]	; 0x44
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <HAL_MspInit+0x4c>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_MspInit+0x4c>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_MspInit+0x4c>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000708:	6413      	str	r3, [r2, #64]	; 0x40
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_MspInit+0x4c>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <HAL_InitTick+0xd0>)
 800073e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000740:	4a2d      	ldr	r2, [pc, #180]	; (80007f8 <HAL_InitTick+0xd0>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6453      	str	r3, [r2, #68]	; 0x44
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <HAL_InitTick+0xd0>)
 800074a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000754:	f107 020c 	add.w	r2, r7, #12
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f000 feee 	bl	8001540 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000764:	f000 fed8 	bl	8001518 <HAL_RCC_GetPCLK2Freq>
 8000768:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800076a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800076c:	4a23      	ldr	r2, [pc, #140]	; (80007fc <HAL_InitTick+0xd4>)
 800076e:	fba2 2303 	umull	r2, r3, r2, r3
 8000772:	0c9b      	lsrs	r3, r3, #18
 8000774:	3b01      	subs	r3, #1
 8000776:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <HAL_InitTick+0xd8>)
 800077a:	4a22      	ldr	r2, [pc, #136]	; (8000804 <HAL_InitTick+0xdc>)
 800077c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <HAL_InitTick+0xd8>)
 8000780:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000784:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <HAL_InitTick+0xd8>)
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <HAL_InitTick+0xd8>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <HAL_InitTick+0xd8>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <HAL_InitTick+0xd8>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <HAL_InitTick+0xd8>)
 80007a0:	f000 ff00 	bl	80015a4 <HAL_TIM_Base_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80007aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d11b      	bne.n	80007ea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80007b2:	4813      	ldr	r0, [pc, #76]	; (8000800 <HAL_InitTick+0xd8>)
 80007b4:	f000 ff50 	bl	8001658 <HAL_TIM_Base_Start_IT>
 80007b8:	4603      	mov	r3, r0
 80007ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80007be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d111      	bne.n	80007ea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80007c6:	2019      	movs	r0, #25
 80007c8:	f000 fa28 	bl	8000c1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b0f      	cmp	r3, #15
 80007d0:	d808      	bhi.n	80007e4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80007d2:	2200      	movs	r2, #0
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	2019      	movs	r0, #25
 80007d8:	f000 fa04 	bl	8000be4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <HAL_InitTick+0xe0>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e002      	b.n	80007ea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80007e4:	2301      	movs	r3, #1
 80007e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80007ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3730      	adds	r7, #48	; 0x30
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	431bde83 	.word	0x431bde83
 8000800:	2000008c 	.word	0x2000008c
 8000804:	40010000 	.word	0x40010000
 8000808:	20000004 	.word	0x20000004

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000810:	e7fe      	b.n	8000810 <NMI_Handler+0x4>

08000812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <MemManage_Handler+0x4>

0800081e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <UsageFault_Handler+0x4>

0800082a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800083e:	f000 ff6d 	bl	800171c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000008c 	.word	0x2000008c

0800084c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <ITM_SendChar+0x48>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <ITM_SendChar+0x48>)
 800085c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000860:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <ITM_SendChar+0x4c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <ITM_SendChar+0x4c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800086e:	bf00      	nop
 8000870:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0f8      	beq.n	8000870 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800087e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000edfc 	.word	0xe000edfc
 8000898:	e0000e00 	.word	0xe0000e00

0800089c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00a      	b.n	80008c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ae:	f3af 8000 	nop.w
 80008b2:	4601      	mov	r1, r0
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbf0      	blt.n	80008ae <_read+0x12>
  }

  return len;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	e009      	b.n	80008fc <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	60ba      	str	r2, [r7, #8]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ffab 	bl	800084c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbf1      	blt.n	80008e8 <_write+0x12>
  }
  return len;
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_close>:

int _close(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000936:	605a      	str	r2, [r3, #4]
  return 0;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <_isatty>:

int _isatty(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <SystemInit+0x20>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <SystemInit+0x20>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800099c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a0:	f7ff ffea 	bl	8000978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a6:	490d      	ldr	r1, [pc, #52]	; (80009dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009bc:	4c0a      	ldr	r4, [pc, #40]	; (80009e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ca:	f003 fb87 	bl	80040dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ce:	f7ff fd85 	bl	80004dc <main>
  bx  lr    
 80009d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009e0:	08004670 	.word	0x08004670
  ldr r2, =_sbss
 80009e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009e8:	20012fcc 	.word	0x20012fcc

080009ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC_IRQHandler>
	...

080009f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <HAL_Init+0x40>)
 80009fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <HAL_Init+0x40>)
 8000a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_Init+0x40>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_Init+0x40>)
 8000a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f8d8 	bl	8000bce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1e:	200f      	movs	r0, #15
 8000a20:	f7ff fe82 	bl	8000728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff fe58 	bl	80006d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023c00 	.word	0x40023c00

08000a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x20>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x24>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_IncTick+0x24>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008
 8000a58:	200000d4 	.word	0x200000d4

08000a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_GetTick+0x14>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	200000d4 	.word	0x200000d4

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	db0b      	blt.n	8000b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 021f 	and.w	r2, r3, #31
 8000af0:	4907      	ldr	r1, [pc, #28]	; (8000b10 <__NVIC_EnableIRQ+0x38>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	2001      	movs	r0, #1
 8000afa:	fa00 f202 	lsl.w	r2, r0, r2
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ff4c 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf6:	f7ff ff61 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000bfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	6978      	ldr	r0, [r7, #20]
 8000c02:	f7ff ffb1 	bl	8000b68 <NVIC_EncodePriority>
 8000c06:	4602      	mov	r2, r0
 8000c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff80 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff54 	bl	8000ad8 <__NVIC_EnableIRQ>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e267      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d075      	beq.n	8000d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c56:	4b88      	ldr	r3, [pc, #544]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f003 030c 	and.w	r3, r3, #12
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	d00c      	beq.n	8000c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c62:	4b85      	ldr	r3, [pc, #532]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d112      	bne.n	8000c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c6e:	4b82      	ldr	r3, [pc, #520]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c7a:	d10b      	bne.n	8000c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7c:	4b7e      	ldr	r3, [pc, #504]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d05b      	beq.n	8000d40 <HAL_RCC_OscConfig+0x108>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d157      	bne.n	8000d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e242      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c9c:	d106      	bne.n	8000cac <HAL_RCC_OscConfig+0x74>
 8000c9e:	4b76      	ldr	r3, [pc, #472]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a75      	ldr	r2, [pc, #468]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e01d      	b.n	8000ce8 <HAL_RCC_OscConfig+0xb0>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x98>
 8000cb6:	4b70      	ldr	r3, [pc, #448]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a6f      	ldr	r2, [pc, #444]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	4b6d      	ldr	r3, [pc, #436]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a6c      	ldr	r2, [pc, #432]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e00b      	b.n	8000ce8 <HAL_RCC_OscConfig+0xb0>
 8000cd0:	4b69      	ldr	r3, [pc, #420]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a68      	ldr	r2, [pc, #416]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	4b66      	ldr	r3, [pc, #408]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a65      	ldr	r2, [pc, #404]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf0:	f7ff feb4 	bl	8000a5c <HAL_GetTick>
 8000cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf6:	e008      	b.n	8000d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf8:	f7ff feb0 	bl	8000a5c <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b64      	cmp	r3, #100	; 0x64
 8000d04:	d901      	bls.n	8000d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e207      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0a:	4b5b      	ldr	r3, [pc, #364]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0f0      	beq.n	8000cf8 <HAL_RCC_OscConfig+0xc0>
 8000d16:	e014      	b.n	8000d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d18:	f7ff fea0 	bl	8000a5c <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1e:	e008      	b.n	8000d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d20:	f7ff fe9c 	bl	8000a5c <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b64      	cmp	r3, #100	; 0x64
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e1f3      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d32:	4b51      	ldr	r3, [pc, #324]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f0      	bne.n	8000d20 <HAL_RCC_OscConfig+0xe8>
 8000d3e:	e000      	b.n	8000d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d063      	beq.n	8000e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d4e:	4b4a      	ldr	r3, [pc, #296]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00b      	beq.n	8000d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d5a:	4b47      	ldr	r3, [pc, #284]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d62:	2b08      	cmp	r3, #8
 8000d64:	d11c      	bne.n	8000da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d66:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d116      	bne.n	8000da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d72:	4b41      	ldr	r3, [pc, #260]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d005      	beq.n	8000d8a <HAL_RCC_OscConfig+0x152>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d001      	beq.n	8000d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e1c7      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	4937      	ldr	r1, [pc, #220]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d9e:	e03a      	b.n	8000e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d020      	beq.n	8000dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000da8:	4b34      	ldr	r3, [pc, #208]	; (8000e7c <HAL_RCC_OscConfig+0x244>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dae:	f7ff fe55 	bl	8000a5c <HAL_GetTick>
 8000db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db4:	e008      	b.n	8000dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db6:	f7ff fe51 	bl	8000a5c <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e1a8      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc8:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f0      	beq.n	8000db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	4925      	ldr	r1, [pc, #148]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	600b      	str	r3, [r1, #0]
 8000de8:	e015      	b.n	8000e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <HAL_RCC_OscConfig+0x244>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df0:	f7ff fe34 	bl	8000a5c <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df8:	f7ff fe30 	bl	8000a5c <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e187      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d036      	beq.n	8000e90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d016      	beq.n	8000e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_RCC_OscConfig+0x248>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e30:	f7ff fe14 	bl	8000a5c <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e38:	f7ff fe10 	bl	8000a5c <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e167      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_RCC_OscConfig+0x240>)
 8000e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f0      	beq.n	8000e38 <HAL_RCC_OscConfig+0x200>
 8000e56:	e01b      	b.n	8000e90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_RCC_OscConfig+0x248>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fdfd 	bl	8000a5c <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e64:	e00e      	b.n	8000e84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e66:	f7ff fdf9 	bl	8000a5c <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d907      	bls.n	8000e84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e150      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	42470000 	.word	0x42470000
 8000e80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e84:	4b88      	ldr	r3, [pc, #544]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1ea      	bne.n	8000e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 8097 	beq.w	8000fcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea2:	4b81      	ldr	r3, [pc, #516]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10f      	bne.n	8000ece <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b7d      	ldr	r3, [pc, #500]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a7c      	ldr	r2, [pc, #496]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b7a      	ldr	r3, [pc, #488]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ece:	4b77      	ldr	r3, [pc, #476]	; (80010ac <HAL_RCC_OscConfig+0x474>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d118      	bne.n	8000f0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eda:	4b74      	ldr	r3, [pc, #464]	; (80010ac <HAL_RCC_OscConfig+0x474>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a73      	ldr	r2, [pc, #460]	; (80010ac <HAL_RCC_OscConfig+0x474>)
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ee6:	f7ff fdb9 	bl	8000a5c <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eec:	e008      	b.n	8000f00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eee:	f7ff fdb5 	bl	8000a5c <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e10c      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f00:	4b6a      	ldr	r3, [pc, #424]	; (80010ac <HAL_RCC_OscConfig+0x474>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0f0      	beq.n	8000eee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d106      	bne.n	8000f22 <HAL_RCC_OscConfig+0x2ea>
 8000f14:	4b64      	ldr	r3, [pc, #400]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f18:	4a63      	ldr	r2, [pc, #396]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f20:	e01c      	b.n	8000f5c <HAL_RCC_OscConfig+0x324>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b05      	cmp	r3, #5
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x30c>
 8000f2a:	4b5f      	ldr	r3, [pc, #380]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f2e:	4a5e      	ldr	r2, [pc, #376]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6713      	str	r3, [r2, #112]	; 0x70
 8000f36:	4b5c      	ldr	r3, [pc, #368]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f3a:	4a5b      	ldr	r2, [pc, #364]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6713      	str	r3, [r2, #112]	; 0x70
 8000f42:	e00b      	b.n	8000f5c <HAL_RCC_OscConfig+0x324>
 8000f44:	4b58      	ldr	r3, [pc, #352]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f48:	4a57      	ldr	r2, [pc, #348]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000f4a:	f023 0301 	bic.w	r3, r3, #1
 8000f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f50:	4b55      	ldr	r3, [pc, #340]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f54:	4a54      	ldr	r2, [pc, #336]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000f56:	f023 0304 	bic.w	r3, r3, #4
 8000f5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d015      	beq.n	8000f90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f64:	f7ff fd7a 	bl	8000a5c <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f6a:	e00a      	b.n	8000f82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fd76 	bl	8000a5c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e0cb      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f82:	4b49      	ldr	r3, [pc, #292]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0ee      	beq.n	8000f6c <HAL_RCC_OscConfig+0x334>
 8000f8e:	e014      	b.n	8000fba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f90:	f7ff fd64 	bl	8000a5c <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f96:	e00a      	b.n	8000fae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f98:	f7ff fd60 	bl	8000a5c <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e0b5      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fae:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1ee      	bne.n	8000f98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d105      	bne.n	8000fcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fc0:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a38      	ldr	r2, [pc, #224]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 80a1 	beq.w	8001118 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d05c      	beq.n	800109c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d141      	bne.n	800106e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fea:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <HAL_RCC_OscConfig+0x478>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fd34 	bl	8000a5c <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff8:	f7ff fd30 	bl	8000a5c <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e087      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69da      	ldr	r2, [r3, #28]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	019b      	lsls	r3, r3, #6
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	085b      	lsrs	r3, r3, #1
 800102e:	3b01      	subs	r3, #1
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	061b      	lsls	r3, r3, #24
 800103a:	491b      	ldr	r1, [pc, #108]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 800103c:	4313      	orrs	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_RCC_OscConfig+0x478>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fd09 	bl	8000a5c <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104e:	f7ff fd05 	bl	8000a5c <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e05c      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x416>
 800106c:	e054      	b.n	8001118 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_RCC_OscConfig+0x478>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fcf2 	bl	8000a5c <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800107c:	f7ff fcee 	bl	8000a5c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e045      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_RCC_OscConfig+0x470>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x444>
 800109a:	e03d      	b.n	8001118 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d107      	bne.n	80010b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e038      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40007000 	.word	0x40007000
 80010b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <HAL_RCC_OscConfig+0x4ec>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d028      	beq.n	8001114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d121      	bne.n	8001114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010da:	429a      	cmp	r2, r3
 80010dc:	d11a      	bne.n	8001114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010e4:	4013      	ands	r3, r2
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d111      	bne.n	8001114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	085b      	lsrs	r3, r3, #1
 80010fc:	3b01      	subs	r3, #1
 80010fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001100:	429a      	cmp	r2, r3
 8001102:	d107      	bne.n	8001114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001110:	429a      	cmp	r2, r3
 8001112:	d001      	beq.n	8001118 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e000      	b.n	800111a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800

08001128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e0cc      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800113c:	4b68      	ldr	r3, [pc, #416]	; (80012e0 <HAL_RCC_ClockConfig+0x1b8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d90c      	bls.n	8001164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114a:	4b65      	ldr	r3, [pc, #404]	; (80012e0 <HAL_RCC_ClockConfig+0x1b8>)
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001152:	4b63      	ldr	r3, [pc, #396]	; (80012e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d001      	beq.n	8001164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e0b8      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d020      	beq.n	80011b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800117c:	4b59      	ldr	r3, [pc, #356]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a58      	ldr	r2, [pc, #352]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0308 	and.w	r3, r3, #8
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001194:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800119e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a0:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	494d      	ldr	r1, [pc, #308]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d044      	beq.n	8001248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d107      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4b47      	ldr	r3, [pc, #284]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d119      	bne.n	8001206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e07f      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d003      	beq.n	80011e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d107      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011e6:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d109      	bne.n	8001206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e06f      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e067      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001206:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f023 0203 	bic.w	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4934      	ldr	r1, [pc, #208]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	4313      	orrs	r3, r2
 8001216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001218:	f7ff fc20 	bl	8000a5c <HAL_GetTick>
 800121c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121e:	e00a      	b.n	8001236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001220:	f7ff fc1c 	bl	8000a5c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	f241 3288 	movw	r2, #5000	; 0x1388
 800122e:	4293      	cmp	r3, r2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e04f      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001236:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 020c 	and.w	r2, r3, #12
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	429a      	cmp	r2, r3
 8001246:	d1eb      	bne.n	8001220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_RCC_ClockConfig+0x1b8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d20c      	bcs.n	8001270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d001      	beq.n	8001270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e032      	b.n	80012d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d008      	beq.n	800128e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	4916      	ldr	r1, [pc, #88]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	4313      	orrs	r3, r2
 800128c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d009      	beq.n	80012ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	490e      	ldr	r1, [pc, #56]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012ae:	f000 f821 	bl	80012f4 <HAL_RCC_GetSysClockFreq>
 80012b2:	4602      	mov	r2, r0
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	490a      	ldr	r1, [pc, #40]	; (80012e8 <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	5ccb      	ldrb	r3, [r1, r3]
 80012c2:	fa22 f303 	lsr.w	r3, r2, r3
 80012c6:	4a09      	ldr	r2, [pc, #36]	; (80012ec <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_RCC_ClockConfig+0x1c8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fa2a 	bl	8000728 <HAL_InitTick>

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023c00 	.word	0x40023c00
 80012e4:	40023800 	.word	0x40023800
 80012e8:	08004648 	.word	0x08004648
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000004 	.word	0x20000004

080012f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012f8:	b094      	sub	sp, #80	; 0x50
 80012fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	647b      	str	r3, [r7, #68]	; 0x44
 8001300:	2300      	movs	r3, #0
 8001302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001304:	2300      	movs	r3, #0
 8001306:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800130c:	4b79      	ldr	r3, [pc, #484]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d00d      	beq.n	8001334 <HAL_RCC_GetSysClockFreq+0x40>
 8001318:	2b08      	cmp	r3, #8
 800131a:	f200 80e1 	bhi.w	80014e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <HAL_RCC_GetSysClockFreq+0x34>
 8001322:	2b04      	cmp	r3, #4
 8001324:	d003      	beq.n	800132e <HAL_RCC_GetSysClockFreq+0x3a>
 8001326:	e0db      	b.n	80014e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001328:	4b73      	ldr	r3, [pc, #460]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800132a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800132c:	e0db      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800132e:	4b73      	ldr	r3, [pc, #460]	; (80014fc <HAL_RCC_GetSysClockFreq+0x208>)
 8001330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001332:	e0d8      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001334:	4b6f      	ldr	r3, [pc, #444]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800133e:	4b6d      	ldr	r3, [pc, #436]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d063      	beq.n	8001412 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800134a:	4b6a      	ldr	r3, [pc, #424]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	099b      	lsrs	r3, r3, #6
 8001350:	2200      	movs	r2, #0
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
 8001354:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
 800135e:	2300      	movs	r3, #0
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
 8001362:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001366:	4622      	mov	r2, r4
 8001368:	462b      	mov	r3, r5
 800136a:	f04f 0000 	mov.w	r0, #0
 800136e:	f04f 0100 	mov.w	r1, #0
 8001372:	0159      	lsls	r1, r3, #5
 8001374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001378:	0150      	lsls	r0, r2, #5
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4621      	mov	r1, r4
 8001380:	1a51      	subs	r1, r2, r1
 8001382:	6139      	str	r1, [r7, #16]
 8001384:	4629      	mov	r1, r5
 8001386:	eb63 0301 	sbc.w	r3, r3, r1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001398:	4659      	mov	r1, fp
 800139a:	018b      	lsls	r3, r1, #6
 800139c:	4651      	mov	r1, sl
 800139e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013a2:	4651      	mov	r1, sl
 80013a4:	018a      	lsls	r2, r1, #6
 80013a6:	4651      	mov	r1, sl
 80013a8:	ebb2 0801 	subs.w	r8, r2, r1
 80013ac:	4659      	mov	r1, fp
 80013ae:	eb63 0901 	sbc.w	r9, r3, r1
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013c6:	4690      	mov	r8, r2
 80013c8:	4699      	mov	r9, r3
 80013ca:	4623      	mov	r3, r4
 80013cc:	eb18 0303 	adds.w	r3, r8, r3
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	462b      	mov	r3, r5
 80013d4:	eb49 0303 	adc.w	r3, r9, r3
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013e6:	4629      	mov	r1, r5
 80013e8:	024b      	lsls	r3, r1, #9
 80013ea:	4621      	mov	r1, r4
 80013ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013f0:	4621      	mov	r1, r4
 80013f2:	024a      	lsls	r2, r1, #9
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013fa:	2200      	movs	r2, #0
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80013fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001400:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001404:	f7fe feec 	bl	80001e0 <__aeabi_uldivmod>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4613      	mov	r3, r2
 800140e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001410:	e058      	b.n	80014c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001412:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	099b      	lsrs	r3, r3, #6
 8001418:	2200      	movs	r2, #0
 800141a:	4618      	mov	r0, r3
 800141c:	4611      	mov	r1, r2
 800141e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001422:	623b      	str	r3, [r7, #32]
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
 8001428:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800142c:	4642      	mov	r2, r8
 800142e:	464b      	mov	r3, r9
 8001430:	f04f 0000 	mov.w	r0, #0
 8001434:	f04f 0100 	mov.w	r1, #0
 8001438:	0159      	lsls	r1, r3, #5
 800143a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800143e:	0150      	lsls	r0, r2, #5
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4641      	mov	r1, r8
 8001446:	ebb2 0a01 	subs.w	sl, r2, r1
 800144a:	4649      	mov	r1, r9
 800144c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800145c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001460:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001464:	ebb2 040a 	subs.w	r4, r2, sl
 8001468:	eb63 050b 	sbc.w	r5, r3, fp
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	00eb      	lsls	r3, r5, #3
 8001476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800147a:	00e2      	lsls	r2, r4, #3
 800147c:	4614      	mov	r4, r2
 800147e:	461d      	mov	r5, r3
 8001480:	4643      	mov	r3, r8
 8001482:	18e3      	adds	r3, r4, r3
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	464b      	mov	r3, r9
 8001488:	eb45 0303 	adc.w	r3, r5, r3
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	e9d7 4500 	ldrd	r4, r5, [r7]
 800149a:	4629      	mov	r1, r5
 800149c:	028b      	lsls	r3, r1, #10
 800149e:	4621      	mov	r1, r4
 80014a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014a4:	4621      	mov	r1, r4
 80014a6:	028a      	lsls	r2, r1, #10
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ae:	2200      	movs	r2, #0
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	61fa      	str	r2, [r7, #28]
 80014b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014b8:	f7fe fe92 	bl	80001e0 <__aeabi_uldivmod>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4613      	mov	r3, r2
 80014c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	0c1b      	lsrs	r3, r3, #16
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	3301      	adds	r3, #1
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80014d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014de:	e002      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80014e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3750      	adds	r7, #80	; 0x50
 80014ec:	46bd      	mov	sp, r7
 80014ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	00f42400 	.word	0x00f42400
 80014fc:	007a1200 	.word	0x007a1200

08001500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_RCC_GetHCLKFreq+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000000 	.word	0x20000000

08001518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800151c:	f7ff fff0 	bl	8001500 <HAL_RCC_GetHCLKFreq>
 8001520:	4602      	mov	r2, r0
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	0b5b      	lsrs	r3, r3, #13
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	4903      	ldr	r1, [pc, #12]	; (800153c <HAL_RCC_GetPCLK2Freq+0x24>)
 800152e:	5ccb      	ldrb	r3, [r1, r3]
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	08004658 	.word	0x08004658

08001540 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	220f      	movs	r2, #15
 800154e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_RCC_GetClockConfig+0x5c>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_RCC_GetClockConfig+0x5c>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_RCC_GetClockConfig+0x5c>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_RCC_GetClockConfig+0x5c>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	08db      	lsrs	r3, r3, #3
 800157a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_RCC_GetClockConfig+0x60>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0207 	and.w	r2, r3, #7
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	601a      	str	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e041      	b.n	800163a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f839 	bl	8001642 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3304      	adds	r3, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4610      	mov	r0, r2
 80015e4:	f000 f9b2 	bl	800194c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d001      	beq.n	8001670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e044      	b.n	80016fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0201 	orr.w	r2, r2, #1
 8001686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_TIM_Base_Start_IT+0xb0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d018      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x6c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169a:	d013      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x6c>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1a      	ldr	r2, [pc, #104]	; (800170c <HAL_TIM_Base_Start_IT+0xb4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00e      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x6c>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a19      	ldr	r2, [pc, #100]	; (8001710 <HAL_TIM_Base_Start_IT+0xb8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d009      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x6c>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_TIM_Base_Start_IT+0xbc>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d004      	beq.n	80016c4 <HAL_TIM_Base_Start_IT+0x6c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_TIM_Base_Start_IT+0xc0>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d111      	bne.n	80016e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d010      	beq.n	80016f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0201 	orr.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016e6:	e007      	b.n	80016f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40010000 	.word	0x40010000
 800170c:	40000400 	.word	0x40000400
 8001710:	40000800 	.word	0x40000800
 8001714:	40000c00 	.word	0x40000c00
 8001718:	40014000 	.word	0x40014000

0800171c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d020      	beq.n	8001780 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d01b      	beq.n	8001780 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f06f 0202 	mvn.w	r2, #2
 8001750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f8d2 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
 800176c:	e005      	b.n	800177a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f8c4 	bl	80018fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f8d5 	bl	8001924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	d020      	beq.n	80017cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d01b      	beq.n	80017cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f06f 0204 	mvn.w	r2, #4
 800179c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2202      	movs	r2, #2
 80017a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f8ac 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
 80017b8:	e005      	b.n	80017c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f89e 	bl	80018fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f8af 	bl	8001924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d020      	beq.n	8001818 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01b      	beq.n	8001818 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f06f 0208 	mvn.w	r2, #8
 80017e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2204      	movs	r2, #4
 80017ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f886 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
 8001804:	e005      	b.n	8001812 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f878 	bl	80018fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f889 	bl	8001924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	2b00      	cmp	r3, #0
 8001820:	d020      	beq.n	8001864 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01b      	beq.n	8001864 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f06f 0210 	mvn.w	r2, #16
 8001834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2208      	movs	r2, #8
 800183a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f860 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
 8001850:	e005      	b.n	800185e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f852 	bl	80018fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f863 	bl	8001924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00c      	beq.n	8001888 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f06f 0201 	mvn.w	r2, #1
 8001880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7fe ff10 	bl	80006a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00c      	beq.n	80018ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f8e6 	bl	8001a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00c      	beq.n	80018d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f834 	bl	8001938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f003 0320 	and.w	r3, r3, #32
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00c      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f003 0320 	and.w	r3, r3, #32
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d007      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0220 	mvn.w	r2, #32
 80018ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f8b8 	bl	8001a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3a      	ldr	r2, [pc, #232]	; (8001a48 <TIM_Base_SetConfig+0xfc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00f      	beq.n	8001984 <TIM_Base_SetConfig+0x38>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196a:	d00b      	beq.n	8001984 <TIM_Base_SetConfig+0x38>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a37      	ldr	r2, [pc, #220]	; (8001a4c <TIM_Base_SetConfig+0x100>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <TIM_Base_SetConfig+0x38>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a36      	ldr	r2, [pc, #216]	; (8001a50 <TIM_Base_SetConfig+0x104>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d003      	beq.n	8001984 <TIM_Base_SetConfig+0x38>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a35      	ldr	r2, [pc, #212]	; (8001a54 <TIM_Base_SetConfig+0x108>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d108      	bne.n	8001996 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a2b      	ldr	r2, [pc, #172]	; (8001a48 <TIM_Base_SetConfig+0xfc>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01b      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a4:	d017      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <TIM_Base_SetConfig+0x100>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <TIM_Base_SetConfig+0x104>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00f      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <TIM_Base_SetConfig+0x108>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00b      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a25      	ldr	r2, [pc, #148]	; (8001a58 <TIM_Base_SetConfig+0x10c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <TIM_Base_SetConfig+0x110>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d003      	beq.n	80019d6 <TIM_Base_SetConfig+0x8a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <TIM_Base_SetConfig+0x114>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d108      	bne.n	80019e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <TIM_Base_SetConfig+0xfc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d103      	bne.n	8001a1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	f023 0201 	bic.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40000800 	.word	0x40000800
 8001a54:	40000c00 	.word	0x40000c00
 8001a58:	40014000 	.word	0x40014000
 8001a5c:	40014400 	.word	0x40014400
 8001a60:	40014800 	.word	0x40014800

08001a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f103 0208 	add.w	r2, r3, #8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f103 0208 	add.w	r2, r3, #8
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f103 0208 	add.w	r2, r3, #8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d103      	bne.n	8001b06 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e00c      	b.n	8001b20 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3308      	adds	r3, #8
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e002      	b.n	8001b14 <vListInsert+0x2e>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d2f6      	bcs.n	8001b0e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6892      	ldr	r2, [r2, #8]
 8001b6e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6852      	ldr	r2, [r2, #4]
 8001b78:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d103      	bne.n	8001b8c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	1e5a      	subs	r2, r3, #1
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10a      	bne.n	8001bda <xQueueGenericReset+0x2e>
        __asm volatile
 8001bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc8:	f383 8811 	msr	BASEPRI, r3
 8001bcc:	f3bf 8f6f 	isb	sy
 8001bd0:	f3bf 8f4f 	dsb	sy
 8001bd4:	60fb      	str	r3, [r7, #12]
    }
 8001bd6:	bf00      	nop
 8001bd8:	e7fe      	b.n	8001bd8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d052      	beq.n	8001c86 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d04e      	beq.n	8001c86 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d000      	beq.n	8001bfc <xQueueGenericReset+0x50>
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d141      	bne.n	8001c86 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8001c02:	f001 fd79 	bl	80036f8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0e:	6939      	ldr	r1, [r7, #16]
 8001c10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	441a      	add	r2, r3
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6939      	ldr	r1, [r7, #16]
 8001c36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	441a      	add	r2, r3
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	22ff      	movs	r2, #255	; 0xff
 8001c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	22ff      	movs	r2, #255	; 0xff
 8001c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00f      	beq.n	8001c80 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3310      	adds	r3, #16
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 feed 	bl	8002a44 <xTaskRemoveFromEventList>
 8001c6a:	e009      	b.n	8001c80 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	3310      	adds	r3, #16
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff0b 	bl	8001a8c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	3324      	adds	r3, #36	; 0x24
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff06 	bl	8001a8c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001c80:	f001 fd6a 	bl	8003758 <vPortExitCritical>
 8001c84:	e001      	b.n	8001c8a <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10a      	bne.n	8001ca6 <xQueueGenericReset+0xfa>
        __asm volatile
 8001c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c94:	f383 8811 	msr	BASEPRI, r3
 8001c98:	f3bf 8f6f 	isb	sy
 8001c9c:	f3bf 8f4f 	dsb	sy
 8001ca0:	60bb      	str	r3, [r7, #8]
    }
 8001ca2:	bf00      	nop
 8001ca4:	e7fe      	b.n	8001ca4 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001ca6:	697b      	ldr	r3, [r7, #20]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08a      	sub	sp, #40	; 0x28
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d02e      	beq.n	8001d26 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001cc8:	2100      	movs	r1, #0
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d000      	beq.n	8001cd8 <xQueueGenericCreate+0x28>
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d123      	bne.n	8001d26 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001ce6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001cea:	d81c      	bhi.n	8001d26 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
 8001cf4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	3350      	adds	r3, #80	; 0x50
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f001 fdde 	bl	80038bc <pvPortMalloc>
 8001d00:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01c      	beq.n	8001d42 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3350      	adds	r3, #80	; 0x50
 8001d10:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d12:	79fa      	ldrb	r2, [r7, #7]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f814 	bl	8001d4c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001d24:	e00d      	b.n	8001d42 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10a      	bne.n	8001d42 <xQueueGenericCreate+0x92>
        __asm volatile
 8001d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d30:	f383 8811 	msr	BASEPRI, r3
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	613b      	str	r3, [r7, #16]
    }
 8001d3e:	bf00      	nop
 8001d40:	e7fe      	b.n	8001d40 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001d42:	69fb      	ldr	r3, [r7, #28]
    }
 8001d44:	4618      	mov	r0, r3
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e002      	b.n	8001d6e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	69b8      	ldr	r0, [r7, #24]
 8001d7e:	f7ff ff15 	bl	8001bac <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	; 0x30
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10a      	bne.n	8001dc4 <xQueueReceive+0x30>
        __asm volatile
 8001dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db2:	f383 8811 	msr	BASEPRI, r3
 8001db6:	f3bf 8f6f 	isb	sy
 8001dba:	f3bf 8f4f 	dsb	sy
 8001dbe:	623b      	str	r3, [r7, #32]
    }
 8001dc0:	bf00      	nop
 8001dc2:	e7fe      	b.n	8001dc2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <xQueueReceive+0x3e>
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <xQueueReceive+0x42>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <xQueueReceive+0x44>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10a      	bne.n	8001df2 <xQueueReceive+0x5e>
        __asm volatile
 8001ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de0:	f383 8811 	msr	BASEPRI, r3
 8001de4:	f3bf 8f6f 	isb	sy
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	61fb      	str	r3, [r7, #28]
    }
 8001dee:	bf00      	nop
 8001df0:	e7fe      	b.n	8001df0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001df2:	f001 f831 	bl	8002e58 <xTaskGetSchedulerState>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <xQueueReceive+0x6e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <xQueueReceive+0x72>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <xQueueReceive+0x74>
 8001e06:	2300      	movs	r3, #0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10a      	bne.n	8001e22 <xQueueReceive+0x8e>
        __asm volatile
 8001e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e10:	f383 8811 	msr	BASEPRI, r3
 8001e14:	f3bf 8f6f 	isb	sy
 8001e18:	f3bf 8f4f 	dsb	sy
 8001e1c:	61bb      	str	r3, [r7, #24]
    }
 8001e1e:	bf00      	nop
 8001e20:	e7fe      	b.n	8001e20 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001e22:	f001 fc69 	bl	80036f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d014      	beq.n	8001e5c <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e36:	f000 f881 	bl	8001f3c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	1e5a      	subs	r2, r3, #1
 8001e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e40:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	3310      	adds	r3, #16
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fdf8 	bl	8002a44 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001e54:	f001 fc80 	bl	8003758 <vPortExitCritical>
                return pdPASS;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e069      	b.n	8001f30 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001e62:	f001 fc79 	bl	8003758 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e062      	b.n	8001f30 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d106      	bne.n	8001e7e <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 febb 	bl	8002bf0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001e7e:	f001 fc6b 	bl	8003758 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001e82:	f000 fb19 	bl	80024b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001e86:	f001 fc37 	bl	80036f8 <vPortEnterCritical>
 8001e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e90:	b25b      	sxtb	r3, r3
 8001e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e96:	d103      	bne.n	8001ea0 <xQueueReceive+0x10c>
 8001e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ea6:	b25b      	sxtb	r3, r3
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d103      	bne.n	8001eb6 <xQueueReceive+0x122>
 8001eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001eb6:	f001 fc4f 	bl	8003758 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001eba:	1d3a      	adds	r2, r7, #4
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 feaa 	bl	8002c1c <xTaskCheckForTimeOut>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d123      	bne.n	8001f16 <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ed0:	f000 f8ac 	bl	800202c <prvIsQueueEmpty>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d017      	beq.n	8001f0a <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001edc:	3324      	adds	r3, #36	; 0x24
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fd44 	bl	8002970 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eea:	f000 f84d 	bl	8001f88 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001eee:	f000 faf1 	bl	80024d4 <xTaskResumeAll>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d194      	bne.n	8001e22 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <xQueueReceive+0x1a4>)
 8001efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	f3bf 8f6f 	isb	sy
 8001f08:	e78b      	b.n	8001e22 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f0c:	f000 f83c 	bl	8001f88 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001f10:	f000 fae0 	bl	80024d4 <xTaskResumeAll>
 8001f14:	e785      	b.n	8001e22 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f18:	f000 f836 	bl	8001f88 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001f1c:	f000 fada 	bl	80024d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f22:	f000 f883 	bl	800202c <prvIsQueueEmpty>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f43f af7a 	beq.w	8001e22 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001f2e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3730      	adds	r7, #48	; 0x30
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d018      	beq.n	8001f80 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	441a      	add	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d303      	bcc.n	8001f70 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68d9      	ldr	r1, [r3, #12]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6838      	ldr	r0, [r7, #0]
 8001f7c:	f002 f8d5 	bl	800412a <memcpy>
    }
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001f90:	f001 fbb2 	bl	80036f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f9a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f9c:	e011      	b.n	8001fc2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d012      	beq.n	8001fcc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3324      	adds	r3, #36	; 0x24
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fd4a 	bl	8002a44 <xTaskRemoveFromEventList>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001fb6:	f000 fe97 	bl	8002ce8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	dce9      	bgt.n	8001f9e <prvUnlockQueue+0x16>
 8001fca:	e000      	b.n	8001fce <prvUnlockQueue+0x46>
                    break;
 8001fcc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	22ff      	movs	r2, #255	; 0xff
 8001fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001fd6:	f001 fbbf 	bl	8003758 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001fda:	f001 fb8d 	bl	80036f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fe4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001fe6:	e011      	b.n	800200c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d012      	beq.n	8002016 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3310      	adds	r3, #16
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fd25 	bl	8002a44 <xTaskRemoveFromEventList>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002000:	f000 fe72 	bl	8002ce8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002004:	7bbb      	ldrb	r3, [r7, #14]
 8002006:	3b01      	subs	r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800200c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002010:	2b00      	cmp	r3, #0
 8002012:	dce9      	bgt.n	8001fe8 <prvUnlockQueue+0x60>
 8002014:	e000      	b.n	8002018 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002016:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002020:	f001 fb9a 	bl	8003758 <vPortExitCritical>
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002034:	f001 fb60 	bl	80036f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002040:	2301      	movs	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e001      	b.n	800204a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800204a:	f001 fb85 	bl	8003758 <vPortExitCritical>

    return xReturn;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800206c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002070:	f383 8811 	msr	BASEPRI, r3
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	60fb      	str	r3, [r7, #12]
    }
 800207e:	bf00      	nop
 8002080:	e7fe      	b.n	8002080 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d024      	beq.n	80020d2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	e01e      	b.n	80020cc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <vQueueAddToRegistry+0x98>)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	429a      	cmp	r2, r3
 800209c:	d105      	bne.n	80020aa <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <vQueueAddToRegistry+0x98>)
 80020a4:	4413      	add	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
                    break;
 80020a8:	e013      	b.n	80020d2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10a      	bne.n	80020c6 <vQueueAddToRegistry+0x6e>
 80020b0:	4a0f      	ldr	r2, [pc, #60]	; (80020f0 <vQueueAddToRegistry+0x98>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d104      	bne.n	80020c6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <vQueueAddToRegistry+0x98>)
 80020c2:	4413      	add	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b07      	cmp	r3, #7
 80020d0:	d9dd      	bls.n	800208e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80020e4:	bf00      	nop
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	200000d8 	.word	0x200000d8

080020f4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002104:	f001 faf8 	bl	80036f8 <vPortEnterCritical>
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800210e:	b25b      	sxtb	r3, r3
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d103      	bne.n	800211e <vQueueWaitForMessageRestricted+0x2a>
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002124:	b25b      	sxtb	r3, r3
 8002126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212a:	d103      	bne.n	8002134 <vQueueWaitForMessageRestricted+0x40>
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002134:	f001 fb10 	bl	8003758 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	2b00      	cmp	r3, #0
 800213e:	d106      	bne.n	800214e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3324      	adds	r3, #36	; 0x24
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68b9      	ldr	r1, [r7, #8]
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fc35 	bl	80029b8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff ff1a 	bl	8001f88 <prvUnlockQueue>
    }
 8002154:	bf00      	nop
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af04      	add	r7, sp, #16
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4618      	mov	r0, r3
 8002172:	f001 fba3 	bl	80038bc <pvPortMalloc>
 8002176:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d013      	beq.n	80021a6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800217e:	2058      	movs	r0, #88	; 0x58
 8002180:	f001 fb9c 	bl	80038bc <pvPortMalloc>
 8002184:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800218c:	2258      	movs	r2, #88	; 0x58
 800218e:	2100      	movs	r1, #0
 8002190:	69f8      	ldr	r0, [r7, #28]
 8002192:	f001 ff55 	bl	8004040 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
 800219c:	e005      	b.n	80021aa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f001 fc46 	bl	8003a30 <vPortFree>
 80021a4:	e001      	b.n	80021aa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021b0:	88fa      	ldrh	r2, [r7, #6]
 80021b2:	2300      	movs	r3, #0
 80021b4:	9303      	str	r3, [sp, #12]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f80e 	bl	80021e8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021cc:	69f8      	ldr	r0, [r7, #28]
 80021ce:	f000 f899 	bl	8002304 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021d2:	2301      	movs	r3, #1
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	e002      	b.n	80021de <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295
 80021dc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80021de:	69bb      	ldr	r3, [r7, #24]
    }
 80021e0:	4618      	mov	r0, r3
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	461a      	mov	r2, r3
 8002200:	21a5      	movs	r1, #165	; 0xa5
 8002202:	f001 ff1d 	bl	8004040 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002210:	3b01      	subs	r3, #1
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f023 0307 	bic.w	r3, r3, #7
 800221e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <prvInitialiseNewTask+0x58>
        __asm volatile
 800222a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800222e:	f383 8811 	msr	BASEPRI, r3
 8002232:	f3bf 8f6f 	isb	sy
 8002236:	f3bf 8f4f 	dsb	sy
 800223a:	617b      	str	r3, [r7, #20]
    }
 800223c:	bf00      	nop
 800223e:	e7fe      	b.n	800223e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01e      	beq.n	8002284 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e012      	b.n	8002272 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4413      	add	r3, r2
 8002252:	7819      	ldrb	r1, [r3, #0]
 8002254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	4413      	add	r3, r2
 800225a:	3334      	adds	r3, #52	; 0x34
 800225c:	460a      	mov	r2, r1
 800225e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	4413      	add	r3, r2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	3301      	adds	r3, #1
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	2b09      	cmp	r3, #9
 8002276:	d9e9      	bls.n	800224c <prvInitialiseNewTask+0x64>
 8002278:	e000      	b.n	800227c <prvInitialiseNewTask+0x94>
            {
                break;
 800227a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002286:	2b04      	cmp	r3, #4
 8002288:	d90a      	bls.n	80022a0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800228a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	613b      	str	r3, [r7, #16]
    }
 800229c:	bf00      	nop
 800229e:	e7fe      	b.n	800229e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d901      	bls.n	80022aa <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022a6:	2304      	movs	r3, #4
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	3304      	adds	r3, #4
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fc06 	bl	8001acc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c2:	3318      	adds	r3, #24
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fc01 	bl	8001acc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ce:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	f1c3 0205 	rsb	r2, r3, #5
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	68f9      	ldr	r1, [r7, #12]
 80022e4:	69b8      	ldr	r0, [r7, #24]
 80022e6:	f001 f8d9 	bl	800349c <pxPortInitialiseStack>
 80022ea:	4602      	mov	r2, r0
 80022ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ee:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022fa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022fc:	bf00      	nop
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800230c:	f001 f9f4 	bl	80036f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002310:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <prvAddNewTaskToReadyList+0xf8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	4a39      	ldr	r2, [pc, #228]	; (80023fc <prvAddNewTaskToReadyList+0xf8>)
 8002318:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800231a:	4b39      	ldr	r3, [pc, #228]	; (8002400 <prvAddNewTaskToReadyList+0xfc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002322:	4a37      	ldr	r2, [pc, #220]	; (8002400 <prvAddNewTaskToReadyList+0xfc>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002328:	4b34      	ldr	r3, [pc, #208]	; (80023fc <prvAddNewTaskToReadyList+0xf8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d110      	bne.n	8002352 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002330:	f000 fcf8 	bl	8002d24 <prvInitialiseTaskLists>
 8002334:	e00d      	b.n	8002352 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002336:	4b33      	ldr	r3, [pc, #204]	; (8002404 <prvAddNewTaskToReadyList+0x100>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800233e:	4b30      	ldr	r3, [pc, #192]	; (8002400 <prvAddNewTaskToReadyList+0xfc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	429a      	cmp	r2, r3
 800234a:	d802      	bhi.n	8002352 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800234c:	4a2c      	ldr	r2, [pc, #176]	; (8002400 <prvAddNewTaskToReadyList+0xfc>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002352:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <prvAddNewTaskToReadyList+0x104>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	4a2b      	ldr	r2, [pc, #172]	; (8002408 <prvAddNewTaskToReadyList+0x104>)
 800235a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <prvAddNewTaskToReadyList+0x104>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	2201      	movs	r2, #1
 800236a:	409a      	lsls	r2, r3
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <prvAddNewTaskToReadyList+0x108>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4313      	orrs	r3, r2
 8002372:	4a26      	ldr	r2, [pc, #152]	; (800240c <prvAddNewTaskToReadyList+0x108>)
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237a:	4925      	ldr	r1, [pc, #148]	; (8002410 <prvAddNewTaskToReadyList+0x10c>)
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	3304      	adds	r3, #4
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	3204      	adds	r2, #4
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	1d1a      	adds	r2, r3, #4
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4a15      	ldr	r2, [pc, #84]	; (8002410 <prvAddNewTaskToReadyList+0x10c>)
 80023ba:	441a      	add	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	615a      	str	r2, [r3, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c4:	4912      	ldr	r1, [pc, #72]	; (8002410 <prvAddNewTaskToReadyList+0x10c>)
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	1c59      	adds	r1, r3, #1
 80023d4:	480e      	ldr	r0, [pc, #56]	; (8002410 <prvAddNewTaskToReadyList+0x10c>)
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4403      	add	r3, r0
 80023e0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023e2:	f001 f9b9 	bl	8003758 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <prvAddNewTaskToReadyList+0x100>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <prvAddNewTaskToReadyList+0xfc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200001f0 	.word	0x200001f0
 8002400:	20000118 	.word	0x20000118
 8002404:	200001fc 	.word	0x200001fc
 8002408:	2000020c 	.word	0x2000020c
 800240c:	200001f8 	.word	0x200001f8
 8002410:	2000011c 	.word	0x2000011c

08002414 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <vTaskStartScheduler+0x88>)
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	2300      	movs	r3, #0
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2300      	movs	r3, #0
 8002424:	2282      	movs	r2, #130	; 0x82
 8002426:	491e      	ldr	r1, [pc, #120]	; (80024a0 <vTaskStartScheduler+0x8c>)
 8002428:	481e      	ldr	r0, [pc, #120]	; (80024a4 <vTaskStartScheduler+0x90>)
 800242a:	f7ff fe97 	bl	800215c <xTaskCreate>
 800242e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d102      	bne.n	800243c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002436:	f000 fdad 	bl	8002f94 <xTimerCreateTimerTask>
 800243a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d116      	bne.n	8002470 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002446:	f383 8811 	msr	BASEPRI, r3
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	60bb      	str	r3, [r7, #8]
    }
 8002454:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <vTaskStartScheduler+0x94>)
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <vTaskStartScheduler+0x98>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <vTaskStartScheduler+0x9c>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800246a:	f001 f8a3 	bl	80035b4 <xPortStartScheduler>
 800246e:	e00e      	b.n	800248e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002476:	d10a      	bne.n	800248e <vTaskStartScheduler+0x7a>
        __asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	607b      	str	r3, [r7, #4]
    }
 800248a:	bf00      	nop
 800248c:	e7fe      	b.n	800248c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <vTaskStartScheduler+0xa0>)
 8002490:	681b      	ldr	r3, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000214 	.word	0x20000214
 80024a0:	08004630 	.word	0x08004630
 80024a4:	08002d01 	.word	0x08002d01
 80024a8:	20000210 	.word	0x20000210
 80024ac:	200001fc 	.word	0x200001fc
 80024b0:	200001f4 	.word	0x200001f4
 80024b4:	2000000c 	.word	0x2000000c

080024b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <vTaskSuspendAll+0x18>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3301      	adds	r3, #1
 80024c2:	4a03      	ldr	r2, [pc, #12]	; (80024d0 <vTaskSuspendAll+0x18>)
 80024c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	20000218 	.word	0x20000218

080024d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80024e2:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <xTaskResumeAll+0x1bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10a      	bne.n	8002500 <xTaskResumeAll+0x2c>
        __asm volatile
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	607b      	str	r3, [r7, #4]
    }
 80024fc:	bf00      	nop
 80024fe:	e7fe      	b.n	80024fe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002500:	f001 f8fa 	bl	80036f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002504:	4b62      	ldr	r3, [pc, #392]	; (8002690 <xTaskResumeAll+0x1bc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3b01      	subs	r3, #1
 800250a:	4a61      	ldr	r2, [pc, #388]	; (8002690 <xTaskResumeAll+0x1bc>)
 800250c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800250e:	4b60      	ldr	r3, [pc, #384]	; (8002690 <xTaskResumeAll+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 80b4 	bne.w	8002680 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002518:	4b5e      	ldr	r3, [pc, #376]	; (8002694 <xTaskResumeAll+0x1c0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80af 	beq.w	8002680 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002522:	e08a      	b.n	800263a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002524:	4b5c      	ldr	r3, [pc, #368]	; (8002698 <xTaskResumeAll+0x1c4>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	69fa      	ldr	r2, [r7, #28]
 8002538:	6a12      	ldr	r2, [r2, #32]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	69d2      	ldr	r2, [r2, #28]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3318      	adds	r3, #24
 800254e:	429a      	cmp	r2, r3
 8002550:	d103      	bne.n	800255a <xTaskResumeAll+0x86>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	6a1a      	ldr	r2, [r3, #32]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2200      	movs	r2, #0
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	68d2      	ldr	r2, [r2, #12]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	6892      	ldr	r2, [r2, #8]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3304      	adds	r3, #4
 800258c:	429a      	cmp	r2, r3
 800258e:	d103      	bne.n	8002598 <xTaskResumeAll+0xc4>
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2200      	movs	r2, #0
 800259c:	615a      	str	r2, [r3, #20]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	1e5a      	subs	r2, r3, #1
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	2201      	movs	r2, #1
 80025ae:	409a      	lsls	r2, r3
 80025b0:	4b3a      	ldr	r3, [pc, #232]	; (800269c <xTaskResumeAll+0x1c8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	4a39      	ldr	r2, [pc, #228]	; (800269c <xTaskResumeAll+0x1c8>)
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025be:	4938      	ldr	r1, [pc, #224]	; (80026a0 <xTaskResumeAll+0x1cc>)
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	3304      	adds	r3, #4
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	3204      	adds	r2, #4
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	1d1a      	adds	r2, r3, #4
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4a28      	ldr	r2, [pc, #160]	; (80026a0 <xTaskResumeAll+0x1cc>)
 80025fe:	441a      	add	r2, r3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	615a      	str	r2, [r3, #20]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002608:	4925      	ldr	r1, [pc, #148]	; (80026a0 <xTaskResumeAll+0x1cc>)
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1c59      	adds	r1, r3, #1
 8002618:	4821      	ldr	r0, [pc, #132]	; (80026a0 <xTaskResumeAll+0x1cc>)
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4403      	add	r3, r0
 8002624:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262a:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <xTaskResumeAll+0x1d0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	429a      	cmp	r2, r3
 8002632:	d302      	bcc.n	800263a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002634:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <xTaskResumeAll+0x1d4>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <xTaskResumeAll+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f47f af70 	bne.w	8002524 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800264a:	f000 fbe9 	bl	8002e20 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <xTaskResumeAll+0x1d8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d010      	beq.n	800267c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800265a:	f000 f839 	bl	80026d0 <xTaskIncrementTick>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <xTaskResumeAll+0x1d4>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	3b01      	subs	r3, #1
 800266e:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f1      	bne.n	800265a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <xTaskResumeAll+0x1d8>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <xTaskResumeAll+0x1d4>)
 800267e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002680:	f001 f86a 	bl	8003758 <vPortExitCritical>

    return xAlreadyYielded;
 8002684:	697b      	ldr	r3, [r7, #20]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000218 	.word	0x20000218
 8002694:	200001f0 	.word	0x200001f0
 8002698:	200001b0 	.word	0x200001b0
 800269c:	200001f8 	.word	0x200001f8
 80026a0:	2000011c 	.word	0x2000011c
 80026a4:	20000118 	.word	0x20000118
 80026a8:	20000204 	.word	0x20000204
 80026ac:	20000200 	.word	0x20000200

080026b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <xTaskGetTickCount+0x1c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	200001f4 	.word	0x200001f4

080026d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026da:	4b6e      	ldr	r3, [pc, #440]	; (8002894 <xTaskIncrementTick+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 80cd 	bne.w	800287e <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026e4:	4b6c      	ldr	r3, [pc, #432]	; (8002898 <xTaskIncrementTick+0x1c8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80026ec:	4a6a      	ldr	r2, [pc, #424]	; (8002898 <xTaskIncrementTick+0x1c8>)
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d120      	bne.n	800273a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80026f8:	4b68      	ldr	r3, [pc, #416]	; (800289c <xTaskIncrementTick+0x1cc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <xTaskIncrementTick+0x48>
        __asm volatile
 8002702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	607b      	str	r3, [r7, #4]
    }
 8002714:	bf00      	nop
 8002716:	e7fe      	b.n	8002716 <xTaskIncrementTick+0x46>
 8002718:	4b60      	ldr	r3, [pc, #384]	; (800289c <xTaskIncrementTick+0x1cc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	4b60      	ldr	r3, [pc, #384]	; (80028a0 <xTaskIncrementTick+0x1d0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a5e      	ldr	r2, [pc, #376]	; (800289c <xTaskIncrementTick+0x1cc>)
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4a5e      	ldr	r2, [pc, #376]	; (80028a0 <xTaskIncrementTick+0x1d0>)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <xTaskIncrementTick+0x1d4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	4a5c      	ldr	r2, [pc, #368]	; (80028a4 <xTaskIncrementTick+0x1d4>)
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	f000 fb73 	bl	8002e20 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800273a:	4b5b      	ldr	r3, [pc, #364]	; (80028a8 <xTaskIncrementTick+0x1d8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6a3a      	ldr	r2, [r7, #32]
 8002740:	429a      	cmp	r2, r3
 8002742:	f0c0 80a1 	bcc.w	8002888 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002746:	4b55      	ldr	r3, [pc, #340]	; (800289c <xTaskIncrementTick+0x1cc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002750:	4b55      	ldr	r3, [pc, #340]	; (80028a8 <xTaskIncrementTick+0x1d8>)
 8002752:	f04f 32ff 	mov.w	r2, #4294967295
 8002756:	601a      	str	r2, [r3, #0]
                    break;
 8002758:	e096      	b.n	8002888 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800275a:	4b50      	ldr	r3, [pc, #320]	; (800289c <xTaskIncrementTick+0x1cc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800276a:	6a3a      	ldr	r2, [r7, #32]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	429a      	cmp	r2, r3
 8002770:	d203      	bcs.n	800277a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002772:	4a4d      	ldr	r2, [pc, #308]	; (80028a8 <xTaskIncrementTick+0x1d8>)
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002778:	e086      	b.n	8002888 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	68d2      	ldr	r2, [r2, #12]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	6892      	ldr	r2, [r2, #8]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	3304      	adds	r3, #4
 800279c:	429a      	cmp	r2, r3
 800279e:	d103      	bne.n	80027a8 <xTaskIncrementTick+0xd8>
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2200      	movs	r2, #0
 80027ac:	615a      	str	r2, [r3, #20]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01e      	beq.n	80027fe <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	6a12      	ldr	r2, [r2, #32]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	69d2      	ldr	r2, [r2, #28]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	3318      	adds	r3, #24
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d103      	bne.n	80027ee <xTaskIncrementTick+0x11e>
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	6a1a      	ldr	r2, [r3, #32]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	2200      	movs	r2, #0
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1e5a      	subs	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	2201      	movs	r2, #1
 8002804:	409a      	lsls	r2, r3
 8002806:	4b29      	ldr	r3, [pc, #164]	; (80028ac <xTaskIncrementTick+0x1dc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4313      	orrs	r3, r2
 800280c:	4a27      	ldr	r2, [pc, #156]	; (80028ac <xTaskIncrementTick+0x1dc>)
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002814:	4926      	ldr	r1, [pc, #152]	; (80028b0 <xTaskIncrementTick+0x1e0>)
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3304      	adds	r3, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	3204      	adds	r2, #4
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	1d1a      	adds	r2, r3, #4
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <xTaskIncrementTick+0x1e0>)
 8002854:	441a      	add	r2, r3
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	615a      	str	r2, [r3, #20]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800285e:	4914      	ldr	r1, [pc, #80]	; (80028b0 <xTaskIncrementTick+0x1e0>)
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	1c59      	adds	r1, r3, #1
 800286e:	4810      	ldr	r0, [pc, #64]	; (80028b0 <xTaskIncrementTick+0x1e0>)
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4403      	add	r3, r0
 800287a:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800287c:	e763      	b.n	8002746 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <xTaskIncrementTick+0x1e4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3301      	adds	r3, #1
 8002884:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <xTaskIncrementTick+0x1e4>)
 8002886:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800288a:	4618      	mov	r0, r3
 800288c:	3728      	adds	r7, #40	; 0x28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000218 	.word	0x20000218
 8002898:	200001f4 	.word	0x200001f4
 800289c:	200001a8 	.word	0x200001a8
 80028a0:	200001ac 	.word	0x200001ac
 80028a4:	20000208 	.word	0x20000208
 80028a8:	20000210 	.word	0x20000210
 80028ac:	200001f8 	.word	0x200001f8
 80028b0:	2000011c 	.word	0x2000011c
 80028b4:	20000200 	.word	0x20000200

080028b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028be:	4b27      	ldr	r3, [pc, #156]	; (800295c <vTaskSwitchContext+0xa4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80028c6:	4b26      	ldr	r3, [pc, #152]	; (8002960 <vTaskSwitchContext+0xa8>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80028cc:	e03f      	b.n	800294e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <vTaskSwitchContext+0xa8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028d4:	4b23      	ldr	r3, [pc, #140]	; (8002964 <vTaskSwitchContext+0xac>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80028e2:	7afb      	ldrb	r3, [r7, #11]
 80028e4:	f1c3 031f 	rsb	r3, r3, #31
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	491f      	ldr	r1, [pc, #124]	; (8002968 <vTaskSwitchContext+0xb0>)
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10a      	bne.n	8002914 <vTaskSwitchContext+0x5c>
        __asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	607b      	str	r3, [r7, #4]
    }
 8002910:	bf00      	nop
 8002912:	e7fe      	b.n	8002912 <vTaskSwitchContext+0x5a>
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4a12      	ldr	r2, [pc, #72]	; (8002968 <vTaskSwitchContext+0xb0>)
 8002920:	4413      	add	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	3308      	adds	r3, #8
 8002936:	429a      	cmp	r2, r3
 8002938:	d104      	bne.n	8002944 <vTaskSwitchContext+0x8c>
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	4a08      	ldr	r2, [pc, #32]	; (800296c <vTaskSwitchContext+0xb4>)
 800294c:	6013      	str	r3, [r2, #0]
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000218 	.word	0x20000218
 8002960:	20000204 	.word	0x20000204
 8002964:	200001f8 	.word	0x200001f8
 8002968:	2000011c 	.word	0x2000011c
 800296c:	20000118 	.word	0x20000118

08002970 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	60fb      	str	r3, [r7, #12]
    }
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <vTaskPlaceOnEventList+0x44>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3318      	adds	r3, #24
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff f8a1 	bl	8001ae6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80029a4:	2101      	movs	r1, #1
 80029a6:	6838      	ldr	r0, [r7, #0]
 80029a8:	f000 fa74 	bl	8002e94 <prvAddCurrentTaskToDelayedList>
}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	20000118 	.word	0x20000118

080029b8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10a      	bne.n	80029e0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80029ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	613b      	str	r3, [r7, #16]
    }
 80029dc:	bf00      	nop
 80029de:	e7fe      	b.n	80029de <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <vTaskPlaceOnEventListRestricted+0x88>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	61da      	str	r2, [r3, #28]
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <vTaskPlaceOnEventListRestricted+0x88>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	6892      	ldr	r2, [r2, #8]
 80029f6:	621a      	str	r2, [r3, #32]
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <vTaskPlaceOnEventListRestricted+0x88>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	3218      	adds	r2, #24
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <vTaskPlaceOnEventListRestricted+0x88>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f103 0218 	add.w	r2, r3, #24
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <vTaskPlaceOnEventListRestricted+0x88>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002a28:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	68b8      	ldr	r0, [r7, #8]
 8002a32:	f000 fa2f 	bl	8002e94 <prvAddCurrentTaskToDelayedList>
    }
 8002a36:	bf00      	nop
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000118 	.word	0x20000118

08002a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a44:	b480      	push	{r7}
 8002a46:	b08b      	sub	sp, #44	; 0x2c
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10a      	bne.n	8002a70 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	60fb      	str	r3, [r7, #12]
    }
 8002a6c:	bf00      	nop
 8002a6e:	e7fe      	b.n	8002a6e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	6a3a      	ldr	r2, [r7, #32]
 8002a7c:	6a12      	ldr	r2, [r2, #32]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	6a3a      	ldr	r2, [r7, #32]
 8002a86:	69d2      	ldr	r2, [r2, #28]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	3318      	adds	r3, #24
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d103      	bne.n	8002a9e <xTaskRemoveFromEventList+0x5a>
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	6a1a      	ldr	r2, [r3, #32]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1e5a      	subs	r2, r3, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aae:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <xTaskRemoveFromEventList+0x194>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d15e      	bne.n	8002b74 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	6a3a      	ldr	r2, [r7, #32]
 8002ac2:	68d2      	ldr	r2, [r2, #12]
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	6a3a      	ldr	r2, [r7, #32]
 8002acc:	6892      	ldr	r2, [r2, #8]
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d103      	bne.n	8002ae4 <xTaskRemoveFromEventList+0xa0>
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	1e5a      	subs	r2, r3, #1
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	2201      	movs	r2, #1
 8002afa:	409a      	lsls	r2, r3
 8002afc:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <xTaskRemoveFromEventList+0x198>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	4a36      	ldr	r2, [pc, #216]	; (8002bdc <xTaskRemoveFromEventList+0x198>)
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0a:	4935      	ldr	r1, [pc, #212]	; (8002be0 <xTaskRemoveFromEventList+0x19c>)
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	3304      	adds	r3, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	6a3a      	ldr	r2, [r7, #32]
 8002b30:	3204      	adds	r2, #4
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	1d1a      	adds	r2, r3, #4
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <xTaskRemoveFromEventList+0x19c>)
 8002b4a:	441a      	add	r2, r3
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	615a      	str	r2, [r3, #20]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b54:	4922      	ldr	r1, [pc, #136]	; (8002be0 <xTaskRemoveFromEventList+0x19c>)
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	1c59      	adds	r1, r3, #1
 8002b64:	481e      	ldr	r0, [pc, #120]	; (8002be0 <xTaskRemoveFromEventList+0x19c>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4403      	add	r3, r0
 8002b70:	6019      	str	r1, [r3, #0]
 8002b72:	e01b      	b.n	8002bac <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <xTaskRemoveFromEventList+0x1a0>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	61da      	str	r2, [r3, #28]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	621a      	str	r2, [r3, #32]
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	3218      	adds	r2, #24
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	f103 0218 	add.w	r2, r3, #24
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	4a11      	ldr	r2, [pc, #68]	; (8002be4 <xTaskRemoveFromEventList+0x1a0>)
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <xTaskRemoveFromEventList+0x1a0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <xTaskRemoveFromEventList+0x1a0>)
 8002baa:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <xTaskRemoveFromEventList+0x1a4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d905      	bls.n	8002bc6 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <xTaskRemoveFromEventList+0x1a8>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e001      	b.n	8002bca <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	372c      	adds	r7, #44	; 0x2c
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	20000218 	.word	0x20000218
 8002bdc:	200001f8 	.word	0x200001f8
 8002be0:	2000011c 	.word	0x2000011c
 8002be4:	200001b0 	.word	0x200001b0
 8002be8:	20000118 	.word	0x20000118
 8002bec:	20000204 	.word	0x20000204

08002bf0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <vTaskInternalSetTimeOutState+0x24>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <vTaskInternalSetTimeOutState+0x28>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	605a      	str	r2, [r3, #4]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	20000208 	.word	0x20000208
 8002c18:	200001f4 	.word	0x200001f4

08002c1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	613b      	str	r3, [r7, #16]
    }
 8002c3e:	bf00      	nop
 8002c40:	e7fe      	b.n	8002c40 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	60fb      	str	r3, [r7, #12]
    }
 8002c5a:	bf00      	nop
 8002c5c:	e7fe      	b.n	8002c5c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002c5e:	f000 fd4b 	bl	80036f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002c62:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <xTaskCheckForTimeOut+0xc4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7a:	d102      	bne.n	8002c82 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	e026      	b.n	8002cd0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <xTaskCheckForTimeOut+0xc8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d00a      	beq.n	8002ca4 <xTaskCheckForTimeOut+0x88>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d305      	bcc.n	8002ca4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e015      	b.n	8002cd0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d20b      	bcs.n	8002cc6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	1ad2      	subs	r2, r2, r3
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ff98 	bl	8002bf0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	e004      	b.n	8002cd0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002cd0:	f000 fd42 	bl	8003758 <vPortExitCritical>

    return xReturn;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200001f4 	.word	0x200001f4
 8002ce4:	20000208 	.word	0x20000208

08002ce8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <vTaskMissedYield+0x14>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	20000204 	.word	0x20000204

08002d00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002d08:	f000 f84c 	bl	8002da4 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <prvIdleTask+0x20>)
 8002d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002d1c:	e7f4      	b.n	8002d08 <prvIdleTask+0x8>
 8002d1e:	bf00      	nop
 8002d20:	e000ed04 	.word	0xe000ed04

08002d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	e00c      	b.n	8002d4a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <prvInitialiseTaskLists+0x60>)
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe fea4 	bl	8001a8c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3301      	adds	r3, #1
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d9ef      	bls.n	8002d30 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d50:	480d      	ldr	r0, [pc, #52]	; (8002d88 <prvInitialiseTaskLists+0x64>)
 8002d52:	f7fe fe9b 	bl	8001a8c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d56:	480d      	ldr	r0, [pc, #52]	; (8002d8c <prvInitialiseTaskLists+0x68>)
 8002d58:	f7fe fe98 	bl	8001a8c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d5c:	480c      	ldr	r0, [pc, #48]	; (8002d90 <prvInitialiseTaskLists+0x6c>)
 8002d5e:	f7fe fe95 	bl	8001a8c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002d62:	480c      	ldr	r0, [pc, #48]	; (8002d94 <prvInitialiseTaskLists+0x70>)
 8002d64:	f7fe fe92 	bl	8001a8c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002d68:	480b      	ldr	r0, [pc, #44]	; (8002d98 <prvInitialiseTaskLists+0x74>)
 8002d6a:	f7fe fe8f 	bl	8001a8c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <prvInitialiseTaskLists+0x78>)
 8002d70:	4a05      	ldr	r2, [pc, #20]	; (8002d88 <prvInitialiseTaskLists+0x64>)
 8002d72:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d74:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <prvInitialiseTaskLists+0x7c>)
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <prvInitialiseTaskLists+0x68>)
 8002d78:	601a      	str	r2, [r3, #0]
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000011c 	.word	0x2000011c
 8002d88:	20000180 	.word	0x20000180
 8002d8c:	20000194 	.word	0x20000194
 8002d90:	200001b0 	.word	0x200001b0
 8002d94:	200001c4 	.word	0x200001c4
 8002d98:	200001dc 	.word	0x200001dc
 8002d9c:	200001a8 	.word	0x200001a8
 8002da0:	200001ac 	.word	0x200001ac

08002da4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002daa:	e019      	b.n	8002de0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002dac:	f000 fca4 	bl	80036f8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002db0:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <prvCheckTasksWaitingTermination+0x50>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fecb 	bl	8001b58 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <prvCheckTasksWaitingTermination+0x54>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <prvCheckTasksWaitingTermination+0x54>)
 8002dca:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <prvCheckTasksWaitingTermination+0x58>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <prvCheckTasksWaitingTermination+0x58>)
 8002dd4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002dd6:	f000 fcbf 	bl	8003758 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f810 	bl	8002e00 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <prvCheckTasksWaitingTermination+0x58>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1e1      	bne.n	8002dac <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200001c4 	.word	0x200001c4
 8002df8:	200001f0 	.word	0x200001f0
 8002dfc:	200001d8 	.word	0x200001d8

08002e00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fe0f 	bl	8003a30 <vPortFree>
            vPortFree( pxTCB );
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fe0c 	bl	8003a30 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <prvResetNextTaskUnblockTime+0x30>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d104      	bne.n	8002e38 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <prvResetNextTaskUnblockTime+0x34>)
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002e36:	e005      	b.n	8002e44 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <prvResetNextTaskUnblockTime+0x30>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <prvResetNextTaskUnblockTime+0x34>)
 8002e42:	6013      	str	r3, [r2, #0]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	200001a8 	.word	0x200001a8
 8002e54:	20000210 	.word	0x20000210

08002e58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <xTaskGetSchedulerState+0x34>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002e66:	2301      	movs	r3, #1
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	e008      	b.n	8002e7e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <xTaskGetSchedulerState+0x38>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002e74:	2302      	movs	r3, #2
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	e001      	b.n	8002e7e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002e7e:	687b      	ldr	r3, [r7, #4]
    }
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	200001fc 	.word	0x200001fc
 8002e90:	20000218 	.word	0x20000218

08002e94 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002e9e:	4b36      	ldr	r3, [pc, #216]	; (8002f78 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ea4:	4b35      	ldr	r3, [pc, #212]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fe54 	bl	8001b58 <uxListRemove>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10b      	bne.n	8002ece <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002eb6:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <prvAddCurrentTaskToDelayedList+0xec>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <prvAddCurrentTaskToDelayedList+0xec>)
 8002ecc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d124      	bne.n	8002f20 <prvAddCurrentTaskToDelayedList+0x8c>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d021      	beq.n	8002f20 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002edc:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	6892      	ldr	r2, [r2, #8]
 8002ef2:	60da      	str	r2, [r3, #12]
 8002ef4:	4b21      	ldr	r3, [pc, #132]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	3204      	adds	r2, #4
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1d1a      	adds	r2, r3, #4
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f10:	615a      	str	r2, [r3, #20]
 8002f12:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3301      	adds	r3, #1
 8002f18:	4a1a      	ldr	r2, [pc, #104]	; (8002f84 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002f1e:	e026      	b.n	8002f6e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d209      	bcs.n	8002f4c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3304      	adds	r3, #4
 8002f42:	4619      	mov	r1, r3
 8002f44:	4610      	mov	r0, r2
 8002f46:	f7fe fdce 	bl	8001ae6 <vListInsert>
}
 8002f4a:	e010      	b.n	8002f6e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <prvAddCurrentTaskToDelayedList+0xf8>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3304      	adds	r3, #4
 8002f56:	4619      	mov	r1, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f7fe fdc4 	bl	8001ae6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d202      	bcs.n	8002f6e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002f68:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6013      	str	r3, [r2, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200001f4 	.word	0x200001f4
 8002f7c:	20000118 	.word	0x20000118
 8002f80:	200001f8 	.word	0x200001f8
 8002f84:	200001dc 	.word	0x200001dc
 8002f88:	200001ac 	.word	0x200001ac
 8002f8c:	200001a8 	.word	0x200001a8
 8002f90:	20000210 	.word	0x20000210

08002f94 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002f9e:	f000 fa47 	bl	8003430 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <xTimerCreateTimerTask+0x54>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <xTimerCreateTimerTask+0x58>)
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	2302      	movs	r3, #2
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fb8:	490d      	ldr	r1, [pc, #52]	; (8002ff0 <xTimerCreateTimerTask+0x5c>)
 8002fba:	480e      	ldr	r0, [pc, #56]	; (8002ff4 <xTimerCreateTimerTask+0x60>)
 8002fbc:	f7ff f8ce 	bl	800215c <xTaskCreate>
 8002fc0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	603b      	str	r3, [r7, #0]
    }
 8002fda:	bf00      	nop
 8002fdc:	e7fe      	b.n	8002fdc <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002fde:	687b      	ldr	r3, [r7, #4]
    }
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	2000024c 	.word	0x2000024c
 8002fec:	20000250 	.word	0x20000250
 8002ff0:	08004638 	.word	0x08004638
 8002ff4:	0800309d 	.word	0x0800309d

08002ff8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003004:	e008      	b.n	8003018 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4413      	add	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	18d1      	adds	r1, r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f8dd 	bl	80031e4 <prvInsertTimerInActiveList>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ea      	bne.n	8003006 <prvReloadTimer+0xe>
        }
    }
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003046:	4b14      	ldr	r3, [pc, #80]	; (8003098 <prvProcessExpiredTimer+0x5c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3304      	adds	r3, #4
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe fd7f 	bl	8001b58 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff ffc3 	bl	8002ff8 <prvReloadTimer>
 8003072:	e008      	b.n	8003086 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	4798      	blx	r3
    }
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000244 	.word	0x20000244

0800309c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80030a4:	f107 0308 	add.w	r3, r7, #8
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f857 	bl	800315c <prvGetNextExpireTime>
 80030ae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4619      	mov	r1, r3
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f803 	bl	80030c0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80030ba:	f000 f8d5 	bl	8003268 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80030be:	e7f1      	b.n	80030a4 <prvTimerTask+0x8>

080030c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80030ca:	f7ff f9f5 	bl	80024b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f866 	bl	80031a4 <prvSampleTimeNow>
 80030d8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d130      	bne.n	8003142 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <prvProcessTimerOrBlockTask+0x3c>
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d806      	bhi.n	80030fc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80030ee:	f7ff f9f1 	bl	80024d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ffa1 	bl	800303c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80030fa:	e024      	b.n	8003146 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <prvProcessTimerOrBlockTask+0x90>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <prvProcessTimerOrBlockTask+0x50>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <prvProcessTimerOrBlockTask+0x52>
 8003110:	2300      	movs	r3, #0
 8003112:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003114:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <prvProcessTimerOrBlockTask+0x94>)
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	4619      	mov	r1, r3
 8003122:	f7fe ffe7 	bl	80020f4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003126:	f7ff f9d5 	bl	80024d4 <xTaskResumeAll>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <prvProcessTimerOrBlockTask+0x98>)
 8003132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	f3bf 8f6f 	isb	sy
    }
 8003140:	e001      	b.n	8003146 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003142:	f7ff f9c7 	bl	80024d4 <xTaskResumeAll>
    }
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000248 	.word	0x20000248
 8003154:	2000024c 	.word	0x2000024c
 8003158:	e000ed04 	.word	0xe000ed04

0800315c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003164:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <prvGetNextExpireTime+0x44>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <prvGetNextExpireTime+0x16>
 800316e:	2201      	movs	r2, #1
 8003170:	e000      	b.n	8003174 <prvGetNextExpireTime+0x18>
 8003172:	2200      	movs	r2, #0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003180:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <prvGetNextExpireTime+0x44>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e001      	b.n	8003190 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003190:	68fb      	ldr	r3, [r7, #12]
    }
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000244 	.word	0x20000244

080031a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80031ac:	f7ff fa80 	bl	80026b0 <xTaskGetTickCount>
 80031b0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <prvSampleTimeNow+0x3c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d205      	bcs.n	80031c8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80031bc:	f000 f912 	bl	80033e4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e002      	b.n	80031ce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <prvSampleTimeNow+0x3c>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80031d4:	68fb      	ldr	r3, [r7, #12]
    }
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000254 	.word	0x20000254

080031e4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d812      	bhi.n	8003230 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	1ad2      	subs	r2, r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	429a      	cmp	r2, r3
 8003216:	d302      	bcc.n	800321e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003218:	2301      	movs	r3, #1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	e01b      	b.n	8003256 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800321e:	4b10      	ldr	r3, [pc, #64]	; (8003260 <prvInsertTimerInActiveList+0x7c>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3304      	adds	r3, #4
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f7fe fc5c 	bl	8001ae6 <vListInsert>
 800322e:	e012      	b.n	8003256 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d206      	bcs.n	8003246 <prvInsertTimerInActiveList+0x62>
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d302      	bcc.n	8003246 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003240:	2301      	movs	r3, #1
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	e007      	b.n	8003256 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003246:	4b07      	ldr	r3, [pc, #28]	; (8003264 <prvInsertTimerInActiveList+0x80>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7fe fc48 	bl	8001ae6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003256:	697b      	ldr	r3, [r7, #20]
    }
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000248 	.word	0x20000248
 8003264:	20000244 	.word	0x20000244

08003268 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800326e:	e0a6      	b.n	80033be <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f2c0 80a3 	blt.w	80033be <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	3304      	adds	r3, #4
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fc65 	bl	8001b58 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff87 	bl	80031a4 <prvSampleTimeNow>
 8003296:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	3b01      	subs	r3, #1
 800329c:	2b08      	cmp	r3, #8
 800329e:	f200 808d 	bhi.w	80033bc <prvProcessReceivedCommands+0x154>
 80032a2:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <prvProcessReceivedCommands+0x40>)
 80032a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	080032cd 	.word	0x080032cd
 80032b0:	08003335 	.word	0x08003335
 80032b4:	08003349 	.word	0x08003349
 80032b8:	08003393 	.word	0x08003393
 80032bc:	080032cd 	.word	0x080032cd
 80032c0:	080032cd 	.word	0x080032cd
 80032c4:	08003335 	.word	0x08003335
 80032c8:	08003349 	.word	0x08003349
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	18d1      	adds	r1, r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	69f8      	ldr	r0, [r7, #28]
 80032ec:	f7ff ff7a 	bl	80031e4 <prvInsertTimerInActiveList>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	4413      	add	r3, r2
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4619      	mov	r1, r3
 8003310:	69f8      	ldr	r0, [r7, #28]
 8003312:	f7ff fe71 	bl	8002ff8 <prvReloadTimer>
 8003316:	e008      	b.n	800332a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	b2da      	uxtb	r2, r3
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	69f8      	ldr	r0, [r7, #28]
 8003330:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003332:	e044      	b.n	80033be <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	b2da      	uxtb	r2, r3
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003346:	e03a      	b.n	80033be <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	617b      	str	r3, [r7, #20]
    }
 800337a:	bf00      	nop
 800337c:	e7fe      	b.n	800337c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	18d1      	adds	r1, r2, r3
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	69f8      	ldr	r0, [r7, #28]
 800338c:	f7ff ff2a 	bl	80031e4 <prvInsertTimerInActiveList>
                        break;
 8003390:	e015      	b.n	80033be <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80033a0:	69f8      	ldr	r0, [r7, #28]
 80033a2:	f000 fb45 	bl	8003a30 <vPortFree>
 80033a6:	e00a      	b.n	80033be <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80033ba:	e000      	b.n	80033be <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 80033bc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <prvProcessReceivedCommands+0x178>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f107 0108 	add.w	r1, r7, #8
 80033c6:	2200      	movs	r2, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe fce3 	bl	8001d94 <xQueueReceive>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f47f af4d 	bne.w	8003270 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80033d6:	bf00      	nop
 80033d8:	bf00      	nop
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	2000024c 	.word	0x2000024c

080033e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80033ea:	e009      	b.n	8003400 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033ec:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <prvSwitchTimerLists+0x44>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80033f6:	f04f 31ff 	mov.w	r1, #4294967295
 80033fa:	6838      	ldr	r0, [r7, #0]
 80033fc:	f7ff fe1e 	bl	800303c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <prvSwitchTimerLists+0x44>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800340a:	4b07      	ldr	r3, [pc, #28]	; (8003428 <prvSwitchTimerLists+0x44>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <prvSwitchTimerLists+0x48>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a04      	ldr	r2, [pc, #16]	; (8003428 <prvSwitchTimerLists+0x44>)
 8003416:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003418:	4a04      	ldr	r2, [pc, #16]	; (800342c <prvSwitchTimerLists+0x48>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6013      	str	r3, [r2, #0]
    }
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000244 	.word	0x20000244
 800342c:	20000248 	.word	0x20000248

08003430 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003434:	f000 f960 	bl	80036f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <prvCheckForValidListAndQueue+0x54>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d11d      	bne.n	800347c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003440:	4811      	ldr	r0, [pc, #68]	; (8003488 <prvCheckForValidListAndQueue+0x58>)
 8003442:	f7fe fb23 	bl	8001a8c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003446:	4811      	ldr	r0, [pc, #68]	; (800348c <prvCheckForValidListAndQueue+0x5c>)
 8003448:	f7fe fb20 	bl	8001a8c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800344c:	4b10      	ldr	r3, [pc, #64]	; (8003490 <prvCheckForValidListAndQueue+0x60>)
 800344e:	4a0e      	ldr	r2, [pc, #56]	; (8003488 <prvCheckForValidListAndQueue+0x58>)
 8003450:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <prvCheckForValidListAndQueue+0x64>)
 8003454:	4a0d      	ldr	r2, [pc, #52]	; (800348c <prvCheckForValidListAndQueue+0x5c>)
 8003456:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003458:	2200      	movs	r2, #0
 800345a:	210c      	movs	r1, #12
 800345c:	200a      	movs	r0, #10
 800345e:	f7fe fc27 	bl	8001cb0 <xQueueGenericCreate>
 8003462:	4603      	mov	r3, r0
 8003464:	4a07      	ldr	r2, [pc, #28]	; (8003484 <prvCheckForValidListAndQueue+0x54>)
 8003466:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <prvCheckForValidListAndQueue+0x54>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <prvCheckForValidListAndQueue+0x54>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4908      	ldr	r1, [pc, #32]	; (8003498 <prvCheckForValidListAndQueue+0x68>)
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fdee 	bl	8002058 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800347c:	f000 f96c 	bl	8003758 <vPortExitCritical>
    }
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}
 8003484:	2000024c 	.word	0x2000024c
 8003488:	2000021c 	.word	0x2000021c
 800348c:	20000230 	.word	0x20000230
 8003490:	20000244 	.word	0x20000244
 8003494:	20000248 	.word	0x20000248
 8003498:	08004640 	.word	0x08004640

0800349c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3b04      	subs	r3, #4
 80034ac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	3b04      	subs	r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f023 0201 	bic.w	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3b04      	subs	r3, #4
 80034ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80034cc:	4a0c      	ldr	r2, [pc, #48]	; (8003500 <pxPortInitialiseStack+0x64>)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3b14      	subs	r3, #20
 80034d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3b04      	subs	r3, #4
 80034e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f06f 0202 	mvn.w	r2, #2
 80034ea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3b20      	subs	r3, #32
 80034f0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80034f2:	68fb      	ldr	r3, [r7, #12]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	08003505 	.word	0x08003505

08003504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <prvTaskExitError+0x54>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003516:	d00a      	beq.n	800352e <prvTaskExitError+0x2a>
        __asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	60fb      	str	r3, [r7, #12]
    }
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <prvTaskExitError+0x28>
        __asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	60bb      	str	r3, [r7, #8]
    }
 8003540:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003542:	bf00      	nop
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0fc      	beq.n	8003544 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800354a:	bf00      	nop
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	20000010 	.word	0x20000010
 800355c:	00000000 	.word	0x00000000

08003560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <pxCurrentTCBConst2>)
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	6808      	ldr	r0, [r1, #0]
 8003566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800356a:	f380 8809 	msr	PSP, r0
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f04f 0000 	mov.w	r0, #0
 8003576:	f380 8811 	msr	BASEPRI, r0
 800357a:	4770      	bx	lr
 800357c:	f3af 8000 	nop.w

08003580 <pxCurrentTCBConst2>:
 8003580:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop

08003588 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003588:	4808      	ldr	r0, [pc, #32]	; (80035ac <prvPortStartFirstTask+0x24>)
 800358a:	6800      	ldr	r0, [r0, #0]
 800358c:	6800      	ldr	r0, [r0, #0]
 800358e:	f380 8808 	msr	MSP, r0
 8003592:	f04f 0000 	mov.w	r0, #0
 8003596:	f380 8814 	msr	CONTROL, r0
 800359a:	b662      	cpsie	i
 800359c:	b661      	cpsie	f
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	df00      	svc	0
 80035a8:	bf00      	nop
 80035aa:	0000      	.short	0x0000
 80035ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop

080035b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035ba:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <xPortStartScheduler+0x120>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a46      	ldr	r2, [pc, #280]	; (80036d8 <xPortStartScheduler+0x124>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10a      	bne.n	80035da <xPortStartScheduler+0x26>
        __asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	613b      	str	r3, [r7, #16]
    }
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035da:	4b3e      	ldr	r3, [pc, #248]	; (80036d4 <xPortStartScheduler+0x120>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a3f      	ldr	r2, [pc, #252]	; (80036dc <xPortStartScheduler+0x128>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d10a      	bne.n	80035fa <xPortStartScheduler+0x46>
        __asm volatile
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	60fb      	str	r3, [r7, #12]
    }
 80035f6:	bf00      	nop
 80035f8:	e7fe      	b.n	80035f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035fa:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <xPortStartScheduler+0x12c>)
 80035fc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	22ff      	movs	r2, #255	; 0xff
 800360a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <xPortStartScheduler+0x130>)
 8003620:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003622:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <xPortStartScheduler+0x134>)
 8003624:	2207      	movs	r2, #7
 8003626:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003628:	e009      	b.n	800363e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800362a:	4b2f      	ldr	r3, [pc, #188]	; (80036e8 <xPortStartScheduler+0x134>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3b01      	subs	r3, #1
 8003630:	4a2d      	ldr	r2, [pc, #180]	; (80036e8 <xPortStartScheduler+0x134>)
 8003632:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	b2db      	uxtb	r3, r3
 800363c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	2b80      	cmp	r3, #128	; 0x80
 8003648:	d0ef      	beq.n	800362a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800364a:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <xPortStartScheduler+0x134>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f1c3 0307 	rsb	r3, r3, #7
 8003652:	2b04      	cmp	r3, #4
 8003654:	d00a      	beq.n	800366c <xPortStartScheduler+0xb8>
        __asm volatile
 8003656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365a:	f383 8811 	msr	BASEPRI, r3
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	60bb      	str	r3, [r7, #8]
    }
 8003668:	bf00      	nop
 800366a:	e7fe      	b.n	800366a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800366c:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <xPortStartScheduler+0x134>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <xPortStartScheduler+0x134>)
 8003674:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <xPortStartScheduler+0x134>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800367e:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <xPortStartScheduler+0x134>)
 8003680:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <xPortStartScheduler+0x138>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a17      	ldr	r2, [pc, #92]	; (80036ec <xPortStartScheduler+0x138>)
 8003690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003694:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <xPortStartScheduler+0x138>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a14      	ldr	r2, [pc, #80]	; (80036ec <xPortStartScheduler+0x138>)
 800369c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80036a2:	f000 f8db 	bl	800385c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <xPortStartScheduler+0x13c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80036ac:	f000 f8fa 	bl	80038a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036b0:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <xPortStartScheduler+0x140>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0f      	ldr	r2, [pc, #60]	; (80036f4 <xPortStartScheduler+0x140>)
 80036b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80036bc:	f7ff ff64 	bl	8003588 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80036c0:	f7ff f8fa 	bl	80028b8 <vTaskSwitchContext>
    prvTaskExitError();
 80036c4:	f7ff ff1e 	bl	8003504 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	e000ed00 	.word	0xe000ed00
 80036d8:	410fc271 	.word	0x410fc271
 80036dc:	410fc270 	.word	0x410fc270
 80036e0:	e000e400 	.word	0xe000e400
 80036e4:	20000258 	.word	0x20000258
 80036e8:	2000025c 	.word	0x2000025c
 80036ec:	e000ed20 	.word	0xe000ed20
 80036f0:	20000010 	.word	0x20000010
 80036f4:	e000ef34 	.word	0xe000ef34

080036f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
        __asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	607b      	str	r3, [r7, #4]
    }
 8003710:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003712:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <vPortEnterCritical+0x58>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <vPortEnterCritical+0x58>)
 800371a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <vPortEnterCritical+0x58>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10f      	bne.n	8003744 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <vPortEnterCritical+0x5c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <vPortEnterCritical+0x4c>
        __asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	603b      	str	r3, [r7, #0]
    }
 8003740:	bf00      	nop
 8003742:	e7fe      	b.n	8003742 <vPortEnterCritical+0x4a>
    }
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	20000010 	.word	0x20000010
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800375e:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <vPortExitCritical+0x50>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10a      	bne.n	800377c <vPortExitCritical+0x24>
        __asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	607b      	str	r3, [r7, #4]
    }
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <vPortExitCritical+0x50>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3b01      	subs	r3, #1
 8003782:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <vPortExitCritical+0x50>)
 8003784:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <vPortExitCritical+0x50>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d105      	bne.n	800379a <vPortExitCritical+0x42>
 800378e:	2300      	movs	r3, #0
 8003790:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003798:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000010 	.word	0x20000010
 80037ac:	00000000 	.word	0x00000000

080037b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80037b0:	f3ef 8009 	mrs	r0, PSP
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	4b15      	ldr	r3, [pc, #84]	; (8003810 <pxCurrentTCBConst>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	f01e 0f10 	tst.w	lr, #16
 80037c0:	bf08      	it	eq
 80037c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ca:	6010      	str	r0, [r2, #0]
 80037cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80037d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037d4:	f380 8811 	msr	BASEPRI, r0
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f7ff f86a 	bl	80028b8 <vTaskSwitchContext>
 80037e4:	f04f 0000 	mov.w	r0, #0
 80037e8:	f380 8811 	msr	BASEPRI, r0
 80037ec:	bc09      	pop	{r0, r3}
 80037ee:	6819      	ldr	r1, [r3, #0]
 80037f0:	6808      	ldr	r0, [r1, #0]
 80037f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f6:	f01e 0f10 	tst.w	lr, #16
 80037fa:	bf08      	it	eq
 80037fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003800:	f380 8809 	msr	PSP, r0
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	f3af 8000 	nop.w

08003810 <pxCurrentTCBConst>:
 8003810:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop

08003818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
        __asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	607b      	str	r3, [r7, #4]
    }
 8003830:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003832:	f7fe ff4d 	bl	80026d0 <xTaskIncrementTick>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <SysTick_Handler+0x40>)
 800383e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	2300      	movs	r3, #0
 8003846:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	f383 8811 	msr	BASEPRI, r3
    }
 800384e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	e000ed04 	.word	0xe000ed04

0800385c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <vPortSetupTimerInterrupt+0x34>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <vPortSetupTimerInterrupt+0x38>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <vPortSetupTimerInterrupt+0x3c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <vPortSetupTimerInterrupt+0x40>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	099b      	lsrs	r3, r3, #6
 8003878:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <vPortSetupTimerInterrupt+0x44>)
 800387a:	3b01      	subs	r3, #1
 800387c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <vPortSetupTimerInterrupt+0x34>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e010 	.word	0xe000e010
 8003894:	e000e018 	.word	0xe000e018
 8003898:	20000000 	.word	0x20000000
 800389c:	10624dd3 	.word	0x10624dd3
 80038a0:	e000e014 	.word	0xe000e014

080038a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80038a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80038b4 <vPortEnableVFP+0x10>
 80038a8:	6801      	ldr	r1, [r0, #0]
 80038aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038ae:	6001      	str	r1, [r0, #0]
 80038b0:	4770      	bx	lr
 80038b2:	0000      	.short	0x0000
 80038b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop

080038bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80038c8:	f7fe fdf6 	bl	80024b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80038cc:	4b53      	ldr	r3, [pc, #332]	; (8003a1c <pvPortMalloc+0x160>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80038d4:	f000 f908 	bl	8003ae8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d012      	beq.n	8003904 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80038de:	2208      	movs	r2, #8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	3308      	adds	r3, #8
 80038ea:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d804      	bhi.n	8003900 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	4413      	add	r3, r2
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	e001      	b.n	8003904 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	db70      	blt.n	80039ec <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d06d      	beq.n	80039ec <pvPortMalloc+0x130>
 8003910:	4b43      	ldr	r3, [pc, #268]	; (8003a20 <pvPortMalloc+0x164>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	429a      	cmp	r2, r3
 8003918:	d868      	bhi.n	80039ec <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800391a:	4b42      	ldr	r3, [pc, #264]	; (8003a24 <pvPortMalloc+0x168>)
 800391c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800391e:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <pvPortMalloc+0x168>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003924:	e004      	b.n	8003930 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	429a      	cmp	r2, r3
 8003938:	d903      	bls.n	8003942 <pvPortMalloc+0x86>
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f1      	bne.n	8003926 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003942:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <pvPortMalloc+0x160>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	429a      	cmp	r2, r3
 800394a:	d04f      	beq.n	80039ec <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2208      	movs	r2, #8
 8003952:	4413      	add	r3, r2
 8003954:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	1ad2      	subs	r2, r2, r3
 8003966:	2308      	movs	r3, #8
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	429a      	cmp	r2, r3
 800396c:	d91f      	bls.n	80039ae <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800396e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4413      	add	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <pvPortMalloc+0xda>
        __asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	613b      	str	r3, [r7, #16]
    }
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	1ad2      	subs	r2, r2, r3
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039a8:	6978      	ldr	r0, [r7, #20]
 80039aa:	f000 f8f9 	bl	8003ba0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039ae:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <pvPortMalloc+0x164>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <pvPortMalloc+0x164>)
 80039ba:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <pvPortMalloc+0x164>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <pvPortMalloc+0x16c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d203      	bcs.n	80039d0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <pvPortMalloc+0x164>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <pvPortMalloc+0x16c>)
 80039ce:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <pvPortMalloc+0x170>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3301      	adds	r3, #1
 80039e8:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <pvPortMalloc+0x170>)
 80039ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80039ec:	f7fe fd72 	bl	80024d4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <pvPortMalloc+0x154>
        __asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	60fb      	str	r3, [r7, #12]
    }
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <pvPortMalloc+0x152>
    return pvReturn;
 8003a10:	69fb      	ldr	r3, [r7, #28]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3728      	adds	r7, #40	; 0x28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20012e68 	.word	0x20012e68
 8003a20:	20012e6c 	.word	0x20012e6c
 8003a24:	20012e60 	.word	0x20012e60
 8003a28:	20012e70 	.word	0x20012e70
 8003a2c:	20012e74 	.word	0x20012e74

08003a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d049      	beq.n	8003ad6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003a42:	2308      	movs	r3, #8
 8003a44:	425b      	negs	r3, r3
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4413      	add	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	db0a      	blt.n	8003a6e <vPortFree+0x3e>
        __asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	60fb      	str	r3, [r7, #12]
    }
 8003a6a:	bf00      	nop
 8003a6c:	e7fe      	b.n	8003a6c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <vPortFree+0x5c>
        __asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	60bb      	str	r3, [r7, #8]
    }
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	0fdb      	lsrs	r3, r3, #31
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01c      	beq.n	8003ad6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d118      	bne.n	8003ad6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003ab0:	f7fe fd02 	bl	80024b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <vPortFree+0xb0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4413      	add	r3, r2
 8003abe:	4a08      	ldr	r2, [pc, #32]	; (8003ae0 <vPortFree+0xb0>)
 8003ac0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ac2:	6938      	ldr	r0, [r7, #16]
 8003ac4:	f000 f86c 	bl	8003ba0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <vPortFree+0xb4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3301      	adds	r3, #1
 8003ace:	4a05      	ldr	r2, [pc, #20]	; (8003ae4 <vPortFree+0xb4>)
 8003ad0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003ad2:	f7fe fcff 	bl	80024d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003ad6:	bf00      	nop
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20012e6c 	.word	0x20012e6c
 8003ae4:	20012e78 	.word	0x20012e78

08003ae8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003aee:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003af2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <prvHeapInit+0xa4>)
 8003af6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00c      	beq.n	8003b1c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3307      	adds	r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0307 	bic.w	r3, r3, #7
 8003b0e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <prvHeapInit+0xa4>)
 8003b18:	4413      	add	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b20:	4a1b      	ldr	r2, [pc, #108]	; (8003b90 <prvHeapInit+0xa8>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003b26:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <prvHeapInit+0xa8>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	4413      	add	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003b34:	2208      	movs	r2, #8
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0307 	bic.w	r3, r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <prvHeapInit+0xac>)
 8003b48:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <prvHeapInit+0xac>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003b52:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <prvHeapInit+0xac>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	1ad2      	subs	r2, r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b68:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <prvHeapInit+0xac>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4a08      	ldr	r2, [pc, #32]	; (8003b98 <prvHeapInit+0xb0>)
 8003b76:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <prvHeapInit+0xb4>)
 8003b7e:	6013      	str	r3, [r2, #0]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	20000260 	.word	0x20000260
 8003b90:	20012e60 	.word	0x20012e60
 8003b94:	20012e68 	.word	0x20012e68
 8003b98:	20012e70 	.word	0x20012e70
 8003b9c:	20012e6c 	.word	0x20012e6c

08003ba0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ba8:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <prvInsertBlockIntoFreeList+0xac>)
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e002      	b.n	8003bb4 <prvInsertBlockIntoFreeList+0x14>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d8f7      	bhi.n	8003bae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	4413      	add	r3, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d108      	bne.n	8003be2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	441a      	add	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	441a      	add	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d118      	bne.n	8003c28 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <prvInsertBlockIntoFreeList+0xb0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d00d      	beq.n	8003c1e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	441a      	add	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e008      	b.n	8003c30 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <prvInsertBlockIntoFreeList+0xb0>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e003      	b.n	8003c30 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d002      	beq.n	8003c3e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20012e60 	.word	0x20012e60
 8003c50:	20012e68 	.word	0x20012e68

08003c54 <std>:
 8003c54:	2300      	movs	r3, #0
 8003c56:	b510      	push	{r4, lr}
 8003c58:	4604      	mov	r4, r0
 8003c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c62:	6083      	str	r3, [r0, #8]
 8003c64:	8181      	strh	r1, [r0, #12]
 8003c66:	6643      	str	r3, [r0, #100]	; 0x64
 8003c68:	81c2      	strh	r2, [r0, #14]
 8003c6a:	6183      	str	r3, [r0, #24]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	2208      	movs	r2, #8
 8003c70:	305c      	adds	r0, #92	; 0x5c
 8003c72:	f000 f9e5 	bl	8004040 <memset>
 8003c76:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <std+0x58>)
 8003c78:	6263      	str	r3, [r4, #36]	; 0x24
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <std+0x5c>)
 8003c7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <std+0x60>)
 8003c80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c82:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <std+0x64>)
 8003c84:	6323      	str	r3, [r4, #48]	; 0x30
 8003c86:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <std+0x68>)
 8003c88:	6224      	str	r4, [r4, #32]
 8003c8a:	429c      	cmp	r4, r3
 8003c8c:	d006      	beq.n	8003c9c <std+0x48>
 8003c8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003c92:	4294      	cmp	r4, r2
 8003c94:	d002      	beq.n	8003c9c <std+0x48>
 8003c96:	33d0      	adds	r3, #208	; 0xd0
 8003c98:	429c      	cmp	r4, r3
 8003c9a:	d105      	bne.n	8003ca8 <std+0x54>
 8003c9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca4:	f000 ba3e 	b.w	8004124 <__retarget_lock_init_recursive>
 8003ca8:	bd10      	pop	{r4, pc}
 8003caa:	bf00      	nop
 8003cac:	08003e91 	.word	0x08003e91
 8003cb0:	08003eb3 	.word	0x08003eb3
 8003cb4:	08003eeb 	.word	0x08003eeb
 8003cb8:	08003f0f 	.word	0x08003f0f
 8003cbc:	20012e7c 	.word	0x20012e7c

08003cc0 <stdio_exit_handler>:
 8003cc0:	4a02      	ldr	r2, [pc, #8]	; (8003ccc <stdio_exit_handler+0xc>)
 8003cc2:	4903      	ldr	r1, [pc, #12]	; (8003cd0 <stdio_exit_handler+0x10>)
 8003cc4:	4803      	ldr	r0, [pc, #12]	; (8003cd4 <stdio_exit_handler+0x14>)
 8003cc6:	f000 b869 	b.w	8003d9c <_fwalk_sglue>
 8003cca:	bf00      	nop
 8003ccc:	20000014 	.word	0x20000014
 8003cd0:	08004445 	.word	0x08004445
 8003cd4:	20000020 	.word	0x20000020

08003cd8 <cleanup_stdio>:
 8003cd8:	6841      	ldr	r1, [r0, #4]
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <cleanup_stdio+0x34>)
 8003cdc:	4299      	cmp	r1, r3
 8003cde:	b510      	push	{r4, lr}
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	d001      	beq.n	8003ce8 <cleanup_stdio+0x10>
 8003ce4:	f000 fbae 	bl	8004444 <_fflush_r>
 8003ce8:	68a1      	ldr	r1, [r4, #8]
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <cleanup_stdio+0x38>)
 8003cec:	4299      	cmp	r1, r3
 8003cee:	d002      	beq.n	8003cf6 <cleanup_stdio+0x1e>
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f000 fba7 	bl	8004444 <_fflush_r>
 8003cf6:	68e1      	ldr	r1, [r4, #12]
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <cleanup_stdio+0x3c>)
 8003cfa:	4299      	cmp	r1, r3
 8003cfc:	d004      	beq.n	8003d08 <cleanup_stdio+0x30>
 8003cfe:	4620      	mov	r0, r4
 8003d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d04:	f000 bb9e 	b.w	8004444 <_fflush_r>
 8003d08:	bd10      	pop	{r4, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20012e7c 	.word	0x20012e7c
 8003d10:	20012ee4 	.word	0x20012ee4
 8003d14:	20012f4c 	.word	0x20012f4c

08003d18 <global_stdio_init.part.0>:
 8003d18:	b510      	push	{r4, lr}
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <global_stdio_init.part.0+0x30>)
 8003d1c:	4c0b      	ldr	r4, [pc, #44]	; (8003d4c <global_stdio_init.part.0+0x34>)
 8003d1e:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <global_stdio_init.part.0+0x38>)
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	4620      	mov	r0, r4
 8003d24:	2200      	movs	r2, #0
 8003d26:	2104      	movs	r1, #4
 8003d28:	f7ff ff94 	bl	8003c54 <std>
 8003d2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d30:	2201      	movs	r2, #1
 8003d32:	2109      	movs	r1, #9
 8003d34:	f7ff ff8e 	bl	8003c54 <std>
 8003d38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d42:	2112      	movs	r1, #18
 8003d44:	f7ff bf86 	b.w	8003c54 <std>
 8003d48:	20012fb4 	.word	0x20012fb4
 8003d4c:	20012e7c 	.word	0x20012e7c
 8003d50:	08003cc1 	.word	0x08003cc1

08003d54 <__sfp_lock_acquire>:
 8003d54:	4801      	ldr	r0, [pc, #4]	; (8003d5c <__sfp_lock_acquire+0x8>)
 8003d56:	f000 b9e6 	b.w	8004126 <__retarget_lock_acquire_recursive>
 8003d5a:	bf00      	nop
 8003d5c:	20012fbd 	.word	0x20012fbd

08003d60 <__sfp_lock_release>:
 8003d60:	4801      	ldr	r0, [pc, #4]	; (8003d68 <__sfp_lock_release+0x8>)
 8003d62:	f000 b9e1 	b.w	8004128 <__retarget_lock_release_recursive>
 8003d66:	bf00      	nop
 8003d68:	20012fbd 	.word	0x20012fbd

08003d6c <__sinit>:
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	4604      	mov	r4, r0
 8003d70:	f7ff fff0 	bl	8003d54 <__sfp_lock_acquire>
 8003d74:	6a23      	ldr	r3, [r4, #32]
 8003d76:	b11b      	cbz	r3, 8003d80 <__sinit+0x14>
 8003d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d7c:	f7ff bff0 	b.w	8003d60 <__sfp_lock_release>
 8003d80:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <__sinit+0x28>)
 8003d82:	6223      	str	r3, [r4, #32]
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <__sinit+0x2c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f5      	bne.n	8003d78 <__sinit+0xc>
 8003d8c:	f7ff ffc4 	bl	8003d18 <global_stdio_init.part.0>
 8003d90:	e7f2      	b.n	8003d78 <__sinit+0xc>
 8003d92:	bf00      	nop
 8003d94:	08003cd9 	.word	0x08003cd9
 8003d98:	20012fb4 	.word	0x20012fb4

08003d9c <_fwalk_sglue>:
 8003d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003da0:	4607      	mov	r7, r0
 8003da2:	4688      	mov	r8, r1
 8003da4:	4614      	mov	r4, r2
 8003da6:	2600      	movs	r6, #0
 8003da8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dac:	f1b9 0901 	subs.w	r9, r9, #1
 8003db0:	d505      	bpl.n	8003dbe <_fwalk_sglue+0x22>
 8003db2:	6824      	ldr	r4, [r4, #0]
 8003db4:	2c00      	cmp	r4, #0
 8003db6:	d1f7      	bne.n	8003da8 <_fwalk_sglue+0xc>
 8003db8:	4630      	mov	r0, r6
 8003dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dbe:	89ab      	ldrh	r3, [r5, #12]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d907      	bls.n	8003dd4 <_fwalk_sglue+0x38>
 8003dc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	d003      	beq.n	8003dd4 <_fwalk_sglue+0x38>
 8003dcc:	4629      	mov	r1, r5
 8003dce:	4638      	mov	r0, r7
 8003dd0:	47c0      	blx	r8
 8003dd2:	4306      	orrs	r6, r0
 8003dd4:	3568      	adds	r5, #104	; 0x68
 8003dd6:	e7e9      	b.n	8003dac <_fwalk_sglue+0x10>

08003dd8 <_puts_r>:
 8003dd8:	6a03      	ldr	r3, [r0, #32]
 8003dda:	b570      	push	{r4, r5, r6, lr}
 8003ddc:	6884      	ldr	r4, [r0, #8]
 8003dde:	4605      	mov	r5, r0
 8003de0:	460e      	mov	r6, r1
 8003de2:	b90b      	cbnz	r3, 8003de8 <_puts_r+0x10>
 8003de4:	f7ff ffc2 	bl	8003d6c <__sinit>
 8003de8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dea:	07db      	lsls	r3, r3, #31
 8003dec:	d405      	bmi.n	8003dfa <_puts_r+0x22>
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	0598      	lsls	r0, r3, #22
 8003df2:	d402      	bmi.n	8003dfa <_puts_r+0x22>
 8003df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003df6:	f000 f996 	bl	8004126 <__retarget_lock_acquire_recursive>
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	0719      	lsls	r1, r3, #28
 8003dfe:	d513      	bpl.n	8003e28 <_puts_r+0x50>
 8003e00:	6923      	ldr	r3, [r4, #16]
 8003e02:	b18b      	cbz	r3, 8003e28 <_puts_r+0x50>
 8003e04:	3e01      	subs	r6, #1
 8003e06:	68a3      	ldr	r3, [r4, #8]
 8003e08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	60a3      	str	r3, [r4, #8]
 8003e10:	b9e9      	cbnz	r1, 8003e4e <_puts_r+0x76>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	da2e      	bge.n	8003e74 <_puts_r+0x9c>
 8003e16:	4622      	mov	r2, r4
 8003e18:	210a      	movs	r1, #10
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f000 f87b 	bl	8003f16 <__swbuf_r>
 8003e20:	3001      	adds	r0, #1
 8003e22:	d007      	beq.n	8003e34 <_puts_r+0x5c>
 8003e24:	250a      	movs	r5, #10
 8003e26:	e007      	b.n	8003e38 <_puts_r+0x60>
 8003e28:	4621      	mov	r1, r4
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f000 f8b0 	bl	8003f90 <__swsetup_r>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d0e7      	beq.n	8003e04 <_puts_r+0x2c>
 8003e34:	f04f 35ff 	mov.w	r5, #4294967295
 8003e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e3a:	07da      	lsls	r2, r3, #31
 8003e3c:	d405      	bmi.n	8003e4a <_puts_r+0x72>
 8003e3e:	89a3      	ldrh	r3, [r4, #12]
 8003e40:	059b      	lsls	r3, r3, #22
 8003e42:	d402      	bmi.n	8003e4a <_puts_r+0x72>
 8003e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e46:	f000 f96f 	bl	8004128 <__retarget_lock_release_recursive>
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	bd70      	pop	{r4, r5, r6, pc}
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da04      	bge.n	8003e5c <_puts_r+0x84>
 8003e52:	69a2      	ldr	r2, [r4, #24]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	dc06      	bgt.n	8003e66 <_puts_r+0x8e>
 8003e58:	290a      	cmp	r1, #10
 8003e5a:	d004      	beq.n	8003e66 <_puts_r+0x8e>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	6022      	str	r2, [r4, #0]
 8003e62:	7019      	strb	r1, [r3, #0]
 8003e64:	e7cf      	b.n	8003e06 <_puts_r+0x2e>
 8003e66:	4622      	mov	r2, r4
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f000 f854 	bl	8003f16 <__swbuf_r>
 8003e6e:	3001      	adds	r0, #1
 8003e70:	d1c9      	bne.n	8003e06 <_puts_r+0x2e>
 8003e72:	e7df      	b.n	8003e34 <_puts_r+0x5c>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	250a      	movs	r5, #10
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	6022      	str	r2, [r4, #0]
 8003e7c:	701d      	strb	r5, [r3, #0]
 8003e7e:	e7db      	b.n	8003e38 <_puts_r+0x60>

08003e80 <puts>:
 8003e80:	4b02      	ldr	r3, [pc, #8]	; (8003e8c <puts+0xc>)
 8003e82:	4601      	mov	r1, r0
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	f7ff bfa7 	b.w	8003dd8 <_puts_r>
 8003e8a:	bf00      	nop
 8003e8c:	2000006c 	.word	0x2000006c

08003e90 <__sread>:
 8003e90:	b510      	push	{r4, lr}
 8003e92:	460c      	mov	r4, r1
 8003e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e98:	f000 f8fc 	bl	8004094 <_read_r>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	bfab      	itete	ge
 8003ea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ea2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ea4:	181b      	addge	r3, r3, r0
 8003ea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003eaa:	bfac      	ite	ge
 8003eac:	6563      	strge	r3, [r4, #84]	; 0x54
 8003eae:	81a3      	strhlt	r3, [r4, #12]
 8003eb0:	bd10      	pop	{r4, pc}

08003eb2 <__swrite>:
 8003eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb6:	461f      	mov	r7, r3
 8003eb8:	898b      	ldrh	r3, [r1, #12]
 8003eba:	05db      	lsls	r3, r3, #23
 8003ebc:	4605      	mov	r5, r0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	4616      	mov	r6, r2
 8003ec2:	d505      	bpl.n	8003ed0 <__swrite+0x1e>
 8003ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec8:	2302      	movs	r3, #2
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f000 f8d0 	bl	8004070 <_lseek_r>
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eda:	81a3      	strh	r3, [r4, #12]
 8003edc:	4632      	mov	r2, r6
 8003ede:	463b      	mov	r3, r7
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee6:	f000 b8e7 	b.w	80040b8 <_write_r>

08003eea <__sseek>:
 8003eea:	b510      	push	{r4, lr}
 8003eec:	460c      	mov	r4, r1
 8003eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef2:	f000 f8bd 	bl	8004070 <_lseek_r>
 8003ef6:	1c43      	adds	r3, r0, #1
 8003ef8:	89a3      	ldrh	r3, [r4, #12]
 8003efa:	bf15      	itete	ne
 8003efc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003efe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f06:	81a3      	strheq	r3, [r4, #12]
 8003f08:	bf18      	it	ne
 8003f0a:	81a3      	strhne	r3, [r4, #12]
 8003f0c:	bd10      	pop	{r4, pc}

08003f0e <__sclose>:
 8003f0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f12:	f000 b89d 	b.w	8004050 <_close_r>

08003f16 <__swbuf_r>:
 8003f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f18:	460e      	mov	r6, r1
 8003f1a:	4614      	mov	r4, r2
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	b118      	cbz	r0, 8003f28 <__swbuf_r+0x12>
 8003f20:	6a03      	ldr	r3, [r0, #32]
 8003f22:	b90b      	cbnz	r3, 8003f28 <__swbuf_r+0x12>
 8003f24:	f7ff ff22 	bl	8003d6c <__sinit>
 8003f28:	69a3      	ldr	r3, [r4, #24]
 8003f2a:	60a3      	str	r3, [r4, #8]
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	071a      	lsls	r2, r3, #28
 8003f30:	d525      	bpl.n	8003f7e <__swbuf_r+0x68>
 8003f32:	6923      	ldr	r3, [r4, #16]
 8003f34:	b31b      	cbz	r3, 8003f7e <__swbuf_r+0x68>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	6922      	ldr	r2, [r4, #16]
 8003f3a:	1a98      	subs	r0, r3, r2
 8003f3c:	6963      	ldr	r3, [r4, #20]
 8003f3e:	b2f6      	uxtb	r6, r6
 8003f40:	4283      	cmp	r3, r0
 8003f42:	4637      	mov	r7, r6
 8003f44:	dc04      	bgt.n	8003f50 <__swbuf_r+0x3a>
 8003f46:	4621      	mov	r1, r4
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f000 fa7b 	bl	8004444 <_fflush_r>
 8003f4e:	b9e0      	cbnz	r0, 8003f8a <__swbuf_r+0x74>
 8003f50:	68a3      	ldr	r3, [r4, #8]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	60a3      	str	r3, [r4, #8]
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	6022      	str	r2, [r4, #0]
 8003f5c:	701e      	strb	r6, [r3, #0]
 8003f5e:	6962      	ldr	r2, [r4, #20]
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d004      	beq.n	8003f70 <__swbuf_r+0x5a>
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	07db      	lsls	r3, r3, #31
 8003f6a:	d506      	bpl.n	8003f7a <__swbuf_r+0x64>
 8003f6c:	2e0a      	cmp	r6, #10
 8003f6e:	d104      	bne.n	8003f7a <__swbuf_r+0x64>
 8003f70:	4621      	mov	r1, r4
 8003f72:	4628      	mov	r0, r5
 8003f74:	f000 fa66 	bl	8004444 <_fflush_r>
 8003f78:	b938      	cbnz	r0, 8003f8a <__swbuf_r+0x74>
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f7e:	4621      	mov	r1, r4
 8003f80:	4628      	mov	r0, r5
 8003f82:	f000 f805 	bl	8003f90 <__swsetup_r>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d0d5      	beq.n	8003f36 <__swbuf_r+0x20>
 8003f8a:	f04f 37ff 	mov.w	r7, #4294967295
 8003f8e:	e7f4      	b.n	8003f7a <__swbuf_r+0x64>

08003f90 <__swsetup_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	4b2a      	ldr	r3, [pc, #168]	; (800403c <__swsetup_r+0xac>)
 8003f94:	4605      	mov	r5, r0
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	460c      	mov	r4, r1
 8003f9a:	b118      	cbz	r0, 8003fa4 <__swsetup_r+0x14>
 8003f9c:	6a03      	ldr	r3, [r0, #32]
 8003f9e:	b90b      	cbnz	r3, 8003fa4 <__swsetup_r+0x14>
 8003fa0:	f7ff fee4 	bl	8003d6c <__sinit>
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003faa:	0718      	lsls	r0, r3, #28
 8003fac:	d422      	bmi.n	8003ff4 <__swsetup_r+0x64>
 8003fae:	06d9      	lsls	r1, r3, #27
 8003fb0:	d407      	bmi.n	8003fc2 <__swsetup_r+0x32>
 8003fb2:	2309      	movs	r3, #9
 8003fb4:	602b      	str	r3, [r5, #0]
 8003fb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fba:	81a3      	strh	r3, [r4, #12]
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc0:	e034      	b.n	800402c <__swsetup_r+0x9c>
 8003fc2:	0758      	lsls	r0, r3, #29
 8003fc4:	d512      	bpl.n	8003fec <__swsetup_r+0x5c>
 8003fc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fc8:	b141      	cbz	r1, 8003fdc <__swsetup_r+0x4c>
 8003fca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fce:	4299      	cmp	r1, r3
 8003fd0:	d002      	beq.n	8003fd8 <__swsetup_r+0x48>
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f000 f8b8 	bl	8004148 <_free_r>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6363      	str	r3, [r4, #52]	; 0x34
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	6063      	str	r3, [r4, #4]
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	6023      	str	r3, [r4, #0]
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	f043 0308 	orr.w	r3, r3, #8
 8003ff2:	81a3      	strh	r3, [r4, #12]
 8003ff4:	6923      	ldr	r3, [r4, #16]
 8003ff6:	b94b      	cbnz	r3, 800400c <__swsetup_r+0x7c>
 8003ff8:	89a3      	ldrh	r3, [r4, #12]
 8003ffa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004002:	d003      	beq.n	800400c <__swsetup_r+0x7c>
 8004004:	4621      	mov	r1, r4
 8004006:	4628      	mov	r0, r5
 8004008:	f000 fa6a 	bl	80044e0 <__smakebuf_r>
 800400c:	89a0      	ldrh	r0, [r4, #12]
 800400e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004012:	f010 0301 	ands.w	r3, r0, #1
 8004016:	d00a      	beq.n	800402e <__swsetup_r+0x9e>
 8004018:	2300      	movs	r3, #0
 800401a:	60a3      	str	r3, [r4, #8]
 800401c:	6963      	ldr	r3, [r4, #20]
 800401e:	425b      	negs	r3, r3
 8004020:	61a3      	str	r3, [r4, #24]
 8004022:	6923      	ldr	r3, [r4, #16]
 8004024:	b943      	cbnz	r3, 8004038 <__swsetup_r+0xa8>
 8004026:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800402a:	d1c4      	bne.n	8003fb6 <__swsetup_r+0x26>
 800402c:	bd38      	pop	{r3, r4, r5, pc}
 800402e:	0781      	lsls	r1, r0, #30
 8004030:	bf58      	it	pl
 8004032:	6963      	ldrpl	r3, [r4, #20]
 8004034:	60a3      	str	r3, [r4, #8]
 8004036:	e7f4      	b.n	8004022 <__swsetup_r+0x92>
 8004038:	2000      	movs	r0, #0
 800403a:	e7f7      	b.n	800402c <__swsetup_r+0x9c>
 800403c:	2000006c 	.word	0x2000006c

08004040 <memset>:
 8004040:	4402      	add	r2, r0
 8004042:	4603      	mov	r3, r0
 8004044:	4293      	cmp	r3, r2
 8004046:	d100      	bne.n	800404a <memset+0xa>
 8004048:	4770      	bx	lr
 800404a:	f803 1b01 	strb.w	r1, [r3], #1
 800404e:	e7f9      	b.n	8004044 <memset+0x4>

08004050 <_close_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4d06      	ldr	r5, [pc, #24]	; (800406c <_close_r+0x1c>)
 8004054:	2300      	movs	r3, #0
 8004056:	4604      	mov	r4, r0
 8004058:	4608      	mov	r0, r1
 800405a:	602b      	str	r3, [r5, #0]
 800405c:	f7fc fc57 	bl	800090e <_close>
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	d102      	bne.n	800406a <_close_r+0x1a>
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	b103      	cbz	r3, 800406a <_close_r+0x1a>
 8004068:	6023      	str	r3, [r4, #0]
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	20012fb8 	.word	0x20012fb8

08004070 <_lseek_r>:
 8004070:	b538      	push	{r3, r4, r5, lr}
 8004072:	4d07      	ldr	r5, [pc, #28]	; (8004090 <_lseek_r+0x20>)
 8004074:	4604      	mov	r4, r0
 8004076:	4608      	mov	r0, r1
 8004078:	4611      	mov	r1, r2
 800407a:	2200      	movs	r2, #0
 800407c:	602a      	str	r2, [r5, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	f7fc fc6c 	bl	800095c <_lseek>
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d102      	bne.n	800408e <_lseek_r+0x1e>
 8004088:	682b      	ldr	r3, [r5, #0]
 800408a:	b103      	cbz	r3, 800408e <_lseek_r+0x1e>
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	20012fb8 	.word	0x20012fb8

08004094 <_read_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	4d07      	ldr	r5, [pc, #28]	; (80040b4 <_read_r+0x20>)
 8004098:	4604      	mov	r4, r0
 800409a:	4608      	mov	r0, r1
 800409c:	4611      	mov	r1, r2
 800409e:	2200      	movs	r2, #0
 80040a0:	602a      	str	r2, [r5, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f7fc fbfa 	bl	800089c <_read>
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	d102      	bne.n	80040b2 <_read_r+0x1e>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	b103      	cbz	r3, 80040b2 <_read_r+0x1e>
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	20012fb8 	.word	0x20012fb8

080040b8 <_write_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4d07      	ldr	r5, [pc, #28]	; (80040d8 <_write_r+0x20>)
 80040bc:	4604      	mov	r4, r0
 80040be:	4608      	mov	r0, r1
 80040c0:	4611      	mov	r1, r2
 80040c2:	2200      	movs	r2, #0
 80040c4:	602a      	str	r2, [r5, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f7fc fc05 	bl	80008d6 <_write>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_write_r+0x1e>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_write_r+0x1e>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	20012fb8 	.word	0x20012fb8

080040dc <__libc_init_array>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	4d0d      	ldr	r5, [pc, #52]	; (8004114 <__libc_init_array+0x38>)
 80040e0:	4c0d      	ldr	r4, [pc, #52]	; (8004118 <__libc_init_array+0x3c>)
 80040e2:	1b64      	subs	r4, r4, r5
 80040e4:	10a4      	asrs	r4, r4, #2
 80040e6:	2600      	movs	r6, #0
 80040e8:	42a6      	cmp	r6, r4
 80040ea:	d109      	bne.n	8004100 <__libc_init_array+0x24>
 80040ec:	4d0b      	ldr	r5, [pc, #44]	; (800411c <__libc_init_array+0x40>)
 80040ee:	4c0c      	ldr	r4, [pc, #48]	; (8004120 <__libc_init_array+0x44>)
 80040f0:	f000 fa72 	bl	80045d8 <_init>
 80040f4:	1b64      	subs	r4, r4, r5
 80040f6:	10a4      	asrs	r4, r4, #2
 80040f8:	2600      	movs	r6, #0
 80040fa:	42a6      	cmp	r6, r4
 80040fc:	d105      	bne.n	800410a <__libc_init_array+0x2e>
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	f855 3b04 	ldr.w	r3, [r5], #4
 8004104:	4798      	blx	r3
 8004106:	3601      	adds	r6, #1
 8004108:	e7ee      	b.n	80040e8 <__libc_init_array+0xc>
 800410a:	f855 3b04 	ldr.w	r3, [r5], #4
 800410e:	4798      	blx	r3
 8004110:	3601      	adds	r6, #1
 8004112:	e7f2      	b.n	80040fa <__libc_init_array+0x1e>
 8004114:	08004668 	.word	0x08004668
 8004118:	08004668 	.word	0x08004668
 800411c:	08004668 	.word	0x08004668
 8004120:	0800466c 	.word	0x0800466c

08004124 <__retarget_lock_init_recursive>:
 8004124:	4770      	bx	lr

08004126 <__retarget_lock_acquire_recursive>:
 8004126:	4770      	bx	lr

08004128 <__retarget_lock_release_recursive>:
 8004128:	4770      	bx	lr

0800412a <memcpy>:
 800412a:	440a      	add	r2, r1
 800412c:	4291      	cmp	r1, r2
 800412e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004132:	d100      	bne.n	8004136 <memcpy+0xc>
 8004134:	4770      	bx	lr
 8004136:	b510      	push	{r4, lr}
 8004138:	f811 4b01 	ldrb.w	r4, [r1], #1
 800413c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004140:	4291      	cmp	r1, r2
 8004142:	d1f9      	bne.n	8004138 <memcpy+0xe>
 8004144:	bd10      	pop	{r4, pc}
	...

08004148 <_free_r>:
 8004148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800414a:	2900      	cmp	r1, #0
 800414c:	d044      	beq.n	80041d8 <_free_r+0x90>
 800414e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004152:	9001      	str	r0, [sp, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f1a1 0404 	sub.w	r4, r1, #4
 800415a:	bfb8      	it	lt
 800415c:	18e4      	addlt	r4, r4, r3
 800415e:	f000 f8df 	bl	8004320 <__malloc_lock>
 8004162:	4a1e      	ldr	r2, [pc, #120]	; (80041dc <_free_r+0x94>)
 8004164:	9801      	ldr	r0, [sp, #4]
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	b933      	cbnz	r3, 8004178 <_free_r+0x30>
 800416a:	6063      	str	r3, [r4, #4]
 800416c:	6014      	str	r4, [r2, #0]
 800416e:	b003      	add	sp, #12
 8004170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004174:	f000 b8da 	b.w	800432c <__malloc_unlock>
 8004178:	42a3      	cmp	r3, r4
 800417a:	d908      	bls.n	800418e <_free_r+0x46>
 800417c:	6825      	ldr	r5, [r4, #0]
 800417e:	1961      	adds	r1, r4, r5
 8004180:	428b      	cmp	r3, r1
 8004182:	bf01      	itttt	eq
 8004184:	6819      	ldreq	r1, [r3, #0]
 8004186:	685b      	ldreq	r3, [r3, #4]
 8004188:	1949      	addeq	r1, r1, r5
 800418a:	6021      	streq	r1, [r4, #0]
 800418c:	e7ed      	b.n	800416a <_free_r+0x22>
 800418e:	461a      	mov	r2, r3
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	b10b      	cbz	r3, 8004198 <_free_r+0x50>
 8004194:	42a3      	cmp	r3, r4
 8004196:	d9fa      	bls.n	800418e <_free_r+0x46>
 8004198:	6811      	ldr	r1, [r2, #0]
 800419a:	1855      	adds	r5, r2, r1
 800419c:	42a5      	cmp	r5, r4
 800419e:	d10b      	bne.n	80041b8 <_free_r+0x70>
 80041a0:	6824      	ldr	r4, [r4, #0]
 80041a2:	4421      	add	r1, r4
 80041a4:	1854      	adds	r4, r2, r1
 80041a6:	42a3      	cmp	r3, r4
 80041a8:	6011      	str	r1, [r2, #0]
 80041aa:	d1e0      	bne.n	800416e <_free_r+0x26>
 80041ac:	681c      	ldr	r4, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	6053      	str	r3, [r2, #4]
 80041b2:	440c      	add	r4, r1
 80041b4:	6014      	str	r4, [r2, #0]
 80041b6:	e7da      	b.n	800416e <_free_r+0x26>
 80041b8:	d902      	bls.n	80041c0 <_free_r+0x78>
 80041ba:	230c      	movs	r3, #12
 80041bc:	6003      	str	r3, [r0, #0]
 80041be:	e7d6      	b.n	800416e <_free_r+0x26>
 80041c0:	6825      	ldr	r5, [r4, #0]
 80041c2:	1961      	adds	r1, r4, r5
 80041c4:	428b      	cmp	r3, r1
 80041c6:	bf04      	itt	eq
 80041c8:	6819      	ldreq	r1, [r3, #0]
 80041ca:	685b      	ldreq	r3, [r3, #4]
 80041cc:	6063      	str	r3, [r4, #4]
 80041ce:	bf04      	itt	eq
 80041d0:	1949      	addeq	r1, r1, r5
 80041d2:	6021      	streq	r1, [r4, #0]
 80041d4:	6054      	str	r4, [r2, #4]
 80041d6:	e7ca      	b.n	800416e <_free_r+0x26>
 80041d8:	b003      	add	sp, #12
 80041da:	bd30      	pop	{r4, r5, pc}
 80041dc:	20012fc0 	.word	0x20012fc0

080041e0 <sbrk_aligned>:
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	4e0e      	ldr	r6, [pc, #56]	; (800421c <sbrk_aligned+0x3c>)
 80041e4:	460c      	mov	r4, r1
 80041e6:	6831      	ldr	r1, [r6, #0]
 80041e8:	4605      	mov	r5, r0
 80041ea:	b911      	cbnz	r1, 80041f2 <sbrk_aligned+0x12>
 80041ec:	f000 f9d6 	bl	800459c <_sbrk_r>
 80041f0:	6030      	str	r0, [r6, #0]
 80041f2:	4621      	mov	r1, r4
 80041f4:	4628      	mov	r0, r5
 80041f6:	f000 f9d1 	bl	800459c <_sbrk_r>
 80041fa:	1c43      	adds	r3, r0, #1
 80041fc:	d00a      	beq.n	8004214 <sbrk_aligned+0x34>
 80041fe:	1cc4      	adds	r4, r0, #3
 8004200:	f024 0403 	bic.w	r4, r4, #3
 8004204:	42a0      	cmp	r0, r4
 8004206:	d007      	beq.n	8004218 <sbrk_aligned+0x38>
 8004208:	1a21      	subs	r1, r4, r0
 800420a:	4628      	mov	r0, r5
 800420c:	f000 f9c6 	bl	800459c <_sbrk_r>
 8004210:	3001      	adds	r0, #1
 8004212:	d101      	bne.n	8004218 <sbrk_aligned+0x38>
 8004214:	f04f 34ff 	mov.w	r4, #4294967295
 8004218:	4620      	mov	r0, r4
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	20012fc4 	.word	0x20012fc4

08004220 <_malloc_r>:
 8004220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004224:	1ccd      	adds	r5, r1, #3
 8004226:	f025 0503 	bic.w	r5, r5, #3
 800422a:	3508      	adds	r5, #8
 800422c:	2d0c      	cmp	r5, #12
 800422e:	bf38      	it	cc
 8004230:	250c      	movcc	r5, #12
 8004232:	2d00      	cmp	r5, #0
 8004234:	4607      	mov	r7, r0
 8004236:	db01      	blt.n	800423c <_malloc_r+0x1c>
 8004238:	42a9      	cmp	r1, r5
 800423a:	d905      	bls.n	8004248 <_malloc_r+0x28>
 800423c:	230c      	movs	r3, #12
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	2600      	movs	r6, #0
 8004242:	4630      	mov	r0, r6
 8004244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004248:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800431c <_malloc_r+0xfc>
 800424c:	f000 f868 	bl	8004320 <__malloc_lock>
 8004250:	f8d8 3000 	ldr.w	r3, [r8]
 8004254:	461c      	mov	r4, r3
 8004256:	bb5c      	cbnz	r4, 80042b0 <_malloc_r+0x90>
 8004258:	4629      	mov	r1, r5
 800425a:	4638      	mov	r0, r7
 800425c:	f7ff ffc0 	bl	80041e0 <sbrk_aligned>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	4604      	mov	r4, r0
 8004264:	d155      	bne.n	8004312 <_malloc_r+0xf2>
 8004266:	f8d8 4000 	ldr.w	r4, [r8]
 800426a:	4626      	mov	r6, r4
 800426c:	2e00      	cmp	r6, #0
 800426e:	d145      	bne.n	80042fc <_malloc_r+0xdc>
 8004270:	2c00      	cmp	r4, #0
 8004272:	d048      	beq.n	8004306 <_malloc_r+0xe6>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	4631      	mov	r1, r6
 8004278:	4638      	mov	r0, r7
 800427a:	eb04 0903 	add.w	r9, r4, r3
 800427e:	f000 f98d 	bl	800459c <_sbrk_r>
 8004282:	4581      	cmp	r9, r0
 8004284:	d13f      	bne.n	8004306 <_malloc_r+0xe6>
 8004286:	6821      	ldr	r1, [r4, #0]
 8004288:	1a6d      	subs	r5, r5, r1
 800428a:	4629      	mov	r1, r5
 800428c:	4638      	mov	r0, r7
 800428e:	f7ff ffa7 	bl	80041e0 <sbrk_aligned>
 8004292:	3001      	adds	r0, #1
 8004294:	d037      	beq.n	8004306 <_malloc_r+0xe6>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	442b      	add	r3, r5
 800429a:	6023      	str	r3, [r4, #0]
 800429c:	f8d8 3000 	ldr.w	r3, [r8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d038      	beq.n	8004316 <_malloc_r+0xf6>
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	42a2      	cmp	r2, r4
 80042a8:	d12b      	bne.n	8004302 <_malloc_r+0xe2>
 80042aa:	2200      	movs	r2, #0
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	e00f      	b.n	80042d0 <_malloc_r+0xb0>
 80042b0:	6822      	ldr	r2, [r4, #0]
 80042b2:	1b52      	subs	r2, r2, r5
 80042b4:	d41f      	bmi.n	80042f6 <_malloc_r+0xd6>
 80042b6:	2a0b      	cmp	r2, #11
 80042b8:	d917      	bls.n	80042ea <_malloc_r+0xca>
 80042ba:	1961      	adds	r1, r4, r5
 80042bc:	42a3      	cmp	r3, r4
 80042be:	6025      	str	r5, [r4, #0]
 80042c0:	bf18      	it	ne
 80042c2:	6059      	strne	r1, [r3, #4]
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	bf08      	it	eq
 80042c8:	f8c8 1000 	streq.w	r1, [r8]
 80042cc:	5162      	str	r2, [r4, r5]
 80042ce:	604b      	str	r3, [r1, #4]
 80042d0:	4638      	mov	r0, r7
 80042d2:	f104 060b 	add.w	r6, r4, #11
 80042d6:	f000 f829 	bl	800432c <__malloc_unlock>
 80042da:	f026 0607 	bic.w	r6, r6, #7
 80042de:	1d23      	adds	r3, r4, #4
 80042e0:	1af2      	subs	r2, r6, r3
 80042e2:	d0ae      	beq.n	8004242 <_malloc_r+0x22>
 80042e4:	1b9b      	subs	r3, r3, r6
 80042e6:	50a3      	str	r3, [r4, r2]
 80042e8:	e7ab      	b.n	8004242 <_malloc_r+0x22>
 80042ea:	42a3      	cmp	r3, r4
 80042ec:	6862      	ldr	r2, [r4, #4]
 80042ee:	d1dd      	bne.n	80042ac <_malloc_r+0x8c>
 80042f0:	f8c8 2000 	str.w	r2, [r8]
 80042f4:	e7ec      	b.n	80042d0 <_malloc_r+0xb0>
 80042f6:	4623      	mov	r3, r4
 80042f8:	6864      	ldr	r4, [r4, #4]
 80042fa:	e7ac      	b.n	8004256 <_malloc_r+0x36>
 80042fc:	4634      	mov	r4, r6
 80042fe:	6876      	ldr	r6, [r6, #4]
 8004300:	e7b4      	b.n	800426c <_malloc_r+0x4c>
 8004302:	4613      	mov	r3, r2
 8004304:	e7cc      	b.n	80042a0 <_malloc_r+0x80>
 8004306:	230c      	movs	r3, #12
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	4638      	mov	r0, r7
 800430c:	f000 f80e 	bl	800432c <__malloc_unlock>
 8004310:	e797      	b.n	8004242 <_malloc_r+0x22>
 8004312:	6025      	str	r5, [r4, #0]
 8004314:	e7dc      	b.n	80042d0 <_malloc_r+0xb0>
 8004316:	605b      	str	r3, [r3, #4]
 8004318:	deff      	udf	#255	; 0xff
 800431a:	bf00      	nop
 800431c:	20012fc0 	.word	0x20012fc0

08004320 <__malloc_lock>:
 8004320:	4801      	ldr	r0, [pc, #4]	; (8004328 <__malloc_lock+0x8>)
 8004322:	f7ff bf00 	b.w	8004126 <__retarget_lock_acquire_recursive>
 8004326:	bf00      	nop
 8004328:	20012fbc 	.word	0x20012fbc

0800432c <__malloc_unlock>:
 800432c:	4801      	ldr	r0, [pc, #4]	; (8004334 <__malloc_unlock+0x8>)
 800432e:	f7ff befb 	b.w	8004128 <__retarget_lock_release_recursive>
 8004332:	bf00      	nop
 8004334:	20012fbc 	.word	0x20012fbc

08004338 <__sflush_r>:
 8004338:	898a      	ldrh	r2, [r1, #12]
 800433a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800433e:	4605      	mov	r5, r0
 8004340:	0710      	lsls	r0, r2, #28
 8004342:	460c      	mov	r4, r1
 8004344:	d458      	bmi.n	80043f8 <__sflush_r+0xc0>
 8004346:	684b      	ldr	r3, [r1, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	dc05      	bgt.n	8004358 <__sflush_r+0x20>
 800434c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	dc02      	bgt.n	8004358 <__sflush_r+0x20>
 8004352:	2000      	movs	r0, #0
 8004354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800435a:	2e00      	cmp	r6, #0
 800435c:	d0f9      	beq.n	8004352 <__sflush_r+0x1a>
 800435e:	2300      	movs	r3, #0
 8004360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004364:	682f      	ldr	r7, [r5, #0]
 8004366:	6a21      	ldr	r1, [r4, #32]
 8004368:	602b      	str	r3, [r5, #0]
 800436a:	d032      	beq.n	80043d2 <__sflush_r+0x9a>
 800436c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	075a      	lsls	r2, r3, #29
 8004372:	d505      	bpl.n	8004380 <__sflush_r+0x48>
 8004374:	6863      	ldr	r3, [r4, #4]
 8004376:	1ac0      	subs	r0, r0, r3
 8004378:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800437a:	b10b      	cbz	r3, 8004380 <__sflush_r+0x48>
 800437c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800437e:	1ac0      	subs	r0, r0, r3
 8004380:	2300      	movs	r3, #0
 8004382:	4602      	mov	r2, r0
 8004384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004386:	6a21      	ldr	r1, [r4, #32]
 8004388:	4628      	mov	r0, r5
 800438a:	47b0      	blx	r6
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	89a3      	ldrh	r3, [r4, #12]
 8004390:	d106      	bne.n	80043a0 <__sflush_r+0x68>
 8004392:	6829      	ldr	r1, [r5, #0]
 8004394:	291d      	cmp	r1, #29
 8004396:	d82b      	bhi.n	80043f0 <__sflush_r+0xb8>
 8004398:	4a29      	ldr	r2, [pc, #164]	; (8004440 <__sflush_r+0x108>)
 800439a:	410a      	asrs	r2, r1
 800439c:	07d6      	lsls	r6, r2, #31
 800439e:	d427      	bmi.n	80043f0 <__sflush_r+0xb8>
 80043a0:	2200      	movs	r2, #0
 80043a2:	6062      	str	r2, [r4, #4]
 80043a4:	04d9      	lsls	r1, r3, #19
 80043a6:	6922      	ldr	r2, [r4, #16]
 80043a8:	6022      	str	r2, [r4, #0]
 80043aa:	d504      	bpl.n	80043b6 <__sflush_r+0x7e>
 80043ac:	1c42      	adds	r2, r0, #1
 80043ae:	d101      	bne.n	80043b4 <__sflush_r+0x7c>
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	b903      	cbnz	r3, 80043b6 <__sflush_r+0x7e>
 80043b4:	6560      	str	r0, [r4, #84]	; 0x54
 80043b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043b8:	602f      	str	r7, [r5, #0]
 80043ba:	2900      	cmp	r1, #0
 80043bc:	d0c9      	beq.n	8004352 <__sflush_r+0x1a>
 80043be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043c2:	4299      	cmp	r1, r3
 80043c4:	d002      	beq.n	80043cc <__sflush_r+0x94>
 80043c6:	4628      	mov	r0, r5
 80043c8:	f7ff febe 	bl	8004148 <_free_r>
 80043cc:	2000      	movs	r0, #0
 80043ce:	6360      	str	r0, [r4, #52]	; 0x34
 80043d0:	e7c0      	b.n	8004354 <__sflush_r+0x1c>
 80043d2:	2301      	movs	r3, #1
 80043d4:	4628      	mov	r0, r5
 80043d6:	47b0      	blx	r6
 80043d8:	1c41      	adds	r1, r0, #1
 80043da:	d1c8      	bne.n	800436e <__sflush_r+0x36>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0c5      	beq.n	800436e <__sflush_r+0x36>
 80043e2:	2b1d      	cmp	r3, #29
 80043e4:	d001      	beq.n	80043ea <__sflush_r+0xb2>
 80043e6:	2b16      	cmp	r3, #22
 80043e8:	d101      	bne.n	80043ee <__sflush_r+0xb6>
 80043ea:	602f      	str	r7, [r5, #0]
 80043ec:	e7b1      	b.n	8004352 <__sflush_r+0x1a>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f4:	81a3      	strh	r3, [r4, #12]
 80043f6:	e7ad      	b.n	8004354 <__sflush_r+0x1c>
 80043f8:	690f      	ldr	r7, [r1, #16]
 80043fa:	2f00      	cmp	r7, #0
 80043fc:	d0a9      	beq.n	8004352 <__sflush_r+0x1a>
 80043fe:	0793      	lsls	r3, r2, #30
 8004400:	680e      	ldr	r6, [r1, #0]
 8004402:	bf08      	it	eq
 8004404:	694b      	ldreq	r3, [r1, #20]
 8004406:	600f      	str	r7, [r1, #0]
 8004408:	bf18      	it	ne
 800440a:	2300      	movne	r3, #0
 800440c:	eba6 0807 	sub.w	r8, r6, r7
 8004410:	608b      	str	r3, [r1, #8]
 8004412:	f1b8 0f00 	cmp.w	r8, #0
 8004416:	dd9c      	ble.n	8004352 <__sflush_r+0x1a>
 8004418:	6a21      	ldr	r1, [r4, #32]
 800441a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800441c:	4643      	mov	r3, r8
 800441e:	463a      	mov	r2, r7
 8004420:	4628      	mov	r0, r5
 8004422:	47b0      	blx	r6
 8004424:	2800      	cmp	r0, #0
 8004426:	dc06      	bgt.n	8004436 <__sflush_r+0xfe>
 8004428:	89a3      	ldrh	r3, [r4, #12]
 800442a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800442e:	81a3      	strh	r3, [r4, #12]
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	e78e      	b.n	8004354 <__sflush_r+0x1c>
 8004436:	4407      	add	r7, r0
 8004438:	eba8 0800 	sub.w	r8, r8, r0
 800443c:	e7e9      	b.n	8004412 <__sflush_r+0xda>
 800443e:	bf00      	nop
 8004440:	dfbffffe 	.word	0xdfbffffe

08004444 <_fflush_r>:
 8004444:	b538      	push	{r3, r4, r5, lr}
 8004446:	690b      	ldr	r3, [r1, #16]
 8004448:	4605      	mov	r5, r0
 800444a:	460c      	mov	r4, r1
 800444c:	b913      	cbnz	r3, 8004454 <_fflush_r+0x10>
 800444e:	2500      	movs	r5, #0
 8004450:	4628      	mov	r0, r5
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	b118      	cbz	r0, 800445e <_fflush_r+0x1a>
 8004456:	6a03      	ldr	r3, [r0, #32]
 8004458:	b90b      	cbnz	r3, 800445e <_fflush_r+0x1a>
 800445a:	f7ff fc87 	bl	8003d6c <__sinit>
 800445e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f3      	beq.n	800444e <_fflush_r+0xa>
 8004466:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004468:	07d0      	lsls	r0, r2, #31
 800446a:	d404      	bmi.n	8004476 <_fflush_r+0x32>
 800446c:	0599      	lsls	r1, r3, #22
 800446e:	d402      	bmi.n	8004476 <_fflush_r+0x32>
 8004470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004472:	f7ff fe58 	bl	8004126 <__retarget_lock_acquire_recursive>
 8004476:	4628      	mov	r0, r5
 8004478:	4621      	mov	r1, r4
 800447a:	f7ff ff5d 	bl	8004338 <__sflush_r>
 800447e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004480:	07da      	lsls	r2, r3, #31
 8004482:	4605      	mov	r5, r0
 8004484:	d4e4      	bmi.n	8004450 <_fflush_r+0xc>
 8004486:	89a3      	ldrh	r3, [r4, #12]
 8004488:	059b      	lsls	r3, r3, #22
 800448a:	d4e1      	bmi.n	8004450 <_fflush_r+0xc>
 800448c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800448e:	f7ff fe4b 	bl	8004128 <__retarget_lock_release_recursive>
 8004492:	e7dd      	b.n	8004450 <_fflush_r+0xc>

08004494 <__swhatbuf_r>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	460c      	mov	r4, r1
 8004498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449c:	2900      	cmp	r1, #0
 800449e:	b096      	sub	sp, #88	; 0x58
 80044a0:	4615      	mov	r5, r2
 80044a2:	461e      	mov	r6, r3
 80044a4:	da0d      	bge.n	80044c2 <__swhatbuf_r+0x2e>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80044ac:	f04f 0100 	mov.w	r1, #0
 80044b0:	bf0c      	ite	eq
 80044b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80044b6:	2340      	movne	r3, #64	; 0x40
 80044b8:	2000      	movs	r0, #0
 80044ba:	6031      	str	r1, [r6, #0]
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	b016      	add	sp, #88	; 0x58
 80044c0:	bd70      	pop	{r4, r5, r6, pc}
 80044c2:	466a      	mov	r2, sp
 80044c4:	f000 f848 	bl	8004558 <_fstat_r>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	dbec      	blt.n	80044a6 <__swhatbuf_r+0x12>
 80044cc:	9901      	ldr	r1, [sp, #4]
 80044ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80044d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80044d6:	4259      	negs	r1, r3
 80044d8:	4159      	adcs	r1, r3
 80044da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044de:	e7eb      	b.n	80044b8 <__swhatbuf_r+0x24>

080044e0 <__smakebuf_r>:
 80044e0:	898b      	ldrh	r3, [r1, #12]
 80044e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044e4:	079d      	lsls	r5, r3, #30
 80044e6:	4606      	mov	r6, r0
 80044e8:	460c      	mov	r4, r1
 80044ea:	d507      	bpl.n	80044fc <__smakebuf_r+0x1c>
 80044ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	6123      	str	r3, [r4, #16]
 80044f4:	2301      	movs	r3, #1
 80044f6:	6163      	str	r3, [r4, #20]
 80044f8:	b002      	add	sp, #8
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	ab01      	add	r3, sp, #4
 80044fe:	466a      	mov	r2, sp
 8004500:	f7ff ffc8 	bl	8004494 <__swhatbuf_r>
 8004504:	9900      	ldr	r1, [sp, #0]
 8004506:	4605      	mov	r5, r0
 8004508:	4630      	mov	r0, r6
 800450a:	f7ff fe89 	bl	8004220 <_malloc_r>
 800450e:	b948      	cbnz	r0, 8004524 <__smakebuf_r+0x44>
 8004510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004514:	059a      	lsls	r2, r3, #22
 8004516:	d4ef      	bmi.n	80044f8 <__smakebuf_r+0x18>
 8004518:	f023 0303 	bic.w	r3, r3, #3
 800451c:	f043 0302 	orr.w	r3, r3, #2
 8004520:	81a3      	strh	r3, [r4, #12]
 8004522:	e7e3      	b.n	80044ec <__smakebuf_r+0xc>
 8004524:	89a3      	ldrh	r3, [r4, #12]
 8004526:	6020      	str	r0, [r4, #0]
 8004528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452c:	81a3      	strh	r3, [r4, #12]
 800452e:	9b00      	ldr	r3, [sp, #0]
 8004530:	6163      	str	r3, [r4, #20]
 8004532:	9b01      	ldr	r3, [sp, #4]
 8004534:	6120      	str	r0, [r4, #16]
 8004536:	b15b      	cbz	r3, 8004550 <__smakebuf_r+0x70>
 8004538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800453c:	4630      	mov	r0, r6
 800453e:	f000 f81d 	bl	800457c <_isatty_r>
 8004542:	b128      	cbz	r0, 8004550 <__smakebuf_r+0x70>
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	81a3      	strh	r3, [r4, #12]
 8004550:	89a3      	ldrh	r3, [r4, #12]
 8004552:	431d      	orrs	r5, r3
 8004554:	81a5      	strh	r5, [r4, #12]
 8004556:	e7cf      	b.n	80044f8 <__smakebuf_r+0x18>

08004558 <_fstat_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	4d07      	ldr	r5, [pc, #28]	; (8004578 <_fstat_r+0x20>)
 800455c:	2300      	movs	r3, #0
 800455e:	4604      	mov	r4, r0
 8004560:	4608      	mov	r0, r1
 8004562:	4611      	mov	r1, r2
 8004564:	602b      	str	r3, [r5, #0]
 8004566:	f7fc f9de 	bl	8000926 <_fstat>
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	d102      	bne.n	8004574 <_fstat_r+0x1c>
 800456e:	682b      	ldr	r3, [r5, #0]
 8004570:	b103      	cbz	r3, 8004574 <_fstat_r+0x1c>
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	bd38      	pop	{r3, r4, r5, pc}
 8004576:	bf00      	nop
 8004578:	20012fb8 	.word	0x20012fb8

0800457c <_isatty_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d06      	ldr	r5, [pc, #24]	; (8004598 <_isatty_r+0x1c>)
 8004580:	2300      	movs	r3, #0
 8004582:	4604      	mov	r4, r0
 8004584:	4608      	mov	r0, r1
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	f7fc f9dd 	bl	8000946 <_isatty>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_isatty_r+0x1a>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b103      	cbz	r3, 8004596 <_isatty_r+0x1a>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	20012fb8 	.word	0x20012fb8

0800459c <_sbrk_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d06      	ldr	r5, [pc, #24]	; (80045b8 <_sbrk_r+0x1c>)
 80045a0:	2300      	movs	r3, #0
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	f000 f808 	bl	80045bc <_sbrk>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d102      	bne.n	80045b6 <_sbrk_r+0x1a>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	b103      	cbz	r3, 80045b6 <_sbrk_r+0x1a>
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	20012fb8 	.word	0x20012fb8

080045bc <_sbrk>:
 80045bc:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <_sbrk+0x14>)
 80045be:	6811      	ldr	r1, [r2, #0]
 80045c0:	4603      	mov	r3, r0
 80045c2:	b909      	cbnz	r1, 80045c8 <_sbrk+0xc>
 80045c4:	4903      	ldr	r1, [pc, #12]	; (80045d4 <_sbrk+0x18>)
 80045c6:	6011      	str	r1, [r2, #0]
 80045c8:	6810      	ldr	r0, [r2, #0]
 80045ca:	4403      	add	r3, r0
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	4770      	bx	lr
 80045d0:	20012fc8 	.word	0x20012fc8
 80045d4:	20012fd0 	.word	0x20012fd0

080045d8 <_init>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	bf00      	nop
 80045dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045de:	bc08      	pop	{r3}
 80045e0:	469e      	mov	lr, r3
 80045e2:	4770      	bx	lr

080045e4 <_fini>:
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e6:	bf00      	nop
 80045e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ea:	bc08      	pop	{r3}
 80045ec:	469e      	mov	lr, r3
 80045ee:	4770      	bx	lr
