
002Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004360  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b0  080045b0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b8  080045b8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b8  080045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080045c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e1c  20000014  080045d4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e30  080045d4  00022e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e55c  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002725  00000000  00000000  0002e5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00030d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4f  00000000  00000000  00031bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015360  00000000  00000000  00032707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000106b6  00000000  00000000  00047a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094a91  00000000  00000000  0005811d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cc4  00000000  00000000  000ecbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f0874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080044e8 	.word	0x080044e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080044e8 	.word	0x080044e8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f103 0208 	add.w	r2, r3, #8
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f04f 32ff 	mov.w	r2, #4294967295
 80004f4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f103 0208 	add.w	r2, r3, #8
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f103 0208 	add.w	r2, r3, #8
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000536:	b480      	push	{r7}
 8000538:	b085      	sub	sp, #20
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
 800053e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800054c:	d103      	bne.n	8000556 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	691b      	ldr	r3, [r3, #16]
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	e00c      	b.n	8000570 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3308      	adds	r3, #8
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e002      	b.n	8000564 <vListInsert+0x2e>
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	429a      	cmp	r2, r3
 800056e:	d2f6      	bcs.n	800055e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	685a      	ldr	r2, [r3, #4]
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	601a      	str	r2, [r3, #0]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	691b      	ldr	r3, [r3, #16]
 80005b4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	6892      	ldr	r2, [r2, #8]
 80005be:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	6852      	ldr	r2, [r2, #4]
 80005c8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d103      	bne.n	80005dc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	689a      	ldr	r2, [r3, #8]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	1e5a      	subs	r2, r3, #1
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800060e:	693b      	ldr	r3, [r7, #16]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d10a      	bne.n	800062a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d05d      	beq.n	80006ec <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000634:	2b00      	cmp	r3, #0
 8000636:	d059      	beq.n	80006ec <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000640:	2100      	movs	r1, #0
 8000642:	fba3 2302 	umull	r2, r3, r3, r2
 8000646:	2b00      	cmp	r3, #0
 8000648:	d000      	beq.n	800064c <xQueueGenericReset+0x50>
 800064a:	2101      	movs	r1, #1
 800064c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800064e:	2b00      	cmp	r3, #0
 8000650:	d14c      	bne.n	80006ec <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000652:	f001 ffb1 	bl	80025b8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800065e:	6939      	ldr	r1, [r7, #16]
 8000660:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000662:	fb01 f303 	mul.w	r3, r1, r3
 8000666:	441a      	add	r2, r3
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	2200      	movs	r2, #0
 8000670:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000682:	3b01      	subs	r3, #1
 8000684:	6939      	ldr	r1, [r7, #16]
 8000686:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000688:	fb01 f303 	mul.w	r3, r1, r3
 800068c:	441a      	add	r2, r3
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	22ff      	movs	r2, #255	; 0xff
 8000696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	22ff      	movs	r2, #255	; 0xff
 800069e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d114      	bne.n	80006d2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d01a      	beq.n	80006e6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	3310      	adds	r3, #16
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 ff79 	bl	80015ac <xTaskRemoveFromEventList>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d012      	beq.n	80006e6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <xQueueGenericReset+0x11c>)
 80006c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	f3bf 8f4f 	dsb	sy
 80006cc:	f3bf 8f6f 	isb	sy
 80006d0:	e009      	b.n	80006e6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	3310      	adds	r3, #16
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff00 	bl	80004dc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	3324      	adds	r3, #36	; 0x24
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fefb 	bl	80004dc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80006e6:	f001 ff97 	bl	8002618 <vPortExitCritical>
 80006ea:	e001      	b.n	80006f0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10a      	bne.n	800070c <xQueueGenericReset+0x110>
        __asm volatile
 80006f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006fa:	f383 8811 	msr	BASEPRI, r3
 80006fe:	f3bf 8f6f 	isb	sy
 8000702:	f3bf 8f4f 	dsb	sy
 8000706:	60bb      	str	r3, [r7, #8]
    }
 8000708:	bf00      	nop
 800070a:	e7fe      	b.n	800070a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800070c:	697b      	ldr	r3, [r7, #20]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	e000ed04 	.word	0xe000ed04

0800071c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af02      	add	r7, sp, #8
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	4613      	mov	r3, r2
 8000728:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d02e      	beq.n	8000792 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000734:	2100      	movs	r1, #0
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	fba3 2302 	umull	r2, r3, r3, r2
 800073e:	2b00      	cmp	r3, #0
 8000740:	d000      	beq.n	8000744 <xQueueGenericCreate+0x28>
 8000742:	2101      	movs	r1, #1
 8000744:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000746:	2b00      	cmp	r3, #0
 8000748:	d123      	bne.n	8000792 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000752:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000756:	d81c      	bhi.n	8000792 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	fb02 f303 	mul.w	r3, r2, r3
 8000760:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	3350      	adds	r3, #80	; 0x50
 8000766:	4618      	mov	r0, r3
 8000768:	f002 f808 	bl	800277c <pvPortMalloc>
 800076c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d01c      	beq.n	80007ae <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	3350      	adds	r3, #80	; 0x50
 800077c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800077e:	79fa      	ldrb	r2, [r7, #7]
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	4613      	mov	r3, r2
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	68f8      	ldr	r0, [r7, #12]
 800078c:	f000 f814 	bl	80007b8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000790:	e00d      	b.n	80007ae <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d10a      	bne.n	80007ae <xQueueGenericCreate+0x92>
        __asm volatile
 8000798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800079c:	f383 8811 	msr	BASEPRI, r3
 80007a0:	f3bf 8f6f 	isb	sy
 80007a4:	f3bf 8f4f 	dsb	sy
 80007a8:	613b      	str	r3, [r7, #16]
    }
 80007aa:	bf00      	nop
 80007ac:	e7fe      	b.n	80007ac <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80007ae:	69fb      	ldr	r3, [r7, #28]
    }
 80007b0:	4618      	mov	r0, r3
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d103      	bne.n	80007d4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	69ba      	ldr	r2, [r7, #24]
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e002      	b.n	80007da <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007e6:	2101      	movs	r1, #1
 80007e8:	69b8      	ldr	r0, [r7, #24]
 80007ea:	f7ff ff07 	bl	80005fc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	78fa      	ldrb	r2, [r7, #3]
 80007f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800080c:	2300      	movs	r3, #0
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000816:	2b00      	cmp	r3, #0
 8000818:	d10a      	bne.n	8000830 <xQueueReceive+0x30>
        __asm volatile
 800081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800081e:	f383 8811 	msr	BASEPRI, r3
 8000822:	f3bf 8f6f 	isb	sy
 8000826:	f3bf 8f4f 	dsb	sy
 800082a:	623b      	str	r3, [r7, #32]
    }
 800082c:	bf00      	nop
 800082e:	e7fe      	b.n	800082e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d103      	bne.n	800083e <xQueueReceive+0x3e>
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <xQueueReceive+0x42>
 800083e:	2301      	movs	r3, #1
 8000840:	e000      	b.n	8000844 <xQueueReceive+0x44>
 8000842:	2300      	movs	r3, #0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10a      	bne.n	800085e <xQueueReceive+0x5e>
        __asm volatile
 8000848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084c:	f383 8811 	msr	BASEPRI, r3
 8000850:	f3bf 8f6f 	isb	sy
 8000854:	f3bf 8f4f 	dsb	sy
 8000858:	61fb      	str	r3, [r7, #28]
    }
 800085a:	bf00      	nop
 800085c:	e7fe      	b.n	800085c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800085e:	f001 f8b5 	bl	80019cc <xTaskGetSchedulerState>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <xQueueReceive+0x6e>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d101      	bne.n	8000872 <xQueueReceive+0x72>
 800086e:	2301      	movs	r3, #1
 8000870:	e000      	b.n	8000874 <xQueueReceive+0x74>
 8000872:	2300      	movs	r3, #0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10a      	bne.n	800088e <xQueueReceive+0x8e>
        __asm volatile
 8000878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800087c:	f383 8811 	msr	BASEPRI, r3
 8000880:	f3bf 8f6f 	isb	sy
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	61bb      	str	r3, [r7, #24]
    }
 800088a:	bf00      	nop
 800088c:	e7fe      	b.n	800088c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800088e:	f001 fe93 	bl	80025b8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000896:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	2b00      	cmp	r3, #0
 800089c:	d01f      	beq.n	80008de <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800089e:	68b9      	ldr	r1, [r7, #8]
 80008a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008a2:	f000 f88d 	bl	80009c0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	1e5a      	subs	r2, r3, #1
 80008aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ac:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00f      	beq.n	80008d6 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008b8:	3310      	adds	r3, #16
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fe76 	bl	80015ac <xTaskRemoveFromEventList>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d007      	beq.n	80008d6 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80008c6:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <xQueueReceive+0x1bc>)
 80008c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	f3bf 8f4f 	dsb	sy
 80008d2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80008d6:	f001 fe9f 	bl	8002618 <vPortExitCritical>
                return pdPASS;
 80008da:	2301      	movs	r3, #1
 80008dc:	e069      	b.n	80009b2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d103      	bne.n	80008ec <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80008e4:	f001 fe98 	bl	8002618 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80008e8:	2300      	movs	r3, #0
 80008ea:	e062      	b.n	80009b2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80008ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d106      	bne.n	8000900 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 ff2e 	bl	8001758 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000900:	f001 fe8a 	bl	8002618 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000904:	f000 fb5c 	bl	8000fc0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000908:	f001 fe56 	bl	80025b8 <vPortEnterCritical>
 800090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000912:	b25b      	sxtb	r3, r3
 8000914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000918:	d103      	bne.n	8000922 <xQueueReceive+0x122>
 800091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000928:	b25b      	sxtb	r3, r3
 800092a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092e:	d103      	bne.n	8000938 <xQueueReceive+0x138>
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000938:	f001 fe6e 	bl	8002618 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800093c:	1d3a      	adds	r2, r7, #4
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f000 ff1d 	bl	8001784 <xTaskCheckForTimeOut>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d123      	bne.n	8000998 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000952:	f000 f8ad 	bl	8000ab0 <prvIsQueueEmpty>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d017      	beq.n	800098c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095e:	3324      	adds	r3, #36	; 0x24
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fdb7 	bl	80014d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800096a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800096c:	f000 f84e 	bl	8000a0c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000970:	f000 fb34 	bl	8000fdc <xTaskResumeAll>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d189      	bne.n	800088e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <xQueueReceive+0x1bc>)
 800097c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	f3bf 8f4f 	dsb	sy
 8000986:	f3bf 8f6f 	isb	sy
 800098a:	e780      	b.n	800088e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800098c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800098e:	f000 f83d 	bl	8000a0c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000992:	f000 fb23 	bl	8000fdc <xTaskResumeAll>
 8000996:	e77a      	b.n	800088e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800099a:	f000 f837 	bl	8000a0c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800099e:	f000 fb1d 	bl	8000fdc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009a4:	f000 f884 	bl	8000ab0 <prvIsQueueEmpty>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f43f af6f 	beq.w	800088e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80009b0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000ed04 	.word	0xe000ed04

080009c0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d018      	beq.n	8000a04 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	441a      	add	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d303      	bcc.n	80009f4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	68d9      	ldr	r1, [r3, #12]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	461a      	mov	r2, r3
 80009fe:	6838      	ldr	r0, [r7, #0]
 8000a00:	f003 fd64 	bl	80044cc <memcpy>
    }
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000a14:	f001 fdd0 	bl	80025b8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a1e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a20:	e011      	b.n	8000a46 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d012      	beq.n	8000a50 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3324      	adds	r3, #36	; 0x24
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fdbc 	bl	80015ac <xTaskRemoveFromEventList>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000a3a:	f000 ff09 	bl	8001850 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	dce9      	bgt.n	8000a22 <prvUnlockQueue+0x16>
 8000a4e:	e000      	b.n	8000a52 <prvUnlockQueue+0x46>
                    break;
 8000a50:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	22ff      	movs	r2, #255	; 0xff
 8000a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000a5a:	f001 fddd 	bl	8002618 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000a5e:	f001 fdab 	bl	80025b8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a68:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a6a:	e011      	b.n	8000a90 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d012      	beq.n	8000a9a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3310      	adds	r3, #16
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fd97 	bl	80015ac <xTaskRemoveFromEventList>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000a84:	f000 fee4 	bl	8001850 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000a88:	7bbb      	ldrb	r3, [r7, #14]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	dce9      	bgt.n	8000a6c <prvUnlockQueue+0x60>
 8000a98:	e000      	b.n	8000a9c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000a9a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	22ff      	movs	r2, #255	; 0xff
 8000aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000aa4:	f001 fdb8 	bl	8002618 <vPortExitCritical>
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ab8:	f001 fd7e 	bl	80025b8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e001      	b.n	8000ace <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000ace:	f001 fda3 	bl	8002618 <vPortExitCritical>

    return xReturn;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10a      	bne.n	8000b06 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8000af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000af4:	f383 8811 	msr	BASEPRI, r3
 8000af8:	f3bf 8f6f 	isb	sy
 8000afc:	f3bf 8f4f 	dsb	sy
 8000b00:	60fb      	str	r3, [r7, #12]
    }
 8000b02:	bf00      	nop
 8000b04:	e7fe      	b.n	8000b04 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d024      	beq.n	8000b56 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e01e      	b.n	8000b50 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000b12:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <vQueueAddToRegistry+0x98>)
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	4413      	add	r3, r2
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d105      	bne.n	8000b2e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <vQueueAddToRegistry+0x98>)
 8000b28:	4413      	add	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
                    break;
 8000b2c:	e013      	b.n	8000b56 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10a      	bne.n	8000b4a <vQueueAddToRegistry+0x6e>
 8000b34:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <vQueueAddToRegistry+0x98>)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d104      	bne.n	8000b4a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <vQueueAddToRegistry+0x98>)
 8000b46:	4413      	add	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	2b07      	cmp	r3, #7
 8000b54:	d9dd      	bls.n	8000b12 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d005      	beq.n	8000b68 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8000b68:	bf00      	nop
 8000b6a:	371c      	adds	r7, #28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	20000030 	.word	0x20000030

08000b78 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000b88:	f001 fd16 	bl	80025b8 <vPortEnterCritical>
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b92:	b25b      	sxtb	r3, r3
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d103      	bne.n	8000ba2 <vQueueWaitForMessageRestricted+0x2a>
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bae:	d103      	bne.n	8000bb8 <vQueueWaitForMessageRestricted+0x40>
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000bb8:	f001 fd2e 	bl	8002618 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d106      	bne.n	8000bd2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	3324      	adds	r3, #36	; 0x24
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	68b9      	ldr	r1, [r7, #8]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fca7 	bl	8001520 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000bd2:	6978      	ldr	r0, [r7, #20]
 8000bd4:	f7ff ff1a 	bl	8000a0c <prvUnlockQueue>
    }
 8000bd8:	bf00      	nop
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af04      	add	r7, sp, #16
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	4613      	mov	r3, r2
 8000bee:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fdc1 	bl	800277c <pvPortMalloc>
 8000bfa:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d013      	beq.n	8000c2a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000c02:	2058      	movs	r0, #88	; 0x58
 8000c04:	f001 fdba 	bl	800277c <pvPortMalloc>
 8000c08:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d008      	beq.n	8000c22 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000c10:	2258      	movs	r2, #88	; 0x58
 8000c12:	2100      	movs	r1, #0
 8000c14:	69f8      	ldr	r0, [r7, #28]
 8000c16:	f003 fc2d 	bl	8004474 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000c20:	e005      	b.n	8000c2e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f001 fe64 	bl	80028f0 <vPortFree>
 8000c28:	e001      	b.n	8000c2e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d013      	beq.n	8000c5c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c34:	88fa      	ldrh	r2, [r7, #6]
 8000c36:	2300      	movs	r3, #0
 8000c38:	9303      	str	r3, [sp, #12]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	9302      	str	r3, [sp, #8]
 8000c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c40:	9301      	str	r3, [sp, #4]
 8000c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f000 f80e 	bl	8000c6c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000c50:	69f8      	ldr	r0, [r7, #28]
 8000c52:	f000 f899 	bl	8000d88 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	e002      	b.n	8000c62 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000c62:	69bb      	ldr	r3, [r7, #24]
    }
 8000c64:	4618      	mov	r0, r3
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	461a      	mov	r2, r3
 8000c84:	21a5      	movs	r1, #165	; 0xa5
 8000c86:	f003 fbf5 	bl	8004474 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c94:	3b01      	subs	r3, #1
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	f023 0307 	bic.w	r3, r3, #7
 8000ca2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d00a      	beq.n	8000cc4 <prvInitialiseNewTask+0x58>
        __asm volatile
 8000cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb2:	f383 8811 	msr	BASEPRI, r3
 8000cb6:	f3bf 8f6f 	isb	sy
 8000cba:	f3bf 8f4f 	dsb	sy
 8000cbe:	617b      	str	r3, [r7, #20]
    }
 8000cc0:	bf00      	nop
 8000cc2:	e7fe      	b.n	8000cc2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d01e      	beq.n	8000d08 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
 8000cce:	e012      	b.n	8000cf6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	7819      	ldrb	r1, [r3, #0]
 8000cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	4413      	add	r3, r2
 8000cde:	3334      	adds	r3, #52	; 0x34
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	4413      	add	r3, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	61fb      	str	r3, [r7, #28]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	2b09      	cmp	r3, #9
 8000cfa:	d9e9      	bls.n	8000cd0 <prvInitialiseNewTask+0x64>
 8000cfc:	e000      	b.n	8000d00 <prvInitialiseNewTask+0x94>
            {
                break;
 8000cfe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	d90a      	bls.n	8000d24 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8000d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d12:	f383 8811 	msr	BASEPRI, r3
 8000d16:	f3bf 8f6f 	isb	sy
 8000d1a:	f3bf 8f4f 	dsb	sy
 8000d1e:	613b      	str	r3, [r7, #16]
    }
 8000d20:	bf00      	nop
 8000d22:	e7fe      	b.n	8000d22 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	d901      	bls.n	8000d2e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d38:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fbec 	bl	800051c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d46:	3318      	adds	r3, #24
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fbe7 	bl	800051c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d52:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d56:	f1c3 0205 	rsb	r2, r3, #5
 8000d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	68f9      	ldr	r1, [r7, #12]
 8000d68:	69b8      	ldr	r0, [r7, #24]
 8000d6a:	f001 faf3 	bl	8002354 <pxPortInitialiseStack>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d72:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d7e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000d90:	f001 fc12 	bl	80025b8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000d94:	4b40      	ldr	r3, [pc, #256]	; (8000e98 <prvAddNewTaskToReadyList+0x110>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	4a3f      	ldr	r2, [pc, #252]	; (8000e98 <prvAddNewTaskToReadyList+0x110>)
 8000d9c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000d9e:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <prvAddNewTaskToReadyList+0x114>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d109      	bne.n	8000dba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000da6:	4a3d      	ldr	r2, [pc, #244]	; (8000e9c <prvAddNewTaskToReadyList+0x114>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000dac:	4b3a      	ldr	r3, [pc, #232]	; (8000e98 <prvAddNewTaskToReadyList+0x110>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d110      	bne.n	8000dd6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000db4:	f000 fd70 	bl	8001898 <prvInitialiseTaskLists>
 8000db8:	e00d      	b.n	8000dd6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000dba:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <prvAddNewTaskToReadyList+0x118>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d109      	bne.n	8000dd6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000dc2:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <prvAddNewTaskToReadyList+0x114>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d802      	bhi.n	8000dd6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000dd0:	4a32      	ldr	r2, [pc, #200]	; (8000e9c <prvAddNewTaskToReadyList+0x114>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000dd6:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <prvAddNewTaskToReadyList+0x11c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a31      	ldr	r2, [pc, #196]	; (8000ea4 <prvAddNewTaskToReadyList+0x11c>)
 8000dde:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000de0:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <prvAddNewTaskToReadyList+0x11c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	2201      	movs	r2, #1
 8000dee:	409a      	lsls	r2, r3
 8000df0:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <prvAddNewTaskToReadyList+0x120>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	4a2c      	ldr	r2, [pc, #176]	; (8000ea8 <prvAddNewTaskToReadyList+0x120>)
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfe:	492b      	ldr	r1, [pc, #172]	; (8000eac <prvAddNewTaskToReadyList+0x124>)
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	3204      	adds	r2, #4
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	1d1a      	adds	r2, r3, #4
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <prvAddNewTaskToReadyList+0x124>)
 8000e3e:	441a      	add	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	615a      	str	r2, [r3, #20]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e48:	4918      	ldr	r1, [pc, #96]	; (8000eac <prvAddNewTaskToReadyList+0x124>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	440b      	add	r3, r1
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	1c59      	adds	r1, r3, #1
 8000e58:	4814      	ldr	r0, [pc, #80]	; (8000eac <prvAddNewTaskToReadyList+0x124>)
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4403      	add	r3, r0
 8000e64:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000e66:	f001 fbd7 	bl	8002618 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <prvAddNewTaskToReadyList+0x118>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00e      	beq.n	8000e90 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <prvAddNewTaskToReadyList+0x114>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <prvAddNewTaskToReadyList+0x128>)
 8000e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	f3bf 8f4f 	dsb	sy
 8000e8c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000148 	.word	0x20000148
 8000e9c:	20000070 	.word	0x20000070
 8000ea0:	20000154 	.word	0x20000154
 8000ea4:	20000164 	.word	0x20000164
 8000ea8:	20000150 	.word	0x20000150
 8000eac:	20000074 	.word	0x20000074
 8000eb0:	e000ed04 	.word	0xe000ed04

08000eb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d017      	beq.n	8000ef6 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <vTaskDelay+0x60>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00a      	beq.n	8000ee4 <vTaskDelay+0x30>
        __asm volatile
 8000ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed2:	f383 8811 	msr	BASEPRI, r3
 8000ed6:	f3bf 8f6f 	isb	sy
 8000eda:	f3bf 8f4f 	dsb	sy
 8000ede:	60bb      	str	r3, [r7, #8]
    }
 8000ee0:	bf00      	nop
 8000ee2:	e7fe      	b.n	8000ee2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000ee4:	f000 f86c 	bl	8000fc0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000ee8:	2100      	movs	r1, #0
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 ff2e 	bl	8001d4c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000ef0:	f000 f874 	bl	8000fdc <xTaskResumeAll>
 8000ef4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d107      	bne.n	8000f0c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <vTaskDelay+0x64>)
 8000efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	f3bf 8f4f 	dsb	sy
 8000f08:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000170 	.word	0x20000170
 8000f18:	e000ed04 	.word	0xe000ed04

08000f1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <vTaskStartScheduler+0x88>)
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	2300      	movs	r3, #0
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2282      	movs	r2, #130	; 0x82
 8000f2e:	491e      	ldr	r1, [pc, #120]	; (8000fa8 <vTaskStartScheduler+0x8c>)
 8000f30:	481e      	ldr	r0, [pc, #120]	; (8000fac <vTaskStartScheduler+0x90>)
 8000f32:	f7ff fe55 	bl	8000be0 <xTaskCreate>
 8000f36:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d102      	bne.n	8000f44 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8000f3e:	f000 ff85 	bl	8001e4c <xTimerCreateTimerTask>
 8000f42:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d116      	bne.n	8000f78 <vTaskStartScheduler+0x5c>
        __asm volatile
 8000f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f4e:	f383 8811 	msr	BASEPRI, r3
 8000f52:	f3bf 8f6f 	isb	sy
 8000f56:	f3bf 8f4f 	dsb	sy
 8000f5a:	60bb      	str	r3, [r7, #8]
    }
 8000f5c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <vTaskStartScheduler+0x94>)
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <vTaskStartScheduler+0x98>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <vTaskStartScheduler+0x9c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000f72:	f001 fa7f 	bl	8002474 <xPortStartScheduler>
 8000f76:	e00e      	b.n	8000f96 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7e:	d10a      	bne.n	8000f96 <vTaskStartScheduler+0x7a>
        __asm volatile
 8000f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f84:	f383 8811 	msr	BASEPRI, r3
 8000f88:	f3bf 8f6f 	isb	sy
 8000f8c:	f3bf 8f4f 	dsb	sy
 8000f90:	607b      	str	r3, [r7, #4]
    }
 8000f92:	bf00      	nop
 8000f94:	e7fe      	b.n	8000f94 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <vTaskStartScheduler+0xa0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000016c 	.word	0x2000016c
 8000fa8:	08004500 	.word	0x08004500
 8000fac:	08001869 	.word	0x08001869
 8000fb0:	20000168 	.word	0x20000168
 8000fb4:	20000154 	.word	0x20000154
 8000fb8:	2000014c 	.word	0x2000014c
 8000fbc:	20000000 	.word	0x20000000

08000fc0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <vTaskSuspendAll+0x18>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <vTaskSuspendAll+0x18>)
 8000fcc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	20000170 	.word	0x20000170

08000fdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000fea:	4b71      	ldr	r3, [pc, #452]	; (80011b0 <xTaskResumeAll+0x1d4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10a      	bne.n	8001008 <xTaskResumeAll+0x2c>
        __asm volatile
 8000ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff6:	f383 8811 	msr	BASEPRI, r3
 8000ffa:	f3bf 8f6f 	isb	sy
 8000ffe:	f3bf 8f4f 	dsb	sy
 8001002:	607b      	str	r3, [r7, #4]
    }
 8001004:	bf00      	nop
 8001006:	e7fe      	b.n	8001006 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001008:	f001 fad6 	bl	80025b8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800100c:	4b68      	ldr	r3, [pc, #416]	; (80011b0 <xTaskResumeAll+0x1d4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3b01      	subs	r3, #1
 8001012:	4a67      	ldr	r2, [pc, #412]	; (80011b0 <xTaskResumeAll+0x1d4>)
 8001014:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001016:	4b66      	ldr	r3, [pc, #408]	; (80011b0 <xTaskResumeAll+0x1d4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 80c0 	bne.w	80011a0 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001020:	4b64      	ldr	r3, [pc, #400]	; (80011b4 <xTaskResumeAll+0x1d8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80bb 	beq.w	80011a0 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800102a:	e08a      	b.n	8001142 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800102c:	4b62      	ldr	r3, [pc, #392]	; (80011b8 <xTaskResumeAll+0x1dc>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	6a12      	ldr	r2, [r2, #32]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	6a1b      	ldr	r3, [r3, #32]
 8001048:	69fa      	ldr	r2, [r7, #28]
 800104a:	69d2      	ldr	r2, [r2, #28]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3318      	adds	r3, #24
 8001056:	429a      	cmp	r2, r3
 8001058:	d103      	bne.n	8001062 <xTaskResumeAll+0x86>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	6a1a      	ldr	r2, [r3, #32]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	2200      	movs	r2, #0
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	68d2      	ldr	r2, [r2, #12]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	6892      	ldr	r2, [r2, #8]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	3304      	adds	r3, #4
 8001094:	429a      	cmp	r2, r3
 8001096:	d103      	bne.n	80010a0 <xTaskResumeAll+0xc4>
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	1e5a      	subs	r2, r3, #1
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	2201      	movs	r2, #1
 80010b6:	409a      	lsls	r2, r3
 80010b8:	4b40      	ldr	r3, [pc, #256]	; (80011bc <xTaskResumeAll+0x1e0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4313      	orrs	r3, r2
 80010be:	4a3f      	ldr	r2, [pc, #252]	; (80011bc <xTaskResumeAll+0x1e0>)
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c6:	493e      	ldr	r1, [pc, #248]	; (80011c0 <xTaskResumeAll+0x1e4>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3304      	adds	r3, #4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	69fa      	ldr	r2, [r7, #28]
 80010ec:	3204      	adds	r2, #4
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	1d1a      	adds	r2, r3, #4
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4a2e      	ldr	r2, [pc, #184]	; (80011c0 <xTaskResumeAll+0x1e4>)
 8001106:	441a      	add	r2, r3
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001110:	492b      	ldr	r1, [pc, #172]	; (80011c0 <xTaskResumeAll+0x1e4>)
 8001112:	4613      	mov	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	1c59      	adds	r1, r3, #1
 8001120:	4827      	ldr	r0, [pc, #156]	; (80011c0 <xTaskResumeAll+0x1e4>)
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4403      	add	r3, r0
 800112c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <xTaskResumeAll+0x1e8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001138:	429a      	cmp	r2, r3
 800113a:	d302      	bcc.n	8001142 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <xTaskResumeAll+0x1ec>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <xTaskResumeAll+0x1dc>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f47f af70 	bne.w	800102c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001152:	f000 fc1f 	bl	8001994 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <xTaskResumeAll+0x1f0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d010      	beq.n	8001184 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001162:	f000 f847 	bl	80011f4 <xTaskIncrementTick>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <xTaskResumeAll+0x1ec>)
 800116e:	2201      	movs	r2, #1
 8001170:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	3b01      	subs	r3, #1
 8001176:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f1      	bne.n	8001162 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <xTaskResumeAll+0x1f0>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <xTaskResumeAll+0x1ec>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d009      	beq.n	80011a0 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800118c:	2301      	movs	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <xTaskResumeAll+0x1f4>)
 8001192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	f3bf 8f4f 	dsb	sy
 800119c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80011a0:	f001 fa3a 	bl	8002618 <vPortExitCritical>

    return xAlreadyYielded;
 80011a4:	69bb      	ldr	r3, [r7, #24]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3720      	adds	r7, #32
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000170 	.word	0x20000170
 80011b4:	20000148 	.word	0x20000148
 80011b8:	20000108 	.word	0x20000108
 80011bc:	20000150 	.word	0x20000150
 80011c0:	20000074 	.word	0x20000074
 80011c4:	20000070 	.word	0x20000070
 80011c8:	2000015c 	.word	0x2000015c
 80011cc:	20000158 	.word	0x20000158
 80011d0:	e000ed04 	.word	0xe000ed04

080011d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <xTaskGetTickCount+0x1c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80011e0:	687b      	ldr	r3, [r7, #4]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	2000014c 	.word	0x2000014c

080011f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011fe:	4b7d      	ldr	r3, [pc, #500]	; (80013f4 <xTaskIncrementTick+0x200>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	f040 80ec 	bne.w	80013e0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001208:	4b7b      	ldr	r3, [pc, #492]	; (80013f8 <xTaskIncrementTick+0x204>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001210:	4a79      	ldr	r2, [pc, #484]	; (80013f8 <xTaskIncrementTick+0x204>)
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d120      	bne.n	800125e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800121c:	4b77      	ldr	r3, [pc, #476]	; (80013fc <xTaskIncrementTick+0x208>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00a      	beq.n	800123c <xTaskIncrementTick+0x48>
        __asm volatile
 8001226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800122a:	f383 8811 	msr	BASEPRI, r3
 800122e:	f3bf 8f6f 	isb	sy
 8001232:	f3bf 8f4f 	dsb	sy
 8001236:	607b      	str	r3, [r7, #4]
    }
 8001238:	bf00      	nop
 800123a:	e7fe      	b.n	800123a <xTaskIncrementTick+0x46>
 800123c:	4b6f      	ldr	r3, [pc, #444]	; (80013fc <xTaskIncrementTick+0x208>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	4b6f      	ldr	r3, [pc, #444]	; (8001400 <xTaskIncrementTick+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a6d      	ldr	r2, [pc, #436]	; (80013fc <xTaskIncrementTick+0x208>)
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4a6d      	ldr	r2, [pc, #436]	; (8001400 <xTaskIncrementTick+0x20c>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	4b6c      	ldr	r3, [pc, #432]	; (8001404 <xTaskIncrementTick+0x210>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	4a6b      	ldr	r2, [pc, #428]	; (8001404 <xTaskIncrementTick+0x210>)
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	f000 fb9b 	bl	8001994 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800125e:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <xTaskIncrementTick+0x214>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6a3a      	ldr	r2, [r7, #32]
 8001264:	429a      	cmp	r2, r3
 8001266:	f0c0 80a6 	bcc.w	80013b6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800126a:	4b64      	ldr	r3, [pc, #400]	; (80013fc <xTaskIncrementTick+0x208>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d104      	bne.n	800127e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001274:	4b64      	ldr	r3, [pc, #400]	; (8001408 <xTaskIncrementTick+0x214>)
 8001276:	f04f 32ff 	mov.w	r2, #4294967295
 800127a:	601a      	str	r2, [r3, #0]
                    break;
 800127c:	e09b      	b.n	80013b6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800127e:	4b5f      	ldr	r3, [pc, #380]	; (80013fc <xTaskIncrementTick+0x208>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800128e:	6a3a      	ldr	r2, [r7, #32]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	429a      	cmp	r2, r3
 8001294:	d203      	bcs.n	800129e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001296:	4a5c      	ldr	r2, [pc, #368]	; (8001408 <xTaskIncrementTick+0x214>)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800129c:	e08b      	b.n	80013b6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	68d2      	ldr	r2, [r2, #12]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	6892      	ldr	r2, [r2, #8]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	3304      	adds	r3, #4
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d103      	bne.n	80012cc <xTaskIncrementTick+0xd8>
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1e5a      	subs	r2, r3, #1
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01e      	beq.n	8001322 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	6a12      	ldr	r2, [r2, #32]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	69d2      	ldr	r2, [r2, #28]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	3318      	adds	r3, #24
 8001306:	429a      	cmp	r2, r3
 8001308:	d103      	bne.n	8001312 <xTaskIncrementTick+0x11e>
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	6a1a      	ldr	r2, [r3, #32]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2200      	movs	r2, #0
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1e5a      	subs	r2, r3, #1
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	2201      	movs	r2, #1
 8001328:	409a      	lsls	r2, r3
 800132a:	4b38      	ldr	r3, [pc, #224]	; (800140c <xTaskIncrementTick+0x218>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4313      	orrs	r3, r2
 8001330:	4a36      	ldr	r2, [pc, #216]	; (800140c <xTaskIncrementTick+0x218>)
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001338:	4935      	ldr	r1, [pc, #212]	; (8001410 <xTaskIncrementTick+0x21c>)
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	3304      	adds	r3, #4
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	3204      	adds	r2, #4
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	1d1a      	adds	r2, r3, #4
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4a26      	ldr	r2, [pc, #152]	; (8001410 <xTaskIncrementTick+0x21c>)
 8001378:	441a      	add	r2, r3
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001382:	4923      	ldr	r1, [pc, #140]	; (8001410 <xTaskIncrementTick+0x21c>)
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	1c59      	adds	r1, r3, #1
 8001392:	481f      	ldr	r0, [pc, #124]	; (8001410 <xTaskIncrementTick+0x21c>)
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4403      	add	r3, r0
 800139e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <xTaskIncrementTick+0x220>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	429a      	cmp	r2, r3
 80013ac:	f67f af5d 	bls.w	800126a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80013b0:	2301      	movs	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013b4:	e759      	b.n	800126a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <xTaskIncrementTick+0x220>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013bc:	4914      	ldr	r1, [pc, #80]	; (8001410 <xTaskIncrementTick+0x21c>)
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d901      	bls.n	80013d2 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80013ce:	2301      	movs	r3, #1
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <xTaskIncrementTick+0x224>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80013da:	2301      	movs	r3, #1
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
 80013de:	e004      	b.n	80013ea <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <xTaskIncrementTick+0x228>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	4a0d      	ldr	r2, [pc, #52]	; (800141c <xTaskIncrementTick+0x228>)
 80013e8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000170 	.word	0x20000170
 80013f8:	2000014c 	.word	0x2000014c
 80013fc:	20000100 	.word	0x20000100
 8001400:	20000104 	.word	0x20000104
 8001404:	20000160 	.word	0x20000160
 8001408:	20000168 	.word	0x20000168
 800140c:	20000150 	.word	0x20000150
 8001410:	20000074 	.word	0x20000074
 8001414:	20000070 	.word	0x20000070
 8001418:	2000015c 	.word	0x2000015c
 800141c:	20000158 	.word	0x20000158

08001420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <vTaskSwitchContext+0xa4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <vTaskSwitchContext+0xa8>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001434:	e03f      	b.n	80014b6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <vTaskSwitchContext+0xa8>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <vTaskSwitchContext+0xac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	fab3 f383 	clz	r3, r3
 8001448:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800144a:	7afb      	ldrb	r3, [r7, #11]
 800144c:	f1c3 031f 	rsb	r3, r3, #31
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	491f      	ldr	r1, [pc, #124]	; (80014d0 <vTaskSwitchContext+0xb0>)
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10a      	bne.n	800147c <vTaskSwitchContext+0x5c>
        __asm volatile
 8001466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800146a:	f383 8811 	msr	BASEPRI, r3
 800146e:	f3bf 8f6f 	isb	sy
 8001472:	f3bf 8f4f 	dsb	sy
 8001476:	607b      	str	r3, [r7, #4]
    }
 8001478:	bf00      	nop
 800147a:	e7fe      	b.n	800147a <vTaskSwitchContext+0x5a>
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <vTaskSwitchContext+0xb0>)
 8001488:	4413      	add	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	3308      	adds	r3, #8
 800149e:	429a      	cmp	r2, r3
 80014a0:	d104      	bne.n	80014ac <vTaskSwitchContext+0x8c>
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <vTaskSwitchContext+0xb4>)
 80014b4:	6013      	str	r3, [r2, #0]
}
 80014b6:	bf00      	nop
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000170 	.word	0x20000170
 80014c8:	2000015c 	.word	0x2000015c
 80014cc:	20000150 	.word	0x20000150
 80014d0:	20000074 	.word	0x20000074
 80014d4:	20000070 	.word	0x20000070

080014d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10a      	bne.n	80014fe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80014e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ec:	f383 8811 	msr	BASEPRI, r3
 80014f0:	f3bf 8f6f 	isb	sy
 80014f4:	f3bf 8f4f 	dsb	sy
 80014f8:	60fb      	str	r3, [r7, #12]
    }
 80014fa:	bf00      	nop
 80014fc:	e7fe      	b.n	80014fc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <vTaskPlaceOnEventList+0x44>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3318      	adds	r3, #24
 8001504:	4619      	mov	r1, r3
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff f815 	bl	8000536 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800150c:	2101      	movs	r1, #1
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f000 fc1c 	bl	8001d4c <prvAddCurrentTaskToDelayedList>
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000070 	.word	0x20000070

08001520 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10a      	bne.n	8001548 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001536:	f383 8811 	msr	BASEPRI, r3
 800153a:	f3bf 8f6f 	isb	sy
 800153e:	f3bf 8f4f 	dsb	sy
 8001542:	613b      	str	r3, [r7, #16]
    }
 8001544:	bf00      	nop
 8001546:	e7fe      	b.n	8001546 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	61da      	str	r2, [r3, #28]
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	6892      	ldr	r2, [r2, #8]
 800155e:	621a      	str	r2, [r3, #32]
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	3218      	adds	r2, #24
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <vTaskPlaceOnEventListRestricted+0x88>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f103 0218 	add.w	r2, r3, #24
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <vTaskPlaceOnEventListRestricted+0x88>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	68b8      	ldr	r0, [r7, #8]
 800159a:	f000 fbd7 	bl	8001d4c <prvAddCurrentTaskToDelayedList>
    }
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000070 	.word	0x20000070

080015ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80015ac:	b480      	push	{r7}
 80015ae:	b08b      	sub	sp, #44	; 0x2c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10a      	bne.n	80015d8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80015c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c6:	f383 8811 	msr	BASEPRI, r3
 80015ca:	f3bf 8f6f 	isb	sy
 80015ce:	f3bf 8f4f 	dsb	sy
 80015d2:	60fb      	str	r3, [r7, #12]
    }
 80015d4:	bf00      	nop
 80015d6:	e7fe      	b.n	80015d6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	6a3a      	ldr	r2, [r7, #32]
 80015e4:	6a12      	ldr	r2, [r2, #32]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	6a3a      	ldr	r2, [r7, #32]
 80015ee:	69d2      	ldr	r2, [r2, #28]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	3318      	adds	r3, #24
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d103      	bne.n	8001606 <xTaskRemoveFromEventList+0x5a>
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	6a1a      	ldr	r2, [r3, #32]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001616:	4b4a      	ldr	r3, [pc, #296]	; (8001740 <xTaskRemoveFromEventList+0x194>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d15e      	bne.n	80016dc <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	68d2      	ldr	r2, [r2, #12]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	6a3a      	ldr	r2, [r7, #32]
 8001634:	6892      	ldr	r2, [r2, #8]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	3304      	adds	r3, #4
 8001640:	429a      	cmp	r2, r3
 8001642:	d103      	bne.n	800164c <xTaskRemoveFromEventList+0xa0>
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1e5a      	subs	r2, r3, #1
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	2201      	movs	r2, #1
 8001662:	409a      	lsls	r2, r3
 8001664:	4b37      	ldr	r3, [pc, #220]	; (8001744 <xTaskRemoveFromEventList+0x198>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4313      	orrs	r3, r2
 800166a:	4a36      	ldr	r2, [pc, #216]	; (8001744 <xTaskRemoveFromEventList+0x198>)
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001672:	4935      	ldr	r1, [pc, #212]	; (8001748 <xTaskRemoveFromEventList+0x19c>)
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	3304      	adds	r3, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	6a3a      	ldr	r2, [r7, #32]
 8001698:	3204      	adds	r2, #4
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	1d1a      	adds	r2, r3, #4
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4a25      	ldr	r2, [pc, #148]	; (8001748 <xTaskRemoveFromEventList+0x19c>)
 80016b2:	441a      	add	r2, r3
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	615a      	str	r2, [r3, #20]
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016bc:	4922      	ldr	r1, [pc, #136]	; (8001748 <xTaskRemoveFromEventList+0x19c>)
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	1c59      	adds	r1, r3, #1
 80016cc:	481e      	ldr	r0, [pc, #120]	; (8001748 <xTaskRemoveFromEventList+0x19c>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4403      	add	r3, r0
 80016d8:	6019      	str	r1, [r3, #0]
 80016da:	e01b      	b.n	8001714 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <xTaskRemoveFromEventList+0x1a0>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	61da      	str	r2, [r3, #28]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	621a      	str	r2, [r3, #32]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	6a3a      	ldr	r2, [r7, #32]
 80016f6:	3218      	adds	r2, #24
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	f103 0218 	add.w	r2, r3, #24
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	4a11      	ldr	r2, [pc, #68]	; (800174c <xTaskRemoveFromEventList+0x1a0>)
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <xTaskRemoveFromEventList+0x1a0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <xTaskRemoveFromEventList+0x1a0>)
 8001712:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <xTaskRemoveFromEventList+0x1a4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	429a      	cmp	r2, r3
 8001720:	d905      	bls.n	800172e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001722:	2301      	movs	r3, #1
 8001724:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <xTaskRemoveFromEventList+0x1a8>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	e001      	b.n	8001732 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001734:	4618      	mov	r0, r3
 8001736:	372c      	adds	r7, #44	; 0x2c
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	20000170 	.word	0x20000170
 8001744:	20000150 	.word	0x20000150
 8001748:	20000074 	.word	0x20000074
 800174c:	20000108 	.word	0x20000108
 8001750:	20000070 	.word	0x20000070
 8001754:	2000015c 	.word	0x2000015c

08001758 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <vTaskInternalSetTimeOutState+0x24>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <vTaskInternalSetTimeOutState+0x28>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	605a      	str	r2, [r3, #4]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	20000160 	.word	0x20000160
 8001780:	2000014c 	.word	0x2000014c

08001784 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10a      	bne.n	80017aa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001798:	f383 8811 	msr	BASEPRI, r3
 800179c:	f3bf 8f6f 	isb	sy
 80017a0:	f3bf 8f4f 	dsb	sy
 80017a4:	613b      	str	r3, [r7, #16]
    }
 80017a6:	bf00      	nop
 80017a8:	e7fe      	b.n	80017a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10a      	bne.n	80017c6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80017b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b4:	f383 8811 	msr	BASEPRI, r3
 80017b8:	f3bf 8f6f 	isb	sy
 80017bc:	f3bf 8f4f 	dsb	sy
 80017c0:	60fb      	str	r3, [r7, #12]
    }
 80017c2:	bf00      	nop
 80017c4:	e7fe      	b.n	80017c4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80017c6:	f000 fef7 	bl	80025b8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <xTaskCheckForTimeOut+0xc4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e2:	d102      	bne.n	80017ea <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	e026      	b.n	8001838 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <xTaskCheckForTimeOut+0xc8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d00a      	beq.n	800180c <xTaskCheckForTimeOut+0x88>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d305      	bcc.n	800180c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001800:	2301      	movs	r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	e015      	b.n	8001838 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	429a      	cmp	r2, r3
 8001814:	d20b      	bcs.n	800182e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	1ad2      	subs	r2, r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ff98 	bl	8001758 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	e004      	b.n	8001838 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001834:	2301      	movs	r3, #1
 8001836:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001838:	f000 feee 	bl	8002618 <vPortExitCritical>

    return xReturn;
 800183c:	69fb      	ldr	r3, [r7, #28]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000014c 	.word	0x2000014c
 800184c:	20000160 	.word	0x20000160

08001850 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <vTaskMissedYield+0x14>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	2000015c 	.word	0x2000015c

08001868 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001870:	f000 f852 	bl	8001918 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <prvIdleTask+0x28>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d9f9      	bls.n	8001870 <prvIdleTask+0x8>
            {
                taskYIELD();
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <prvIdleTask+0x2c>)
 800187e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	f3bf 8f4f 	dsb	sy
 8001888:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800188c:	e7f0      	b.n	8001870 <prvIdleTask+0x8>
 800188e:	bf00      	nop
 8001890:	20000074 	.word	0x20000074
 8001894:	e000ed04 	.word	0xe000ed04

08001898 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	e00c      	b.n	80018be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <prvInitialiseTaskLists+0x60>)
 80018b0:	4413      	add	r3, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe12 	bl	80004dc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3301      	adds	r3, #1
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d9ef      	bls.n	80018a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80018c4:	480d      	ldr	r0, [pc, #52]	; (80018fc <prvInitialiseTaskLists+0x64>)
 80018c6:	f7fe fe09 	bl	80004dc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <prvInitialiseTaskLists+0x68>)
 80018cc:	f7fe fe06 	bl	80004dc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <prvInitialiseTaskLists+0x6c>)
 80018d2:	f7fe fe03 	bl	80004dc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <prvInitialiseTaskLists+0x70>)
 80018d8:	f7fe fe00 	bl	80004dc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <prvInitialiseTaskLists+0x74>)
 80018de:	f7fe fdfd 	bl	80004dc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <prvInitialiseTaskLists+0x78>)
 80018e4:	4a05      	ldr	r2, [pc, #20]	; (80018fc <prvInitialiseTaskLists+0x64>)
 80018e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <prvInitialiseTaskLists+0x7c>)
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <prvInitialiseTaskLists+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000074 	.word	0x20000074
 80018fc:	200000d8 	.word	0x200000d8
 8001900:	200000ec 	.word	0x200000ec
 8001904:	20000108 	.word	0x20000108
 8001908:	2000011c 	.word	0x2000011c
 800190c:	20000134 	.word	0x20000134
 8001910:	20000100 	.word	0x20000100
 8001914:	20000104 	.word	0x20000104

08001918 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800191e:	e019      	b.n	8001954 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001920:	f000 fe4a 	bl	80025b8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <prvCheckTasksWaitingTermination+0x50>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3304      	adds	r3, #4
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fe39 	bl	80005a8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <prvCheckTasksWaitingTermination+0x54>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3b01      	subs	r3, #1
 800193c:	4a0b      	ldr	r2, [pc, #44]	; (800196c <prvCheckTasksWaitingTermination+0x54>)
 800193e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <prvCheckTasksWaitingTermination+0x58>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3b01      	subs	r3, #1
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <prvCheckTasksWaitingTermination+0x58>)
 8001948:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800194a:	f000 fe65 	bl	8002618 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f810 	bl	8001974 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <prvCheckTasksWaitingTermination+0x58>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1e1      	bne.n	8001920 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000011c 	.word	0x2000011c
 800196c:	20000148 	.word	0x20000148
 8001970:	20000130 	.word	0x20000130

08001974 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	4618      	mov	r0, r3
 8001982:	f000 ffb5 	bl	80028f0 <vPortFree>
            vPortFree( pxTCB );
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 ffb2 	bl	80028f0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <prvResetNextTaskUnblockTime+0x30>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d104      	bne.n	80019ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <prvResetNextTaskUnblockTime+0x34>)
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80019aa:	e005      	b.n	80019b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <prvResetNextTaskUnblockTime+0x30>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <prvResetNextTaskUnblockTime+0x34>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000100 	.word	0x20000100
 80019c8:	20000168 	.word	0x20000168

080019cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <xTaskGetSchedulerState+0x34>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80019da:	2301      	movs	r3, #1
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	e008      	b.n	80019f2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <xTaskGetSchedulerState+0x38>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80019e8:	2302      	movs	r3, #2
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	e001      	b.n	80019f2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80019f2:	687b      	ldr	r3, [r7, #4]
    }
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20000154 	.word	0x20000154
 8001a04:	20000170 	.word	0x20000170

08001a08 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00a      	beq.n	8001a32 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a20:	f383 8811 	msr	BASEPRI, r3
 8001a24:	f3bf 8f6f 	isb	sy
 8001a28:	f3bf 8f4f 	dsb	sy
 8001a2c:	613b      	str	r3, [r7, #16]
    }
 8001a2e:	bf00      	nop
 8001a30:	e7fe      	b.n	8001a30 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001a32:	f000 fdc1 	bl	80025b8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001a36:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <xTaskGenericNotifyWait+0xf8>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3354      	adds	r3, #84	; 0x54
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d022      	beq.n	8001a8e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <xTaskGenericNotifyWait+0xf8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	3214      	adds	r2, #20
 8001a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	43d2      	mvns	r2, r2
 8001a58:	4011      	ands	r1, r2
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	3214      	adds	r2, #20
 8001a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001a62:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <xTaskGenericNotifyWait+0xf8>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4413      	add	r3, r2
 8001a6a:	3354      	adds	r3, #84	; 0x54
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00b      	beq.n	8001a8e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001a76:	2101      	movs	r1, #1
 8001a78:	6a38      	ldr	r0, [r7, #32]
 8001a7a:	f000 f967 	bl	8001d4c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <xTaskGenericNotifyWait+0xfc>)
 8001a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	f3bf 8f4f 	dsb	sy
 8001a8a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001a8e:	f000 fdc3 	bl	8002618 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001a92:	f000 fd91 	bl	80025b8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <xTaskGenericNotifyWait+0xf8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	3214      	adds	r2, #20
 8001aa4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <xTaskGenericNotifyWait+0xf8>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3354      	adds	r3, #84	; 0x54
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d002      	beq.n	8001ac4 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e00e      	b.n	8001ae2 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <xTaskGenericNotifyWait+0xf8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	3214      	adds	r2, #20
 8001acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	43d2      	mvns	r2, r2
 8001ad4:	4011      	ands	r1, r2
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	3214      	adds	r2, #20
 8001ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <xTaskGenericNotifyWait+0xf8>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	3354      	adds	r3, #84	; 0x54
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001af0:	f000 fd92 	bl	8002618 <vPortExitCritical>

        return xReturn;
 8001af4:	697b      	ldr	r3, [r7, #20]
    }
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000070 	.word	0x20000070
 8001b04:	e000ed04 	.word	0xe000ed04

08001b08 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08e      	sub	sp, #56	; 0x38
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001b16:	2301      	movs	r3, #1
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00a      	beq.n	8001b36 <xTaskGenericNotify+0x2e>
        __asm volatile
 8001b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b24:	f383 8811 	msr	BASEPRI, r3
 8001b28:	f3bf 8f6f 	isb	sy
 8001b2c:	f3bf 8f4f 	dsb	sy
 8001b30:	623b      	str	r3, [r7, #32]
    }
 8001b32:	bf00      	nop
 8001b34:	e7fe      	b.n	8001b34 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10a      	bne.n	8001b52 <xTaskGenericNotify+0x4a>
        __asm volatile
 8001b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b40:	f383 8811 	msr	BASEPRI, r3
 8001b44:	f3bf 8f6f 	isb	sy
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	61fb      	str	r3, [r7, #28]
    }
 8001b4e:	bf00      	nop
 8001b50:	e7fe      	b.n	8001b50 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8001b56:	f000 fd2f 	bl	80025b8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	3214      	adds	r2, #20
 8001b66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b6c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4413      	add	r3, r2
 8001b74:	3354      	adds	r3, #84	; 0x54
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4413      	add	r3, r2
 8001b82:	3354      	adds	r3, #84	; 0x54
 8001b84:	2202      	movs	r2, #2
 8001b86:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d83b      	bhi.n	8001c06 <xTaskGenericNotify+0xfe>
 8001b8e:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <xTaskGenericNotify+0x8c>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001c25 	.word	0x08001c25
 8001b98:	08001ba9 	.word	0x08001ba9
 8001b9c:	08001bc5 	.word	0x08001bc5
 8001ba0:	08001bdd 	.word	0x08001bdd
 8001ba4:	08001beb 	.word	0x08001beb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	3214      	adds	r2, #20
 8001bae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	ea42 0103 	orr.w	r1, r2, r3
 8001bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	3214      	adds	r2, #20
 8001bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001bc2:	e032      	b.n	8001c2a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	3214      	adds	r2, #20
 8001bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bce:	1c59      	adds	r1, r3, #1
 8001bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	3214      	adds	r2, #20
 8001bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001bda:	e026      	b.n	8001c2a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	3214      	adds	r2, #20
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001be8:	e01f      	b.n	8001c2a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d006      	beq.n	8001c00 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	3214      	adds	r2, #20
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001bfe:	e014      	b.n	8001c2a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8001c04:	e011      	b.n	8001c2a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001c06:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <xTaskGenericNotify+0x230>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00c      	beq.n	8001c28 <xTaskGenericNotify+0x120>
        __asm volatile
 8001c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c12:	f383 8811 	msr	BASEPRI, r3
 8001c16:	f3bf 8f6f 	isb	sy
 8001c1a:	f3bf 8f4f 	dsb	sy
 8001c1e:	61bb      	str	r3, [r7, #24]
    }
 8001c20:	bf00      	nop
 8001c22:	e7fe      	b.n	8001c22 <xTaskGenericNotify+0x11a>
                    break;
 8001c24:	bf00      	nop
 8001c26:	e000      	b.n	8001c2a <xTaskGenericNotify+0x122>

                    break;
 8001c28:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d17b      	bne.n	8001d2a <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c3e:	68d2      	ldr	r2, [r2, #12]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c48:	6892      	ldr	r2, [r2, #8]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c52:	3304      	adds	r3, #4
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d103      	bne.n	8001c60 <xTaskGenericNotify+0x158>
 8001c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	1e5a      	subs	r2, r3, #1
 8001c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6e:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8001c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	2201      	movs	r2, #1
 8001c76:	409a      	lsls	r2, r3
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <xTaskGenericNotify+0x234>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	4a2f      	ldr	r2, [pc, #188]	; (8001d3c <xTaskGenericNotify+0x234>)
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c86:	492e      	ldr	r1, [pc, #184]	; (8001d40 <xTaskGenericNotify+0x238>)
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	3304      	adds	r3, #4
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
 8001c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cac:	3204      	adds	r2, #4
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb2:	1d1a      	adds	r2, r3, #4
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <xTaskGenericNotify+0x238>)
 8001cc6:	441a      	add	r2, r3
 8001cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cca:	615a      	str	r2, [r3, #20]
 8001ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd0:	491b      	ldr	r1, [pc, #108]	; (8001d40 <xTaskGenericNotify+0x238>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	4817      	ldr	r0, [pc, #92]	; (8001d40 <xTaskGenericNotify+0x238>)
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4403      	add	r3, r0
 8001cec:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00a      	beq.n	8001d0c <xTaskGenericNotify+0x204>
        __asm volatile
 8001cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfa:	f383 8811 	msr	BASEPRI, r3
 8001cfe:	f3bf 8f6f 	isb	sy
 8001d02:	f3bf 8f4f 	dsb	sy
 8001d06:	617b      	str	r3, [r7, #20]
    }
 8001d08:	bf00      	nop
 8001d0a:	e7fe      	b.n	8001d0a <xTaskGenericNotify+0x202>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <xTaskGenericNotify+0x23c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d907      	bls.n	8001d2a <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <xTaskGenericNotify+0x240>)
 8001d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	f3bf 8f4f 	dsb	sy
 8001d26:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001d2a:	f000 fc75 	bl	8002618 <vPortExitCritical>

        return xReturn;
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001d30:	4618      	mov	r0, r3
 8001d32:	3738      	adds	r7, #56	; 0x38
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000014c 	.word	0x2000014c
 8001d3c:	20000150 	.word	0x20000150
 8001d40:	20000074 	.word	0x20000074
 8001d44:	20000070 	.word	0x20000070
 8001d48:	e000ed04 	.word	0xe000ed04

08001d4c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001d56:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d5c:	4b35      	ldr	r3, [pc, #212]	; (8001e34 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3304      	adds	r3, #4
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fc20 	bl	80005a8 <uxListRemove>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10b      	bne.n	8001d86 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	2201      	movs	r2, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <prvAddCurrentTaskToDelayedList+0xec>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4013      	ands	r3, r2
 8001d82:	4a2d      	ldr	r2, [pc, #180]	; (8001e38 <prvAddCurrentTaskToDelayedList+0xec>)
 8001d84:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8c:	d124      	bne.n	8001dd8 <prvAddCurrentTaskToDelayedList+0x8c>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d021      	beq.n	8001dd8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	6892      	ldr	r2, [r2, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	3204      	adds	r2, #4
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	1d1a      	adds	r2, r3, #4
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001dc8:	615a      	str	r2, [r3, #20]
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	4a1a      	ldr	r2, [pc, #104]	; (8001e3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001dd6:	e026      	b.n	8001e26 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d209      	bcs.n	8001e04 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7fe fb9a 	bl	8000536 <vListInsert>
}
 8001e02:	e010      	b.n	8001e26 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4610      	mov	r0, r2
 8001e12:	f7fe fb90 	bl	8000536 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d202      	bcs.n	8001e26 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001e20:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6013      	str	r3, [r2, #0]
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000014c 	.word	0x2000014c
 8001e34:	20000070 	.word	0x20000070
 8001e38:	20000150 	.word	0x20000150
 8001e3c:	20000134 	.word	0x20000134
 8001e40:	20000104 	.word	0x20000104
 8001e44:	20000100 	.word	0x20000100
 8001e48:	20000168 	.word	0x20000168

08001e4c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001e56:	f000 fa47 	bl	80022e8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <xTimerCreateTimerTask+0x54>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <xTimerCreateTimerTask+0x58>)
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	2302      	movs	r3, #2
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e70:	490d      	ldr	r1, [pc, #52]	; (8001ea8 <xTimerCreateTimerTask+0x5c>)
 8001e72:	480e      	ldr	r0, [pc, #56]	; (8001eac <xTimerCreateTimerTask+0x60>)
 8001e74:	f7fe feb4 	bl	8000be0 <xTaskCreate>
 8001e78:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10a      	bne.n	8001e96 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e84:	f383 8811 	msr	BASEPRI, r3
 8001e88:	f3bf 8f6f 	isb	sy
 8001e8c:	f3bf 8f4f 	dsb	sy
 8001e90:	603b      	str	r3, [r7, #0]
    }
 8001e92:	bf00      	nop
 8001e94:	e7fe      	b.n	8001e94 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001e96:	687b      	ldr	r3, [r7, #4]
    }
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200001a4 	.word	0x200001a4
 8001ea4:	200001a8 	.word	0x200001a8
 8001ea8:	08004508 	.word	0x08004508
 8001eac:	08001f55 	.word	0x08001f55

08001eb0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001ebc:	e008      	b.n	8001ed0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	18d1      	adds	r1, r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f8dd 	bl	800209c <prvInsertTimerInActiveList>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1ea      	bne.n	8001ebe <prvReloadTimer+0xe>
        }
    }
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <prvProcessExpiredTimer+0x5c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fb4b 	bl	80005a8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f7ff ffc3 	bl	8001eb0 <prvReloadTimer>
 8001f2a:	e008      	b.n	8001f3e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	4798      	blx	r3
    }
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000019c 	.word	0x2000019c

08001f54 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 f857 	bl	8002014 <prvGetNextExpireTime>
 8001f66:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f803 	bl	8001f78 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001f72:	f000 f8d5 	bl	8002120 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001f76:	e7f1      	b.n	8001f5c <prvTimerTask+0x8>

08001f78 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001f82:	f7ff f81d 	bl	8000fc0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f866 	bl	800205c <prvSampleTimeNow>
 8001f90:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d130      	bne.n	8001ffa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10a      	bne.n	8001fb4 <prvProcessTimerOrBlockTask+0x3c>
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d806      	bhi.n	8001fb4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001fa6:	f7ff f819 	bl	8000fdc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001faa:	68f9      	ldr	r1, [r7, #12]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ffa1 	bl	8001ef4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001fb2:	e024      	b.n	8001ffe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <prvProcessTimerOrBlockTask+0x90>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <prvProcessTimerOrBlockTask+0x50>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <prvProcessTimerOrBlockTask+0x52>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <prvProcessTimerOrBlockTask+0x94>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f7fe fdcd 	bl	8000b78 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001fde:	f7fe fffd 	bl	8000fdc <xTaskResumeAll>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10a      	bne.n	8001ffe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <prvProcessTimerOrBlockTask+0x98>)
 8001fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	f3bf 8f6f 	isb	sy
    }
 8001ff8:	e001      	b.n	8001ffe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001ffa:	f7fe ffef 	bl	8000fdc <xTaskResumeAll>
    }
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200001a0 	.word	0x200001a0
 800200c:	200001a4 	.word	0x200001a4
 8002010:	e000ed04 	.word	0xe000ed04

08002014 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <prvGetNextExpireTime+0x44>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <prvGetNextExpireTime+0x16>
 8002026:	2201      	movs	r2, #1
 8002028:	e000      	b.n	800202c <prvGetNextExpireTime+0x18>
 800202a:	2200      	movs	r2, #0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <prvGetNextExpireTime+0x44>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e001      	b.n	8002048 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002048:	68fb      	ldr	r3, [r7, #12]
    }
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000019c 	.word	0x2000019c

0800205c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002064:	f7ff f8b6 	bl	80011d4 <xTaskGetTickCount>
 8002068:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <prvSampleTimeNow+0x3c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d205      	bcs.n	8002080 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002074:	f000 f912 	bl	800229c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e002      	b.n	8002086 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002086:	4a04      	ldr	r2, [pc, #16]	; (8002098 <prvSampleTimeNow+0x3c>)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800208c:	68fb      	ldr	r3, [r7, #12]
    }
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200001ac 	.word	0x200001ac

0800209c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d812      	bhi.n	80020e8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	1ad2      	subs	r2, r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d302      	bcc.n	80020d6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80020d0:	2301      	movs	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e01b      	b.n	800210e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <prvInsertTimerInActiveList+0x7c>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3304      	adds	r3, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f7fe fa28 	bl	8000536 <vListInsert>
 80020e6:	e012      	b.n	800210e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d206      	bcs.n	80020fe <prvInsertTimerInActiveList+0x62>
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d302      	bcc.n	80020fe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80020f8:	2301      	movs	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e007      	b.n	800210e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <prvInsertTimerInActiveList+0x80>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3304      	adds	r3, #4
 8002106:	4619      	mov	r1, r3
 8002108:	4610      	mov	r0, r2
 800210a:	f7fe fa14 	bl	8000536 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800210e:	697b      	ldr	r3, [r7, #20]
    }
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	200001a0 	.word	0x200001a0
 800211c:	2000019c 	.word	0x2000019c

08002120 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002126:	e0a6      	b.n	8002276 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f2c0 80a3 	blt.w	8002276 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	3304      	adds	r3, #4
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fa31 	bl	80005a8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff87 	bl	800205c <prvSampleTimeNow>
 800214e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3b01      	subs	r3, #1
 8002154:	2b08      	cmp	r3, #8
 8002156:	f200 808d 	bhi.w	8002274 <prvProcessReceivedCommands+0x154>
 800215a:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <prvProcessReceivedCommands+0x40>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	08002185 	.word	0x08002185
 8002164:	08002185 	.word	0x08002185
 8002168:	080021ed 	.word	0x080021ed
 800216c:	08002201 	.word	0x08002201
 8002170:	0800224b 	.word	0x0800224b
 8002174:	08002185 	.word	0x08002185
 8002178:	08002185 	.word	0x08002185
 800217c:	080021ed 	.word	0x080021ed
 8002180:	08002201 	.word	0x08002201
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	b2da      	uxtb	r2, r3
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	18d1      	adds	r1, r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	69f8      	ldr	r0, [r7, #28]
 80021a4:	f7ff ff7a 	bl	800209c <prvInsertTimerInActiveList>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d063      	beq.n	8002276 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d009      	beq.n	80021d0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4413      	add	r3, r2
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4619      	mov	r1, r3
 80021c8:	69f8      	ldr	r0, [r7, #28]
 80021ca:	f7ff fe71 	bl	8001eb0 <prvReloadTimer>
 80021ce:	e008      	b.n	80021e2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	69f8      	ldr	r0, [r7, #28]
 80021e8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80021ea:	e044      	b.n	8002276 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021f2:	f023 0301 	bic.w	r3, r3, #1
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80021fe:	e03a      	b.n	8002276 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	b2da      	uxtb	r2, r3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10a      	bne.n	8002236 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8002220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002224:	f383 8811 	msr	BASEPRI, r3
 8002228:	f3bf 8f6f 	isb	sy
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	617b      	str	r3, [r7, #20]
    }
 8002232:	bf00      	nop
 8002234:	e7fe      	b.n	8002234 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	18d1      	adds	r1, r2, r3
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	69f8      	ldr	r0, [r7, #28]
 8002244:	f7ff ff2a 	bl	800209c <prvInsertTimerInActiveList>
                        break;
 8002248:	e015      	b.n	8002276 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d103      	bne.n	8002260 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002258:	69f8      	ldr	r0, [r7, #28]
 800225a:	f000 fb49 	bl	80028f0 <vPortFree>
 800225e:	e00a      	b.n	8002276 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002266:	f023 0301 	bic.w	r3, r3, #1
 800226a:	b2da      	uxtb	r2, r3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002272:	e000      	b.n	8002276 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002274:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <prvProcessReceivedCommands+0x178>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f107 0108 	add.w	r1, r7, #8
 800227e:	2200      	movs	r2, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fabd 	bl	8000800 <xQueueReceive>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	f47f af4d 	bne.w	8002128 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800228e:	bf00      	nop
 8002290:	bf00      	nop
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200001a4 	.word	0x200001a4

0800229c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80022a2:	e009      	b.n	80022b8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <prvSwitchTimerLists+0x44>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80022ae:	f04f 31ff 	mov.w	r1, #4294967295
 80022b2:	6838      	ldr	r0, [r7, #0]
 80022b4:	f7ff fe1e 	bl	8001ef4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <prvSwitchTimerLists+0x44>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <prvSwitchTimerLists+0x44>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <prvSwitchTimerLists+0x48>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <prvSwitchTimerLists+0x44>)
 80022ce:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <prvSwitchTimerLists+0x48>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6013      	str	r3, [r2, #0]
    }
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2000019c 	.word	0x2000019c
 80022e4:	200001a0 	.word	0x200001a0

080022e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80022ec:	f000 f964 	bl	80025b8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <prvCheckForValidListAndQueue+0x54>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d11d      	bne.n	8002334 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80022f8:	4811      	ldr	r0, [pc, #68]	; (8002340 <prvCheckForValidListAndQueue+0x58>)
 80022fa:	f7fe f8ef 	bl	80004dc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80022fe:	4811      	ldr	r0, [pc, #68]	; (8002344 <prvCheckForValidListAndQueue+0x5c>)
 8002300:	f7fe f8ec 	bl	80004dc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002304:	4b10      	ldr	r3, [pc, #64]	; (8002348 <prvCheckForValidListAndQueue+0x60>)
 8002306:	4a0e      	ldr	r2, [pc, #56]	; (8002340 <prvCheckForValidListAndQueue+0x58>)
 8002308:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <prvCheckForValidListAndQueue+0x64>)
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <prvCheckForValidListAndQueue+0x5c>)
 800230e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002310:	2200      	movs	r2, #0
 8002312:	210c      	movs	r1, #12
 8002314:	200a      	movs	r0, #10
 8002316:	f7fe fa01 	bl	800071c <xQueueGenericCreate>
 800231a:	4603      	mov	r3, r0
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <prvCheckForValidListAndQueue+0x54>)
 800231e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <prvCheckForValidListAndQueue+0x54>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <prvCheckForValidListAndQueue+0x54>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4908      	ldr	r1, [pc, #32]	; (8002350 <prvCheckForValidListAndQueue+0x68>)
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fbd4 	bl	8000adc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002334:	f000 f970 	bl	8002618 <vPortExitCritical>
    }
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	200001a4 	.word	0x200001a4
 8002340:	20000174 	.word	0x20000174
 8002344:	20000188 	.word	0x20000188
 8002348:	2000019c 	.word	0x2000019c
 800234c:	200001a0 	.word	0x200001a0
 8002350:	08004510 	.word	0x08004510

08002354 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3b04      	subs	r3, #4
 8002364:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800236c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3b04      	subs	r3, #4
 8002372:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f023 0201 	bic.w	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3b04      	subs	r3, #4
 8002382:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002384:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <pxPortInitialiseStack+0x64>)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3b14      	subs	r3, #20
 800238e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3b04      	subs	r3, #4
 800239a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f06f 0202 	mvn.w	r2, #2
 80023a2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3b20      	subs	r3, #32
 80023a8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	080023bd 	.word	0x080023bd

080023bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <prvTaskExitError+0x54>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ce:	d00a      	beq.n	80023e6 <prvTaskExitError+0x2a>
        __asm volatile
 80023d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
 80023e0:	60fb      	str	r3, [r7, #12]
    }
 80023e2:	bf00      	nop
 80023e4:	e7fe      	b.n	80023e4 <prvTaskExitError+0x28>
        __asm volatile
 80023e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ea:	f383 8811 	msr	BASEPRI, r3
 80023ee:	f3bf 8f6f 	isb	sy
 80023f2:	f3bf 8f4f 	dsb	sy
 80023f6:	60bb      	str	r3, [r7, #8]
    }
 80023f8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80023fa:	bf00      	nop
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0fc      	beq.n	80023fc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002402:	bf00      	nop
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	20000004 	.word	0x20000004
	...

08002420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <pxCurrentTCBConst2>)
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	6808      	ldr	r0, [r1, #0]
 8002426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800242a:	f380 8809 	msr	PSP, r0
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f380 8811 	msr	BASEPRI, r0
 800243a:	4770      	bx	lr
 800243c:	f3af 8000 	nop.w

08002440 <pxCurrentTCBConst2>:
 8002440:	20000070 	.word	0x20000070
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop

08002448 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002448:	4808      	ldr	r0, [pc, #32]	; (800246c <prvPortStartFirstTask+0x24>)
 800244a:	6800      	ldr	r0, [r0, #0]
 800244c:	6800      	ldr	r0, [r0, #0]
 800244e:	f380 8808 	msr	MSP, r0
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f380 8814 	msr	CONTROL, r0
 800245a:	b662      	cpsie	i
 800245c:	b661      	cpsie	f
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	f3bf 8f6f 	isb	sy
 8002466:	df00      	svc	0
 8002468:	bf00      	nop
 800246a:	0000      	.short	0x0000
 800246c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop

08002474 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800247a:	4b46      	ldr	r3, [pc, #280]	; (8002594 <xPortStartScheduler+0x120>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a46      	ldr	r2, [pc, #280]	; (8002598 <xPortStartScheduler+0x124>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10a      	bne.n	800249a <xPortStartScheduler+0x26>
        __asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	613b      	str	r3, [r7, #16]
    }
 8002496:	bf00      	nop
 8002498:	e7fe      	b.n	8002498 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800249a:	4b3e      	ldr	r3, [pc, #248]	; (8002594 <xPortStartScheduler+0x120>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a3f      	ldr	r2, [pc, #252]	; (800259c <xPortStartScheduler+0x128>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d10a      	bne.n	80024ba <xPortStartScheduler+0x46>
        __asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	60fb      	str	r3, [r7, #12]
    }
 80024b6:	bf00      	nop
 80024b8:	e7fe      	b.n	80024b8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80024ba:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <xPortStartScheduler+0x12c>)
 80024bc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	22ff      	movs	r2, #255	; 0xff
 80024ca:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <xPortStartScheduler+0x130>)
 80024e0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <xPortStartScheduler+0x134>)
 80024e4:	2207      	movs	r2, #7
 80024e6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024e8:	e009      	b.n	80024fe <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80024ea:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <xPortStartScheduler+0x134>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	4a2d      	ldr	r2, [pc, #180]	; (80025a8 <xPortStartScheduler+0x134>)
 80024f2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	2b80      	cmp	r3, #128	; 0x80
 8002508:	d0ef      	beq.n	80024ea <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800250a:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <xPortStartScheduler+0x134>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	2b04      	cmp	r3, #4
 8002514:	d00a      	beq.n	800252c <xPortStartScheduler+0xb8>
        __asm volatile
 8002516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	60bb      	str	r3, [r7, #8]
    }
 8002528:	bf00      	nop
 800252a:	e7fe      	b.n	800252a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <xPortStartScheduler+0x134>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <xPortStartScheduler+0x134>)
 8002534:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <xPortStartScheduler+0x134>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800253e:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <xPortStartScheduler+0x134>)
 8002540:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <xPortStartScheduler+0x138>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a17      	ldr	r2, [pc, #92]	; (80025ac <xPortStartScheduler+0x138>)
 8002550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002554:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <xPortStartScheduler+0x138>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <xPortStartScheduler+0x138>)
 800255c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002560:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002562:	f000 f8db 	bl	800271c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <xPortStartScheduler+0x13c>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800256c:	f000 f8fa 	bl	8002764 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <xPortStartScheduler+0x140>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <xPortStartScheduler+0x140>)
 8002576:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800257a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800257c:	f7ff ff64 	bl	8002448 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002580:	f7fe ff4e 	bl	8001420 <vTaskSwitchContext>
    prvTaskExitError();
 8002584:	f7ff ff1a 	bl	80023bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	410fc271 	.word	0x410fc271
 800259c:	410fc270 	.word	0x410fc270
 80025a0:	e000e400 	.word	0xe000e400
 80025a4:	200001b0 	.word	0x200001b0
 80025a8:	200001b4 	.word	0x200001b4
 80025ac:	e000ed20 	.word	0xe000ed20
 80025b0:	20000004 	.word	0x20000004
 80025b4:	e000ef34 	.word	0xe000ef34

080025b8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
        __asm volatile
 80025be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	607b      	str	r3, [r7, #4]
    }
 80025d0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80025d2:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <vPortEnterCritical+0x58>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <vPortEnterCritical+0x58>)
 80025da:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <vPortEnterCritical+0x58>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d10f      	bne.n	8002604 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <vPortEnterCritical+0x5c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <vPortEnterCritical+0x4c>
        __asm volatile
 80025ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f2:	f383 8811 	msr	BASEPRI, r3
 80025f6:	f3bf 8f6f 	isb	sy
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	603b      	str	r3, [r7, #0]
    }
 8002600:	bf00      	nop
 8002602:	e7fe      	b.n	8002602 <vPortEnterCritical+0x4a>
    }
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	20000004 	.word	0x20000004
 8002614:	e000ed04 	.word	0xe000ed04

08002618 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <vPortExitCritical+0x50>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10a      	bne.n	800263c <vPortExitCritical+0x24>
        __asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	607b      	str	r3, [r7, #4]
    }
 8002638:	bf00      	nop
 800263a:	e7fe      	b.n	800263a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <vPortExitCritical+0x50>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3b01      	subs	r3, #1
 8002642:	4a09      	ldr	r2, [pc, #36]	; (8002668 <vPortExitCritical+0x50>)
 8002644:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <vPortExitCritical+0x50>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <vPortExitCritical+0x42>
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002658:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000004 	.word	0x20000004
 800266c:	00000000 	.word	0x00000000

08002670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002670:	f3ef 8009 	mrs	r0, PSP
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <pxCurrentTCBConst>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	f01e 0f10 	tst.w	lr, #16
 8002680:	bf08      	it	eq
 8002682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800268a:	6010      	str	r0, [r2, #0]
 800268c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002694:	f380 8811 	msr	BASEPRI, r0
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f7fe febe 	bl	8001420 <vTaskSwitchContext>
 80026a4:	f04f 0000 	mov.w	r0, #0
 80026a8:	f380 8811 	msr	BASEPRI, r0
 80026ac:	bc09      	pop	{r0, r3}
 80026ae:	6819      	ldr	r1, [r3, #0]
 80026b0:	6808      	ldr	r0, [r1, #0]
 80026b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b6:	f01e 0f10 	tst.w	lr, #16
 80026ba:	bf08      	it	eq
 80026bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80026c0:	f380 8809 	msr	PSP, r0
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	f3af 8000 	nop.w

080026d0 <pxCurrentTCBConst>:
 80026d0:	20000070 	.word	0x20000070
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop

080026d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
        __asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	607b      	str	r3, [r7, #4]
    }
 80026f0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80026f2:	f7fe fd7f 	bl	80011f4 <xTaskIncrementTick>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <SysTick_Handler+0x40>)
 80026fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	2300      	movs	r3, #0
 8002706:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f383 8811 	msr	BASEPRI, r3
    }
 800270e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	e000ed04 	.word	0xe000ed04

0800271c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <vPortSetupTimerInterrupt+0x34>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <vPortSetupTimerInterrupt+0x38>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <vPortSetupTimerInterrupt+0x3c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <vPortSetupTimerInterrupt+0x40>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	099b      	lsrs	r3, r3, #6
 8002738:	4a09      	ldr	r2, [pc, #36]	; (8002760 <vPortSetupTimerInterrupt+0x44>)
 800273a:	3b01      	subs	r3, #1
 800273c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800273e:	4b04      	ldr	r3, [pc, #16]	; (8002750 <vPortSetupTimerInterrupt+0x34>)
 8002740:	2207      	movs	r2, #7
 8002742:	601a      	str	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000e010 	.word	0xe000e010
 8002754:	e000e018 	.word	0xe000e018
 8002758:	20000008 	.word	0x20000008
 800275c:	10624dd3 	.word	0x10624dd3
 8002760:	e000e014 	.word	0xe000e014

08002764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002774 <vPortEnableVFP+0x10>
 8002768:	6801      	ldr	r1, [r0, #0]
 800276a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800276e:	6001      	str	r1, [r0, #0]
 8002770:	4770      	bx	lr
 8002772:	0000      	.short	0x0000
 8002774:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop

0800277c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002788:	f7fe fc1a 	bl	8000fc0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800278c:	4b53      	ldr	r3, [pc, #332]	; (80028dc <pvPortMalloc+0x160>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002794:	f000 f908 	bl	80029a8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d012      	beq.n	80027c4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800279e:	2208      	movs	r2, #8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	3308      	adds	r3, #8
 80027aa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d804      	bhi.n	80027c0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	e001      	b.n	80027c4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	db70      	blt.n	80028ac <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d06d      	beq.n	80028ac <pvPortMalloc+0x130>
 80027d0:	4b43      	ldr	r3, [pc, #268]	; (80028e0 <pvPortMalloc+0x164>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d868      	bhi.n	80028ac <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80027da:	4b42      	ldr	r3, [pc, #264]	; (80028e4 <pvPortMalloc+0x168>)
 80027dc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <pvPortMalloc+0x168>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027e4:	e004      	b.n	80027f0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d903      	bls.n	8002802 <pvPortMalloc+0x86>
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f1      	bne.n	80027e6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002802:	4b36      	ldr	r3, [pc, #216]	; (80028dc <pvPortMalloc+0x160>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	429a      	cmp	r2, r3
 800280a:	d04f      	beq.n	80028ac <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2208      	movs	r2, #8
 8002812:	4413      	add	r3, r2
 8002814:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	1ad2      	subs	r2, r2, r3
 8002826:	2308      	movs	r3, #8
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	429a      	cmp	r2, r3
 800282c:	d91f      	bls.n	800286e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <pvPortMalloc+0xda>
        __asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	613b      	str	r3, [r7, #16]
    }
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	1ad2      	subs	r2, r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002868:	6978      	ldr	r0, [r7, #20]
 800286a:	f000 f8f9 	bl	8002a60 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <pvPortMalloc+0x164>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <pvPortMalloc+0x164>)
 800287a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <pvPortMalloc+0x164>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <pvPortMalloc+0x16c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d203      	bcs.n	8002890 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <pvPortMalloc+0x164>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <pvPortMalloc+0x16c>)
 800288e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <pvPortMalloc+0x170>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	4a10      	ldr	r2, [pc, #64]	; (80028ec <pvPortMalloc+0x170>)
 80028aa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80028ac:	f7fe fb96 	bl	8000fdc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <pvPortMalloc+0x154>
        __asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	60fb      	str	r3, [r7, #12]
    }
 80028cc:	bf00      	nop
 80028ce:	e7fe      	b.n	80028ce <pvPortMalloc+0x152>
    return pvReturn;
 80028d0:	69fb      	ldr	r3, [r7, #28]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3728      	adds	r7, #40	; 0x28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20012dc0 	.word	0x20012dc0
 80028e0:	20012dc4 	.word	0x20012dc4
 80028e4:	20012db8 	.word	0x20012db8
 80028e8:	20012dc8 	.word	0x20012dc8
 80028ec:	20012dcc 	.word	0x20012dcc

080028f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d049      	beq.n	8002996 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002902:	2308      	movs	r3, #8
 8002904:	425b      	negs	r3, r3
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4413      	add	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	db0a      	blt.n	800292e <vPortFree+0x3e>
        __asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	60fb      	str	r3, [r7, #12]
    }
 800292a:	bf00      	nop
 800292c:	e7fe      	b.n	800292c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <vPortFree+0x5c>
        __asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	60bb      	str	r3, [r7, #8]
    }
 8002948:	bf00      	nop
 800294a:	e7fe      	b.n	800294a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	0fdb      	lsrs	r3, r3, #31
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01c      	beq.n	8002996 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d118      	bne.n	8002996 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002970:	f7fe fb26 	bl	8000fc0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <vPortFree+0xb0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4413      	add	r3, r2
 800297e:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <vPortFree+0xb0>)
 8002980:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002982:	6938      	ldr	r0, [r7, #16]
 8002984:	f000 f86c 	bl	8002a60 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <vPortFree+0xb4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <vPortFree+0xb4>)
 8002990:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002992:	f7fe fb23 	bl	8000fdc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20012dc4 	.word	0x20012dc4
 80029a4:	20012dd0 	.word	0x20012dd0

080029a8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029ae:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80029b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <prvHeapInit+0xa4>)
 80029b6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00c      	beq.n	80029dc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3307      	adds	r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0307 	bic.w	r3, r3, #7
 80029ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	4a1d      	ldr	r2, [pc, #116]	; (8002a4c <prvHeapInit+0xa4>)
 80029d8:	4413      	add	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029e0:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <prvHeapInit+0xa8>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <prvHeapInit+0xa8>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	4413      	add	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80029f4:	2208      	movs	r2, #8
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0307 	bic.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <prvHeapInit+0xac>)
 8002a08:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <prvHeapInit+0xac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <prvHeapInit+0xac>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	1ad2      	subs	r2, r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <prvHeapInit+0xac>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <prvHeapInit+0xb0>)
 8002a36:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <prvHeapInit+0xb4>)
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	200001b8 	.word	0x200001b8
 8002a50:	20012db8 	.word	0x20012db8
 8002a54:	20012dc0 	.word	0x20012dc0
 8002a58:	20012dc8 	.word	0x20012dc8
 8002a5c:	20012dc4 	.word	0x20012dc4

08002a60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a68:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <prvInsertBlockIntoFreeList+0xac>)
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e002      	b.n	8002a74 <prvInsertBlockIntoFreeList+0x14>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d8f7      	bhi.n	8002a6e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	4413      	add	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d108      	bne.n	8002aa2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	441a      	add	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	441a      	add	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d118      	bne.n	8002ae8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <prvInsertBlockIntoFreeList+0xb0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d00d      	beq.n	8002ade <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	441a      	add	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e008      	b.n	8002af0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <prvInsertBlockIntoFreeList+0xb0>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e003      	b.n	8002af0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d002      	beq.n	8002afe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20012db8 	.word	0x20012db8
 8002b10:	20012dc0 	.word	0x20012dc0

08002b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b1a:	f000 faa5 	bl	8003068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b1e:	f000 f889 	bl	8002c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b22:	f000 f8e3 	bl	8002cec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-12", 200, "Hello world from Task-1", 1, &task1_handle);
 8002b26:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <main+0xe0>)
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4b32      	ldr	r3, [pc, #200]	; (8002bf8 <main+0xe4>)
 8002b30:	22c8      	movs	r2, #200	; 0xc8
 8002b32:	4932      	ldr	r1, [pc, #200]	; (8002bfc <main+0xe8>)
 8002b34:	4832      	ldr	r0, [pc, #200]	; (8002c00 <main+0xec>)
 8002b36:	f7fe f853 	bl	8000be0 <xTaskCreate>
 8002b3a:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d00a      	beq.n	8002b58 <main+0x44>
        __asm volatile
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	613b      	str	r3, [r7, #16]
    }
 8002b54:	bf00      	nop
 8002b56:	e7fe      	b.n	8002b56 <main+0x42>

  status = xTaskCreate(task2_handler, "Task-13", 200, "Hello world from Task-2", 2, &task2_handle);
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <main+0xf0>)
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <main+0xf4>)
 8002b62:	22c8      	movs	r2, #200	; 0xc8
 8002b64:	4929      	ldr	r1, [pc, #164]	; (8002c0c <main+0xf8>)
 8002b66:	482a      	ldr	r0, [pc, #168]	; (8002c10 <main+0xfc>)
 8002b68:	f7fe f83a 	bl	8000be0 <xTaskCreate>
 8002b6c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d00a      	beq.n	8002b8a <main+0x76>
        __asm volatile
 8002b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	60fb      	str	r3, [r7, #12]
    }
 8002b86:	bf00      	nop
 8002b88:	e7fe      	b.n	8002b88 <main+0x74>

  status = xTaskCreate(task3_handler, "Task-14", 200, "Hello world from Task-3", 3, &task3_handle);
 8002b8a:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <main+0x100>)
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	2303      	movs	r3, #3
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <main+0x104>)
 8002b94:	22c8      	movs	r2, #200	; 0xc8
 8002b96:	4921      	ldr	r1, [pc, #132]	; (8002c1c <main+0x108>)
 8002b98:	4821      	ldr	r0, [pc, #132]	; (8002c20 <main+0x10c>)
 8002b9a:	f7fe f821 	bl	8000be0 <xTaskCreate>
 8002b9e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d00a      	beq.n	8002bbc <main+0xa8>
        __asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	60bb      	str	r3, [r7, #8]
    }
 8002bb8:	bf00      	nop
 8002bba:	e7fe      	b.n	8002bba <main+0xa6>

  status = xTaskCreate(task4_handler, "Task-15", 200, "Hello world from Task-4", 4, &task4_handle);
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <main+0x110>)
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <main+0x114>)
 8002bc6:	22c8      	movs	r2, #200	; 0xc8
 8002bc8:	4918      	ldr	r1, [pc, #96]	; (8002c2c <main+0x118>)
 8002bca:	4819      	ldr	r0, [pc, #100]	; (8002c30 <main+0x11c>)
 8002bcc:	f7fe f808 	bl	8000be0 <xTaskCreate>
 8002bd0:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d00a      	beq.n	8002bee <main+0xda>
        __asm volatile
 8002bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	607b      	str	r3, [r7, #4]
    }
 8002bea:	bf00      	nop
 8002bec:	e7fe      	b.n	8002bec <main+0xd8>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8002bee:	f7fe f995 	bl	8000f1c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bf2:	e7fe      	b.n	8002bf2 <main+0xde>
 8002bf4:	20012dd4 	.word	0x20012dd4
 8002bf8:	08004518 	.word	0x08004518
 8002bfc:	08004530 	.word	0x08004530
 8002c00:	08002d91 	.word	0x08002d91
 8002c04:	20012dd8 	.word	0x20012dd8
 8002c08:	08004538 	.word	0x08004538
 8002c0c:	08004550 	.word	0x08004550
 8002c10:	08002db1 	.word	0x08002db1
 8002c14:	20012ddc 	.word	0x20012ddc
 8002c18:	08004558 	.word	0x08004558
 8002c1c:	08004570 	.word	0x08004570
 8002c20:	08002dd1 	.word	0x08002dd1
 8002c24:	20012de0 	.word	0x20012de0
 8002c28:	08004578 	.word	0x08004578
 8002c2c:	08004590 	.word	0x08004590
 8002c30:	08002e09 	.word	0x08002e09

08002c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b094      	sub	sp, #80	; 0x50
 8002c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c3a:	f107 0320 	add.w	r3, r7, #32
 8002c3e:	2230      	movs	r2, #48	; 0x30
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 fc16 	bl	8004474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c48:	f107 030c 	add.w	r3, r7, #12
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <SystemClock_Config+0xb0>)
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <SystemClock_Config+0xb0>)
 8002c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c66:	6413      	str	r3, [r2, #64]	; 0x40
 8002c68:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <SystemClock_Config+0xb0>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c74:	2300      	movs	r3, #0
 8002c76:	607b      	str	r3, [r7, #4]
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <SystemClock_Config+0xb4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <SystemClock_Config+0xb4>)
 8002c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <SystemClock_Config+0xb4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c9e:	f107 0320 	add.w	r3, r7, #32
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fcbc 	bl	8003620 <HAL_RCC_OscConfig>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002cae:	f000 f8df 	bl	8002e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cb2:	230f      	movs	r3, #15
 8002cb4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cc6:	f107 030c 	add.w	r3, r7, #12
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 ff1f 	bl	8003b10 <HAL_RCC_ClockConfig>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002cd8:	f000 f8ca 	bl	8002e70 <Error_Handler>
  }
}
 8002cdc:	bf00      	nop
 8002cde:	3750      	adds	r7, #80	; 0x50
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40007000 	.word	0x40007000

08002cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf2:	f107 030c 	add.w	r3, r7, #12
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <MX_GPIO_Init+0x9c>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a1f      	ldr	r2, [pc, #124]	; (8002d88 <MX_GPIO_Init+0x9c>)
 8002d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <MX_GPIO_Init+0x9c>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	607b      	str	r3, [r7, #4]
 8002d22:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <MX_GPIO_Init+0x9c>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <MX_GPIO_Init+0x9c>)
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <MX_GPIO_Init+0x9c>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	607b      	str	r3, [r7, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <MX_GPIO_Init+0x9c>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <MX_GPIO_Init+0x9c>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <MX_GPIO_Init+0x9c>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002d56:	2200      	movs	r2, #0
 8002d58:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002d5c:	480b      	ldr	r0, [pc, #44]	; (8002d8c <MX_GPIO_Init+0xa0>)
 8002d5e:	f000 fc2b 	bl	80035b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d62:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d74:	f107 030c 	add.w	r3, r7, #12
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4804      	ldr	r0, [pc, #16]	; (8002d8c <MX_GPIO_Init+0xa0>)
 8002d7c:	f000 fa98 	bl	80032b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d80:	bf00      	nop
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020c00 	.word	0x40020c00

08002d90 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

	while(1)
	{

HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002d98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d9c:	4803      	ldr	r0, [pc, #12]	; (8002dac <task1_handler+0x1c>)
 8002d9e:	f000 fc24 	bl	80035ea <HAL_GPIO_TogglePin>
vTaskDelay(200);
 8002da2:	20c8      	movs	r0, #200	; 0xc8
 8002da4:	f7fe f886 	bl	8000eb4 <vTaskDelay>
HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002da8:	e7f6      	b.n	8002d98 <task1_handler+0x8>
 8002daa:	bf00      	nop
 8002dac:	40020c00 	.word	0x40020c00

08002db0 <task2_handler>:
	}
}
static void task2_handler(void* parameters)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dbc:	4803      	ldr	r0, [pc, #12]	; (8002dcc <task2_handler+0x1c>)
 8002dbe:	f000 fc14 	bl	80035ea <HAL_GPIO_TogglePin>
		vTaskDelay(400);
 8002dc2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002dc6:	f7fe f875 	bl	8000eb4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8002dca:	e7f5      	b.n	8002db8 <task2_handler+0x8>
 8002dcc:	40020c00 	.word	0x40020c00

08002dd0 <task3_handler>:
	}
}
static void task3_handler(void* parameters)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002dd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ddc:	4808      	ldr	r0, [pc, #32]	; (8002e00 <task3_handler+0x30>)
 8002dde:	f000 fc04 	bl	80035ea <HAL_GPIO_TogglePin>
		vTaskDelay(2000);
 8002de2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002de6:	f7fe f865 	bl	8000eb4 <vTaskDelay>
		xTaskNotify(task4_handle,4,eSetValueWithOverwrite);
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <task3_handler+0x34>)
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	2300      	movs	r3, #0
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	2303      	movs	r3, #3
 8002df4:	2204      	movs	r2, #4
 8002df6:	2100      	movs	r1, #0
 8002df8:	f7fe fe86 	bl	8001b08 <xTaskGenericNotify>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8002dfc:	e7ec      	b.n	8002dd8 <task3_handler+0x8>
 8002dfe:	bf00      	nop
 8002e00:	40020c00 	.word	0x40020c00
 8002e04:	20012de0 	.word	0x20012de0

08002e08 <task4_handler>:
	}
}
static void task4_handler(void* parameters)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	6078      	str	r0, [r7, #4]
	uint32_t ret;
	BaseType_t a = 2;
 8002e10:	2302      	movs	r3, #2
 8002e12:	60fb      	str	r3, [r7, #12]
	while(1)
	{

		if(a==2)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d10a      	bne.n	8002e30 <task4_handler+0x28>
		{
			a= xTaskNotifyWait(0,0,&ret,10000);
 8002e1a:	f107 0308 	add.w	r3, r7, #8
 8002e1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e22:	9200      	str	r2, [sp, #0]
 8002e24:	2200      	movs	r2, #0
 8002e26:	2100      	movs	r1, #0
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7fe fded 	bl	8001a08 <xTaskGenericNotifyWait>
 8002e2e:	60f8      	str	r0, [r7, #12]
		}

		if(ret == 4)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d1ee      	bne.n	8002e14 <task4_handler+0xc>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e3a:	4803      	ldr	r0, [pc, #12]	; (8002e48 <task4_handler+0x40>)
 8002e3c:	f000 fbd5 	bl	80035ea <HAL_GPIO_TogglePin>
			vTaskDelay(200);
 8002e40:	20c8      	movs	r0, #200	; 0xc8
 8002e42:	f7fe f837 	bl	8000eb4 <vTaskDelay>
		if(a==2)
 8002e46:	e7e5      	b.n	8002e14 <task4_handler+0xc>
 8002e48:	40020c00 	.word	0x40020c00

08002e4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e5e:	f000 f925 	bl	80030ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40010000 	.word	0x40010000

08002e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e74:	b672      	cpsid	i
}
 8002e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <Error_Handler+0x8>
	...

08002e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_MspInit+0x4c>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	4a0f      	ldr	r2, [pc, #60]	; (8002ec8 <HAL_MspInit+0x4c>)
 8002e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e90:	6453      	str	r3, [r2, #68]	; 0x44
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <HAL_MspInit+0x4c>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_MspInit+0x4c>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	4a08      	ldr	r2, [pc, #32]	; (8002ec8 <HAL_MspInit+0x4c>)
 8002ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_MspInit+0x4c>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800

08002ecc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08c      	sub	sp, #48	; 0x30
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002edc:	2300      	movs	r3, #0
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <HAL_InitTick+0xd0>)
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee4:	4a2d      	ldr	r2, [pc, #180]	; (8002f9c <HAL_InitTick+0xd0>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6453      	str	r3, [r2, #68]	; 0x44
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <HAL_InitTick+0xd0>)
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ef8:	f107 020c 	add.w	r2, r7, #12
 8002efc:	f107 0310 	add.w	r3, r7, #16
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 f810 	bl	8003f28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002f08:	f000 fffa 	bl	8003f00 <HAL_RCC_GetPCLK2Freq>
 8002f0c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	4a23      	ldr	r2, [pc, #140]	; (8002fa0 <HAL_InitTick+0xd4>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	0c9b      	lsrs	r3, r3, #18
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002f1c:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <HAL_InitTick+0xd8>)
 8002f1e:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <HAL_InitTick+0xdc>)
 8002f20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002f22:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_InitTick+0xd8>)
 8002f24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f28:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_InitTick+0xd8>)
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002f30:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <HAL_InitTick+0xd8>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_InitTick+0xd8>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_InitTick+0xd8>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002f42:	4818      	ldr	r0, [pc, #96]	; (8002fa4 <HAL_InitTick+0xd8>)
 8002f44:	f001 f822 	bl	8003f8c <HAL_TIM_Base_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11b      	bne.n	8002f8e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002f56:	4813      	ldr	r0, [pc, #76]	; (8002fa4 <HAL_InitTick+0xd8>)
 8002f58:	f001 f872 	bl	8004040 <HAL_TIM_Base_Start_IT>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d111      	bne.n	8002f8e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f6a:	2019      	movs	r0, #25
 8002f6c:	f000 f992 	bl	8003294 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b0f      	cmp	r3, #15
 8002f74:	d808      	bhi.n	8002f88 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002f76:	2200      	movs	r2, #0
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	2019      	movs	r0, #25
 8002f7c:	f000 f96e 	bl	800325c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <HAL_InitTick+0xe0>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e002      	b.n	8002f8e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3730      	adds	r7, #48	; 0x30
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	431bde83 	.word	0x431bde83
 8002fa4:	20012de4 	.word	0x20012de4
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	2000000c 	.word	0x2000000c

08002fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fb4:	e7fe      	b.n	8002fb4 <NMI_Handler+0x4>

08002fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fba:	e7fe      	b.n	8002fba <HardFault_Handler+0x4>

08002fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fc0:	e7fe      	b.n	8002fc0 <MemManage_Handler+0x4>

08002fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fc6:	e7fe      	b.n	8002fc6 <BusFault_Handler+0x4>

08002fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fcc:	e7fe      	b.n	8002fcc <UsageFault_Handler+0x4>

08002fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fe0:	4802      	ldr	r0, [pc, #8]	; (8002fec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002fe2:	f001 f88f 	bl	8004104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20012de4 	.word	0x20012de4

08002ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <SystemInit+0x20>)
 8002ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffa:	4a05      	ldr	r2, [pc, #20]	; (8003010 <SystemInit+0x20>)
 8002ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800304c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003018:	f7ff ffea 	bl	8002ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800301c:	480c      	ldr	r0, [pc, #48]	; (8003050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800301e:	490d      	ldr	r1, [pc, #52]	; (8003054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003020:	4a0d      	ldr	r2, [pc, #52]	; (8003058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003024:	e002      	b.n	800302c <LoopCopyDataInit>

08003026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800302a:	3304      	adds	r3, #4

0800302c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800302c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800302e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003030:	d3f9      	bcc.n	8003026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003032:	4a0a      	ldr	r2, [pc, #40]	; (800305c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003034:	4c0a      	ldr	r4, [pc, #40]	; (8003060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003038:	e001      	b.n	800303e <LoopFillZerobss>

0800303a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800303a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800303c:	3204      	adds	r2, #4

0800303e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800303e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003040:	d3fb      	bcc.n	800303a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003042:	f001 fa1f 	bl	8004484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003046:	f7ff fd65 	bl	8002b14 <main>
  bx  lr    
 800304a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800304c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003054:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8003058:	080045c0 	.word	0x080045c0
  ldr r2, =_sbss
 800305c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8003060:	20012e30 	.word	0x20012e30

08003064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003064:	e7fe      	b.n	8003064 <ADC_IRQHandler>
	...

08003068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800306c:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <HAL_Init+0x40>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0d      	ldr	r2, [pc, #52]	; (80030a8 <HAL_Init+0x40>)
 8003072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_Init+0x40>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <HAL_Init+0x40>)
 800307e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_Init+0x40>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <HAL_Init+0x40>)
 800308a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003090:	2003      	movs	r0, #3
 8003092:	f000 f8d8 	bl	8003246 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003096:	200f      	movs	r0, #15
 8003098:	f7ff ff18 	bl	8002ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800309c:	f7ff feee 	bl	8002e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023c00 	.word	0x40023c00

080030ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_IncTick+0x20>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_IncTick+0x24>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <HAL_IncTick+0x24>)
 80030be:	6013      	str	r3, [r2, #0]
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000010 	.word	0x20000010
 80030d0:	20012e2c 	.word	0x20012e2c

080030d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return uwTick;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_GetTick+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20012e2c 	.word	0x20012e2c

080030ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003108:	4013      	ands	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	60d3      	str	r3, [r2, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <__NVIC_GetPriorityGrouping+0x18>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 0307 	and.w	r3, r3, #7
}
 8003142:	4618      	mov	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	2b00      	cmp	r3, #0
 8003160:	db0b      	blt.n	800317a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	f003 021f 	and.w	r2, r3, #31
 8003168:	4907      	ldr	r1, [pc, #28]	; (8003188 <__NVIC_EnableIRQ+0x38>)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2001      	movs	r0, #1
 8003172:	fa00 f202 	lsl.w	r2, r0, r2
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000e100 	.word	0xe000e100

0800318c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	2b00      	cmp	r3, #0
 800319e:	db0a      	blt.n	80031b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	490c      	ldr	r1, [pc, #48]	; (80031d8 <__NVIC_SetPriority+0x4c>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	440b      	add	r3, r1
 80031b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b4:	e00a      	b.n	80031cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4908      	ldr	r1, [pc, #32]	; (80031dc <__NVIC_SetPriority+0x50>)
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	3b04      	subs	r3, #4
 80031c4:	0112      	lsls	r2, r2, #4
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	440b      	add	r3, r1
 80031ca:	761a      	strb	r2, [r3, #24]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000e100 	.word	0xe000e100
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f1c3 0307 	rsb	r3, r3, #7
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	bf28      	it	cs
 80031fe:	2304      	movcs	r3, #4
 8003200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3304      	adds	r3, #4
 8003206:	2b06      	cmp	r3, #6
 8003208:	d902      	bls.n	8003210 <NVIC_EncodePriority+0x30>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3b03      	subs	r3, #3
 800320e:	e000      	b.n	8003212 <NVIC_EncodePriority+0x32>
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	f04f 32ff 	mov.w	r2, #4294967295
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	401a      	ands	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003228:	f04f 31ff 	mov.w	r1, #4294967295
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43d9      	mvns	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	4313      	orrs	r3, r2
         );
}
 800323a:	4618      	mov	r0, r3
 800323c:	3724      	adds	r7, #36	; 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ff4c 	bl	80030ec <__NVIC_SetPriorityGrouping>
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800326e:	f7ff ff61 	bl	8003134 <__NVIC_GetPriorityGrouping>
 8003272:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	6978      	ldr	r0, [r7, #20]
 800327a:	f7ff ffb1 	bl	80031e0 <NVIC_EncodePriority>
 800327e:	4602      	mov	r2, r0
 8003280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff80 	bl	800318c <__NVIC_SetPriority>
}
 800328c:	bf00      	nop
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff ff54 	bl	8003150 <__NVIC_EnableIRQ>
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b089      	sub	sp, #36	; 0x24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	e159      	b.n	8003580 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032cc:	2201      	movs	r2, #1
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	f040 8148 	bne.w	800357a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d005      	beq.n	8003302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d130      	bne.n	8003364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	2203      	movs	r2, #3
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003338:	2201      	movs	r2, #1
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 0201 	and.w	r2, r3, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b03      	cmp	r3, #3
 800336e:	d017      	beq.n	80033a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	2203      	movs	r2, #3
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d123      	bne.n	80033f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	08da      	lsrs	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3208      	adds	r2, #8
 80033b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	220f      	movs	r2, #15
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	08da      	lsrs	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3208      	adds	r2, #8
 80033ee:	69b9      	ldr	r1, [r7, #24]
 80033f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0203 	and.w	r2, r3, #3
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80a2 	beq.w	800357a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	4b57      	ldr	r3, [pc, #348]	; (8003598 <HAL_GPIO_Init+0x2e8>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	4a56      	ldr	r2, [pc, #344]	; (8003598 <HAL_GPIO_Init+0x2e8>)
 8003440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003444:	6453      	str	r3, [r2, #68]	; 0x44
 8003446:	4b54      	ldr	r3, [pc, #336]	; (8003598 <HAL_GPIO_Init+0x2e8>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003452:	4a52      	ldr	r2, [pc, #328]	; (800359c <HAL_GPIO_Init+0x2ec>)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	3302      	adds	r3, #2
 800345a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	220f      	movs	r2, #15
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a49      	ldr	r2, [pc, #292]	; (80035a0 <HAL_GPIO_Init+0x2f0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d019      	beq.n	80034b2 <HAL_GPIO_Init+0x202>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a48      	ldr	r2, [pc, #288]	; (80035a4 <HAL_GPIO_Init+0x2f4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d013      	beq.n	80034ae <HAL_GPIO_Init+0x1fe>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a47      	ldr	r2, [pc, #284]	; (80035a8 <HAL_GPIO_Init+0x2f8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00d      	beq.n	80034aa <HAL_GPIO_Init+0x1fa>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a46      	ldr	r2, [pc, #280]	; (80035ac <HAL_GPIO_Init+0x2fc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <HAL_GPIO_Init+0x1f6>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a45      	ldr	r2, [pc, #276]	; (80035b0 <HAL_GPIO_Init+0x300>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <HAL_GPIO_Init+0x1f2>
 800349e:	2304      	movs	r3, #4
 80034a0:	e008      	b.n	80034b4 <HAL_GPIO_Init+0x204>
 80034a2:	2307      	movs	r3, #7
 80034a4:	e006      	b.n	80034b4 <HAL_GPIO_Init+0x204>
 80034a6:	2303      	movs	r3, #3
 80034a8:	e004      	b.n	80034b4 <HAL_GPIO_Init+0x204>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e002      	b.n	80034b4 <HAL_GPIO_Init+0x204>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_GPIO_Init+0x204>
 80034b2:	2300      	movs	r3, #0
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	f002 0203 	and.w	r2, r2, #3
 80034ba:	0092      	lsls	r2, r2, #2
 80034bc:	4093      	lsls	r3, r2
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034c4:	4935      	ldr	r1, [pc, #212]	; (800359c <HAL_GPIO_Init+0x2ec>)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	3302      	adds	r3, #2
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d2:	4b38      	ldr	r3, [pc, #224]	; (80035b4 <HAL_GPIO_Init+0x304>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034f6:	4a2f      	ldr	r2, [pc, #188]	; (80035b4 <HAL_GPIO_Init+0x304>)
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034fc:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <HAL_GPIO_Init+0x304>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003520:	4a24      	ldr	r2, [pc, #144]	; (80035b4 <HAL_GPIO_Init+0x304>)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003526:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <HAL_GPIO_Init+0x304>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800354a:	4a1a      	ldr	r2, [pc, #104]	; (80035b4 <HAL_GPIO_Init+0x304>)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003550:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <HAL_GPIO_Init+0x304>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003574:	4a0f      	ldr	r2, [pc, #60]	; (80035b4 <HAL_GPIO_Init+0x304>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3301      	adds	r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	f67f aea2 	bls.w	80032cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	3724      	adds	r7, #36	; 0x24
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40023800 	.word	0x40023800
 800359c:	40013800 	.word	0x40013800
 80035a0:	40020000 	.word	0x40020000
 80035a4:	40020400 	.word	0x40020400
 80035a8:	40020800 	.word	0x40020800
 80035ac:	40020c00 	.word	0x40020c00
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40013c00 	.word	0x40013c00

080035b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
 80035c4:	4613      	mov	r3, r2
 80035c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c8:	787b      	ldrb	r3, [r7, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035d4:	e003      	b.n	80035de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035d6:	887b      	ldrh	r3, [r7, #2]
 80035d8:	041a      	lsls	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	619a      	str	r2, [r3, #24]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035fc:	887a      	ldrh	r2, [r7, #2]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4013      	ands	r3, r2
 8003602:	041a      	lsls	r2, r3, #16
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	43d9      	mvns	r1, r3
 8003608:	887b      	ldrh	r3, [r7, #2]
 800360a:	400b      	ands	r3, r1
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	619a      	str	r2, [r3, #24]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e267      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d075      	beq.n	800372a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800363e:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b04      	cmp	r3, #4
 8003648:	d00c      	beq.n	8003664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800364a:	4b85      	ldr	r3, [pc, #532]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003652:	2b08      	cmp	r3, #8
 8003654:	d112      	bne.n	800367c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003656:	4b82      	ldr	r3, [pc, #520]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003662:	d10b      	bne.n	800367c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	4b7e      	ldr	r3, [pc, #504]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d05b      	beq.n	8003728 <HAL_RCC_OscConfig+0x108>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d157      	bne.n	8003728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e242      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003684:	d106      	bne.n	8003694 <HAL_RCC_OscConfig+0x74>
 8003686:	4b76      	ldr	r3, [pc, #472]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a75      	ldr	r2, [pc, #468]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e01d      	b.n	80036d0 <HAL_RCC_OscConfig+0xb0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x98>
 800369e:	4b70      	ldr	r3, [pc, #448]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a6f      	ldr	r2, [pc, #444]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80036a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b6d      	ldr	r3, [pc, #436]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a6c      	ldr	r2, [pc, #432]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0xb0>
 80036b8:	4b69      	ldr	r3, [pc, #420]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a68      	ldr	r2, [pc, #416]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80036be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b66      	ldr	r3, [pc, #408]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a65      	ldr	r2, [pc, #404]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80036ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d013      	beq.n	8003700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7ff fcfc 	bl	80030d4 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e0:	f7ff fcf8 	bl	80030d4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b64      	cmp	r3, #100	; 0x64
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e207      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	4b5b      	ldr	r3, [pc, #364]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0xc0>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7ff fce8 	bl	80030d4 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003708:	f7ff fce4 	bl	80030d4 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e1f3      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371a:	4b51      	ldr	r3, [pc, #324]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0xe8>
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d063      	beq.n	80037fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003736:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00b      	beq.n	800375a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800374a:	2b08      	cmp	r3, #8
 800374c:	d11c      	bne.n	8003788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374e:	4b44      	ldr	r3, [pc, #272]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375a:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_RCC_OscConfig+0x152>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d001      	beq.n	8003772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e1c7      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4937      	ldr	r1, [pc, #220]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	e03a      	b.n	80037fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003790:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_RCC_OscConfig+0x244>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003796:	f7ff fc9d 	bl	80030d4 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800379e:	f7ff fc99 	bl	80030d4 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e1a8      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b0:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037bc:	4b28      	ldr	r3, [pc, #160]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4925      	ldr	r1, [pc, #148]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]
 80037d0:	e015      	b.n	80037fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d2:	4b24      	ldr	r3, [pc, #144]	; (8003864 <HAL_RCC_OscConfig+0x244>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7ff fc7c 	bl	80030d4 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e0:	f7ff fc78 	bl	80030d4 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e187      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f2:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d036      	beq.n	8003878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_RCC_OscConfig+0x248>)
 8003814:	2201      	movs	r2, #1
 8003816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7ff fc5c 	bl	80030d4 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003820:	f7ff fc58 	bl	80030d4 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e167      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_OscConfig+0x240>)
 8003834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0x200>
 800383e:	e01b      	b.n	8003878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003840:	4b09      	ldr	r3, [pc, #36]	; (8003868 <HAL_RCC_OscConfig+0x248>)
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003846:	f7ff fc45 	bl	80030d4 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384c:	e00e      	b.n	800386c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384e:	f7ff fc41 	bl	80030d4 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d907      	bls.n	800386c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e150      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
 8003860:	40023800 	.word	0x40023800
 8003864:	42470000 	.word	0x42470000
 8003868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386c:	4b88      	ldr	r3, [pc, #544]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 800386e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1ea      	bne.n	800384e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8097 	beq.w	80039b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388a:	4b81      	ldr	r3, [pc, #516]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	4b7d      	ldr	r3, [pc, #500]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a7c      	ldr	r2, [pc, #496]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	4b7a      	ldr	r3, [pc, #488]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	4b77      	ldr	r3, [pc, #476]	; (8003a94 <HAL_RCC_OscConfig+0x474>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d118      	bne.n	80038f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c2:	4b74      	ldr	r3, [pc, #464]	; (8003a94 <HAL_RCC_OscConfig+0x474>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a73      	ldr	r2, [pc, #460]	; (8003a94 <HAL_RCC_OscConfig+0x474>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ce:	f7ff fc01 	bl	80030d4 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7ff fbfd 	bl	80030d4 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e10c      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	4b6a      	ldr	r3, [pc, #424]	; (8003a94 <HAL_RCC_OscConfig+0x474>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x2ea>
 80038fc:	4b64      	ldr	r3, [pc, #400]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	4a63      	ldr	r2, [pc, #396]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6713      	str	r3, [r2, #112]	; 0x70
 8003908:	e01c      	b.n	8003944 <HAL_RCC_OscConfig+0x324>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b05      	cmp	r3, #5
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x30c>
 8003912:	4b5f      	ldr	r3, [pc, #380]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a5e      	ldr	r2, [pc, #376]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003918:	f043 0304 	orr.w	r3, r3, #4
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
 800391e:	4b5c      	ldr	r3, [pc, #368]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a5b      	ldr	r2, [pc, #364]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6713      	str	r3, [r2, #112]	; 0x70
 800392a:	e00b      	b.n	8003944 <HAL_RCC_OscConfig+0x324>
 800392c:	4b58      	ldr	r3, [pc, #352]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	4a57      	ldr	r2, [pc, #348]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	6713      	str	r3, [r2, #112]	; 0x70
 8003938:	4b55      	ldr	r3, [pc, #340]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	4a54      	ldr	r2, [pc, #336]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 800393e:	f023 0304 	bic.w	r3, r3, #4
 8003942:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d015      	beq.n	8003978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7ff fbc2 	bl	80030d4 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003952:	e00a      	b.n	800396a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003954:	f7ff fbbe 	bl	80030d4 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e0cb      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396a:	4b49      	ldr	r3, [pc, #292]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0ee      	beq.n	8003954 <HAL_RCC_OscConfig+0x334>
 8003976:	e014      	b.n	80039a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003978:	f7ff fbac 	bl	80030d4 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7ff fba8 	bl	80030d4 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e0b5      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003996:	4b3e      	ldr	r3, [pc, #248]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ee      	bne.n	8003980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d105      	bne.n	80039b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a8:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	4a38      	ldr	r2, [pc, #224]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 80039ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 80a1 	beq.w	8003b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039be:	4b34      	ldr	r3, [pc, #208]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d05c      	beq.n	8003a84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d141      	bne.n	8003a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d2:	4b31      	ldr	r3, [pc, #196]	; (8003a98 <HAL_RCC_OscConfig+0x478>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7ff fb7c 	bl	80030d4 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e0:	f7ff fb78 	bl	80030d4 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e087      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f2:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	019b      	lsls	r3, r3, #6
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	3b01      	subs	r3, #1
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	061b      	lsls	r3, r3, #24
 8003a22:	491b      	ldr	r1, [pc, #108]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_RCC_OscConfig+0x478>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2e:	f7ff fb51 	bl	80030d4 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a36:	f7ff fb4d 	bl	80030d4 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e05c      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x416>
 8003a54:	e054      	b.n	8003b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <HAL_RCC_OscConfig+0x478>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7ff fb3a 	bl	80030d4 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a64:	f7ff fb36 	bl	80030d4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e045      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_RCC_OscConfig+0x470>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x444>
 8003a82:	e03d      	b.n	8003b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d107      	bne.n	8003a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e038      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000
 8003a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <HAL_RCC_OscConfig+0x4ec>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d028      	beq.n	8003afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d121      	bne.n	8003afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d11a      	bne.n	8003afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003acc:	4013      	ands	r3, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d111      	bne.n	8003afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d107      	bne.n	8003afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800

08003b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0cc      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b24:	4b68      	ldr	r3, [pc, #416]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d90c      	bls.n	8003b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b32:	4b65      	ldr	r3, [pc, #404]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	b2d2      	uxtb	r2, r2
 8003b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b63      	ldr	r3, [pc, #396]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0b8      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d020      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b64:	4b59      	ldr	r3, [pc, #356]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a58      	ldr	r2, [pc, #352]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b7c:	4b53      	ldr	r3, [pc, #332]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a52      	ldr	r2, [pc, #328]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b88:	4b50      	ldr	r3, [pc, #320]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	494d      	ldr	r1, [pc, #308]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d044      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d107      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d119      	bne.n	8003bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e07f      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d003      	beq.n	8003bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bce:	4b3f      	ldr	r3, [pc, #252]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e06f      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bde:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e067      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bee:	4b37      	ldr	r3, [pc, #220]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f023 0203 	bic.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4934      	ldr	r1, [pc, #208]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c00:	f7ff fa68 	bl	80030d4 <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c08:	f7ff fa64 	bl	80030d4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e04f      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	4b2b      	ldr	r3, [pc, #172]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 020c 	and.w	r2, r3, #12
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d1eb      	bne.n	8003c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c30:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d20c      	bcs.n	8003c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e032      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c64:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4916      	ldr	r1, [pc, #88]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	490e      	ldr	r1, [pc, #56]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c96:	f000 f821 	bl	8003cdc <HAL_RCC_GetSysClockFreq>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	490a      	ldr	r1, [pc, #40]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca8:	5ccb      	ldrb	r3, [r1, r3]
 8003caa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff f908 	bl	8002ecc <HAL_InitTick>

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023c00 	.word	0x40023c00
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	08004598 	.word	0x08004598
 8003cd4:	20000008 	.word	0x20000008
 8003cd8:	2000000c 	.word	0x2000000c

08003cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce0:	b094      	sub	sp, #80	; 0x50
 8003ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce8:	2300      	movs	r3, #0
 8003cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cec:	2300      	movs	r3, #0
 8003cee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf4:	4b79      	ldr	r3, [pc, #484]	; (8003edc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 030c 	and.w	r3, r3, #12
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d00d      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x40>
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	f200 80e1 	bhi.w	8003ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x34>
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d0e:	e0db      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b73      	ldr	r3, [pc, #460]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d14:	e0db      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d16:	4b73      	ldr	r3, [pc, #460]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d1a:	e0d8      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d1c:	4b6f      	ldr	r3, [pc, #444]	; (8003edc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d26:	4b6d      	ldr	r3, [pc, #436]	; (8003edc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d063      	beq.n	8003dfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d32:	4b6a      	ldr	r3, [pc, #424]	; (8003edc <HAL_RCC_GetSysClockFreq+0x200>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	099b      	lsrs	r3, r3, #6
 8003d38:	2200      	movs	r2, #0
 8003d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d44:	633b      	str	r3, [r7, #48]	; 0x30
 8003d46:	2300      	movs	r3, #0
 8003d48:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d4e:	4622      	mov	r2, r4
 8003d50:	462b      	mov	r3, r5
 8003d52:	f04f 0000 	mov.w	r0, #0
 8003d56:	f04f 0100 	mov.w	r1, #0
 8003d5a:	0159      	lsls	r1, r3, #5
 8003d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d60:	0150      	lsls	r0, r2, #5
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4621      	mov	r1, r4
 8003d68:	1a51      	subs	r1, r2, r1
 8003d6a:	6139      	str	r1, [r7, #16]
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d80:	4659      	mov	r1, fp
 8003d82:	018b      	lsls	r3, r1, #6
 8003d84:	4651      	mov	r1, sl
 8003d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d8a:	4651      	mov	r1, sl
 8003d8c:	018a      	lsls	r2, r1, #6
 8003d8e:	4651      	mov	r1, sl
 8003d90:	ebb2 0801 	subs.w	r8, r2, r1
 8003d94:	4659      	mov	r1, fp
 8003d96:	eb63 0901 	sbc.w	r9, r3, r1
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dae:	4690      	mov	r8, r2
 8003db0:	4699      	mov	r9, r3
 8003db2:	4623      	mov	r3, r4
 8003db4:	eb18 0303 	adds.w	r3, r8, r3
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	462b      	mov	r3, r5
 8003dbc:	eb49 0303 	adc.w	r3, r9, r3
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dce:	4629      	mov	r1, r5
 8003dd0:	024b      	lsls	r3, r1, #9
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dd8:	4621      	mov	r1, r4
 8003dda:	024a      	lsls	r2, r1, #9
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de2:	2200      	movs	r2, #0
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dec:	f7fc f9f8 	bl	80001e0 <__aeabi_uldivmod>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4613      	mov	r3, r2
 8003df6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df8:	e058      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dfa:	4b38      	ldr	r3, [pc, #224]	; (8003edc <HAL_RCC_GetSysClockFreq+0x200>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	099b      	lsrs	r3, r3, #6
 8003e00:	2200      	movs	r2, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	4611      	mov	r1, r2
 8003e06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e0a:	623b      	str	r3, [r7, #32]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e14:	4642      	mov	r2, r8
 8003e16:	464b      	mov	r3, r9
 8003e18:	f04f 0000 	mov.w	r0, #0
 8003e1c:	f04f 0100 	mov.w	r1, #0
 8003e20:	0159      	lsls	r1, r3, #5
 8003e22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e26:	0150      	lsls	r0, r2, #5
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e32:	4649      	mov	r1, r9
 8003e34:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e4c:	ebb2 040a 	subs.w	r4, r2, sl
 8003e50:	eb63 050b 	sbc.w	r5, r3, fp
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	00eb      	lsls	r3, r5, #3
 8003e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e62:	00e2      	lsls	r2, r4, #3
 8003e64:	4614      	mov	r4, r2
 8003e66:	461d      	mov	r5, r3
 8003e68:	4643      	mov	r3, r8
 8003e6a:	18e3      	adds	r3, r4, r3
 8003e6c:	603b      	str	r3, [r7, #0]
 8003e6e:	464b      	mov	r3, r9
 8003e70:	eb45 0303 	adc.w	r3, r5, r3
 8003e74:	607b      	str	r3, [r7, #4]
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e82:	4629      	mov	r1, r5
 8003e84:	028b      	lsls	r3, r1, #10
 8003e86:	4621      	mov	r1, r4
 8003e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	028a      	lsls	r2, r1, #10
 8003e90:	4610      	mov	r0, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e96:	2200      	movs	r2, #0
 8003e98:	61bb      	str	r3, [r7, #24]
 8003e9a:	61fa      	str	r2, [r7, #28]
 8003e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea0:	f7fc f99e 	bl	80001e0 <__aeabi_uldivmod>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_RCC_GetSysClockFreq+0x200>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	0c1b      	lsrs	r3, r3, #16
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ebc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ec6:	e002      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3750      	adds	r7, #80	; 0x50
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eda:	bf00      	nop
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	00f42400 	.word	0x00f42400
 8003ee4:	007a1200 	.word	0x007a1200

08003ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <HAL_RCC_GetHCLKFreq+0x14>)
 8003eee:	681b      	ldr	r3, [r3, #0]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	20000008 	.word	0x20000008

08003f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f04:	f7ff fff0 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	0b5b      	lsrs	r3, r3, #13
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	4903      	ldr	r1, [pc, #12]	; (8003f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f16:	5ccb      	ldrb	r3, [r1, r3]
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40023800 	.word	0x40023800
 8003f24:	080045a8 	.word	0x080045a8

08003f28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	220f      	movs	r2, #15
 8003f36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f38:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <HAL_RCC_GetClockConfig+0x5c>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0203 	and.w	r2, r3, #3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f44:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <HAL_RCC_GetClockConfig+0x5c>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <HAL_RCC_GetClockConfig+0x5c>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCC_GetClockConfig+0x5c>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	08db      	lsrs	r3, r3, #3
 8003f62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f6a:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <HAL_RCC_GetClockConfig+0x60>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0207 	and.w	r2, r3, #7
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	601a      	str	r2, [r3, #0]
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40023c00 	.word	0x40023c00

08003f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e041      	b.n	8004022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f839 	bl	800402a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f000 f9b2 	bl	8004334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d001      	beq.n	8004058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e044      	b.n	80040e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d018      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x6c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004082:	d013      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x6c>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1a      	ldr	r2, [pc, #104]	; (80040f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00e      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x6c>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d009      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x6c>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a17      	ldr	r2, [pc, #92]	; (80040fc <HAL_TIM_Base_Start_IT+0xbc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x6c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_TIM_Base_Start_IT+0xc0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d111      	bne.n	80040d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b06      	cmp	r3, #6
 80040bc:	d010      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ce:	e007      	b.n	80040e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40000800 	.word	0x40000800
 80040fc:	40000c00 	.word	0x40000c00
 8004100:	40014000 	.word	0x40014000

08004104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d020      	beq.n	8004168 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01b      	beq.n	8004168 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0202 	mvn.w	r2, #2
 8004138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8d2 	bl	80042f8 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f8c4 	bl	80042e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f8d5 	bl	800430c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d020      	beq.n	80041b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01b      	beq.n	80041b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0204 	mvn.w	r2, #4
 8004184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f8ac 	bl	80042f8 <HAL_TIM_IC_CaptureCallback>
 80041a0:	e005      	b.n	80041ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f89e 	bl	80042e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f8af 	bl	800430c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d020      	beq.n	8004200 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01b      	beq.n	8004200 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0208 	mvn.w	r2, #8
 80041d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2204      	movs	r2, #4
 80041d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f886 	bl	80042f8 <HAL_TIM_IC_CaptureCallback>
 80041ec:	e005      	b.n	80041fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f878 	bl	80042e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f889 	bl	800430c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b00      	cmp	r3, #0
 8004208:	d020      	beq.n	800424c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01b      	beq.n	800424c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0210 	mvn.w	r2, #16
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2208      	movs	r2, #8
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f860 	bl	80042f8 <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f852 	bl	80042e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f863 	bl	800430c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00c      	beq.n	8004270 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0201 	mvn.w	r2, #1
 8004268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fe fdee 	bl	8002e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00c      	beq.n	8004294 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f8e6 	bl	8004460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f834 	bl	8004320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0220 	mvn.w	r2, #32
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f8b8 	bl	800444c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a3a      	ldr	r2, [pc, #232]	; (8004430 <TIM_Base_SetConfig+0xfc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00f      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004352:	d00b      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a37      	ldr	r2, [pc, #220]	; (8004434 <TIM_Base_SetConfig+0x100>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a36      	ldr	r2, [pc, #216]	; (8004438 <TIM_Base_SetConfig+0x104>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0x38>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a35      	ldr	r2, [pc, #212]	; (800443c <TIM_Base_SetConfig+0x108>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d108      	bne.n	800437e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a2b      	ldr	r2, [pc, #172]	; (8004430 <TIM_Base_SetConfig+0xfc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01b      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438c:	d017      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a28      	ldr	r2, [pc, #160]	; (8004434 <TIM_Base_SetConfig+0x100>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a27      	ldr	r2, [pc, #156]	; (8004438 <TIM_Base_SetConfig+0x104>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00f      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a26      	ldr	r2, [pc, #152]	; (800443c <TIM_Base_SetConfig+0x108>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00b      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a25      	ldr	r2, [pc, #148]	; (8004440 <TIM_Base_SetConfig+0x10c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a24      	ldr	r2, [pc, #144]	; (8004444 <TIM_Base_SetConfig+0x110>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0x8a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a23      	ldr	r2, [pc, #140]	; (8004448 <TIM_Base_SetConfig+0x114>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a0e      	ldr	r2, [pc, #56]	; (8004430 <TIM_Base_SetConfig+0xfc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d103      	bne.n	8004404 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b01      	cmp	r3, #1
 8004414:	d105      	bne.n	8004422 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	611a      	str	r2, [r3, #16]
  }
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40010000 	.word	0x40010000
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800
 800443c:	40000c00 	.word	0x40000c00
 8004440:	40014000 	.word	0x40014000
 8004444:	40014400 	.word	0x40014400
 8004448:	40014800 	.word	0x40014800

0800444c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <memset>:
 8004474:	4402      	add	r2, r0
 8004476:	4603      	mov	r3, r0
 8004478:	4293      	cmp	r3, r2
 800447a:	d100      	bne.n	800447e <memset+0xa>
 800447c:	4770      	bx	lr
 800447e:	f803 1b01 	strb.w	r1, [r3], #1
 8004482:	e7f9      	b.n	8004478 <memset+0x4>

08004484 <__libc_init_array>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	4d0d      	ldr	r5, [pc, #52]	; (80044bc <__libc_init_array+0x38>)
 8004488:	4c0d      	ldr	r4, [pc, #52]	; (80044c0 <__libc_init_array+0x3c>)
 800448a:	1b64      	subs	r4, r4, r5
 800448c:	10a4      	asrs	r4, r4, #2
 800448e:	2600      	movs	r6, #0
 8004490:	42a6      	cmp	r6, r4
 8004492:	d109      	bne.n	80044a8 <__libc_init_array+0x24>
 8004494:	4d0b      	ldr	r5, [pc, #44]	; (80044c4 <__libc_init_array+0x40>)
 8004496:	4c0c      	ldr	r4, [pc, #48]	; (80044c8 <__libc_init_array+0x44>)
 8004498:	f000 f826 	bl	80044e8 <_init>
 800449c:	1b64      	subs	r4, r4, r5
 800449e:	10a4      	asrs	r4, r4, #2
 80044a0:	2600      	movs	r6, #0
 80044a2:	42a6      	cmp	r6, r4
 80044a4:	d105      	bne.n	80044b2 <__libc_init_array+0x2e>
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ac:	4798      	blx	r3
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7ee      	b.n	8004490 <__libc_init_array+0xc>
 80044b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b6:	4798      	blx	r3
 80044b8:	3601      	adds	r6, #1
 80044ba:	e7f2      	b.n	80044a2 <__libc_init_array+0x1e>
 80044bc:	080045b8 	.word	0x080045b8
 80044c0:	080045b8 	.word	0x080045b8
 80044c4:	080045b8 	.word	0x080045b8
 80044c8:	080045bc 	.word	0x080045bc

080044cc <memcpy>:
 80044cc:	440a      	add	r2, r1
 80044ce:	4291      	cmp	r1, r2
 80044d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80044d4:	d100      	bne.n	80044d8 <memcpy+0xc>
 80044d6:	4770      	bx	lr
 80044d8:	b510      	push	{r4, lr}
 80044da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044e2:	4291      	cmp	r1, r2
 80044e4:	d1f9      	bne.n	80044da <memcpy+0xe>
 80044e6:	bd10      	pop	{r4, pc}

080044e8 <_init>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	bf00      	nop
 80044ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ee:	bc08      	pop	{r3}
 80044f0:	469e      	mov	lr, r3
 80044f2:	4770      	bx	lr

080044f4 <_fini>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	bf00      	nop
 80044f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	469e      	mov	lr, r3
 80044fe:	4770      	bx	lr
